// For some reason a default import of `process` causes
// `process.stdin`, `process.stderr`, and `process.stdout`
// to get treated as `any` by `@typescript-eslint/no-unsafe-assignment`.
import * as process from 'node:process';
import {Readable, Writable, Duplex, Transform} from 'node:stream';
import {createWriteStream} from 'node:fs';
import {expectType, expectNotType, expectError, expectAssignable, expectNotAssignable} from 'tsd';
import {
	$,
	execa,
	execaSync,
	execaCommand,
	execaCommandSync,
	execaNode,
	ExecaError,
	ExecaSyncError,
	type Options,
	type ExecaResult,
	type ExecaSubprocess,
	type SyncOptions,
	type ExecaSyncResult,
	type StdinOption,
	type StdinOptionSync,
	type StdoutStderrOption,
	type StdoutStderrOptionSync,
	type StdioOption,
	type StdioOptionSync,
} from './index.js';

const pipeInherit = ['pipe', 'inherit'] as const;
const pipeUndefined = ['pipe', undefined] as const;

const fileUrl = new URL('file:///test');
const fileObject = {file: './test'} as const;
const invalidFileObject = {file: fileUrl} as const;

const stringArray = ['foo', 'bar'] as const;
const binaryArray = [new Uint8Array(), new Uint8Array()] as const;
const objectArray = [{}, {}] as const;

const stringIterableFunction = function * () {
	yield '';
};

const stringIterable = stringIterableFunction();

const binaryIterableFunction = function * () {
	yield new Uint8Array(0);
};

const binaryIterable = binaryIterableFunction();

const objectIterableFunction = function * () {
	yield {};
};

const objectIterable = objectIterableFunction();

const asyncStringIterableFunction = async function * () {
	yield '';
};

const asyncStringIterable = asyncStringIterableFunction();

const asyncBinaryIterableFunction = async function * () {
	yield new Uint8Array(0);
};

const asyncBinaryIterable = asyncBinaryIterableFunction();

const asyncObjectIterableFunction = async function * () {
	yield {};
};

const asyncObjectIterable = asyncObjectIterableFunction();

const duplexStream = new Duplex();
const duplex = {transform: duplexStream} as const;
const duplexObject = {transform: duplexStream as Duplex & {readonly readableObjectMode: true}} as const;
const duplexNotObject = {transform: duplexStream as Duplex & {readonly readableObjectMode: false}} as const;
const duplexObjectProperty = {transform: duplexStream, objectMode: true as const} as const;
const duplexNotObjectProperty = {transform: duplexStream, objectMode: false as const} as const;
const duplexTransform = {transform: new Transform()} as const;
const duplexWithInvalidObjectMode = {...duplex, objectMode: 'true'} as const;

const webTransformInstance = new TransformStream();
const webTransform = {transform: webTransformInstance} as const;
const webTransformObject = {transform: webTransformInstance, objectMode: true as const} as const;
const webTransformNotObject = {transform: webTransformInstance, objectMode: false as const} as const;
const webTransformWithInvalidObjectMode = {...webTransform, objectMode: 'true'} as const;

const unknownGenerator = function * (line: unknown) {
	yield line;
};

const unknownGeneratorFull = {transform: unknownGenerator, objectMode: true} as const;

const unknownFinal = function * () {
	yield {} as unknown;
};

const unknownFinalFull = {transform: unknownGenerator, final: unknownFinal, objectMode: true} as const;

const objectGenerator = function * (line: unknown) {
	yield JSON.parse(line as string) as object;
};

const objectGeneratorFull = {transform: objectGenerator, objectMode: true} as const;

const objectFinal = function * () {
	yield {};
};

const objectFinalFull = {transform: objectGenerator, final: objectFinal, objectMode: true} as const;

const booleanGenerator = function * (line: boolean) {
	yield line;
};

const booleanGeneratorFull = {transform: booleanGenerator} as const;

const stringGenerator = function * (line: string) {
	yield line;
};

const stringGeneratorFull = {transform: stringGenerator} as const;

const invalidReturnGenerator = function * (line: unknown) {
	yield line;
	return false;
};

const invalidReturnGeneratorFull = {transform: invalidReturnGenerator} as const;

const invalidReturnFinal = function * () {
	yield {} as unknown;
	return false;
};

const invalidReturnFinalFull = {transform: stringGenerator, final: invalidReturnFinal} as const;

const asyncGenerator = async function * (line: unknown) {
	yield '';
};

const asyncGeneratorFull = {transform: asyncGenerator} as const;

const asyncFinal = async function * () {
	yield '';
};

const asyncFinalFull = {transform: asyncGenerator, final: asyncFinal} as const;

const transformWithBinary = {transform: unknownGenerator, binary: true} as const;
const transformWithInvalidBinary = {transform: unknownGenerator, binary: 'true'} as const;
const transformWithPreserveNewlines = {transform: unknownGenerator, preserveNewlines: true} as const;
const transformWithInvalidPreserveNewlines = {transform: unknownGenerator, preserveNewlines: 'true'} as const;
const transformWithObjectMode = {transform: unknownGenerator, objectMode: true} as const;
const transformWithInvalidObjectMode = {transform: unknownGenerator, objectMode: 'true'} as const;
const binaryOnly = {binary: true} as const;
const preserveNewlinesOnly = {preserveNewlines: true} as const;
const objectModeOnly = {objectMode: true} as const;
const finalOnly = {final: unknownFinal} as const;

type AnyChunk = string | Uint8Array | string[] | unknown[] | undefined;
expectType<Writable | null>({} as ExecaSubprocess['stdin']);
expectType<Readable | null>({} as ExecaSubprocess['stdout']);
expectType<Readable | null>({} as ExecaSubprocess['stderr']);
expectType<Readable | undefined>({} as ExecaSubprocess['all']);
expectType<AnyChunk>({} as ExecaResult['stdout']);
expectType<AnyChunk>({} as ExecaResult['stderr']);
expectType<AnyChunk>({} as ExecaResult['all']);
expectAssignable<[undefined, AnyChunk, AnyChunk, ...AnyChunk[]]>({} as ExecaResult['stdio']);
expectType<AnyChunk>({} as ExecaSyncResult['stdout']);
expectType<AnyChunk>({} as ExecaSyncResult['stderr']);
expectType<AnyChunk>({} as ExecaSyncResult['all']);
expectAssignable<[undefined, AnyChunk, AnyChunk, ...AnyChunk[]]>({} as ExecaSyncResult['stdio']);

try {
	const execaPromise = execa('unicorns', {all: true});
	const unicornsResult = await execaPromise;

	const execaBufferPromise = execa('unicorns', {encoding: 'buffer', all: true});
	const bufferResult = await execaBufferPromise;

	const execaHexPromise = execa('unicorns', {encoding: 'hex', all: true});
	const hexResult = await execaHexPromise;

	const scriptPromise = $`unicorns`;

	const pipeOptions = {from: 'stderr', to: 'fd3', all: true} as const;

	type BufferExecaReturnValue = typeof bufferResult;
	type EmptyExecaReturnValue = ExecaResult<{}>;
	type ShortcutExecaReturnValue = ExecaResult<typeof pipeOptions>;

	expectType<BufferExecaReturnValue>(await execaPromise.pipe(execaBufferPromise));
	expectType<BufferExecaReturnValue>(await scriptPromise.pipe(execaBufferPromise));
	expectNotType<BufferExecaReturnValue>(await execaPromise.pipe(execaPromise));
	expectNotType<BufferExecaReturnValue>(await scriptPromise.pipe(execaPromise));
	expectType<EmptyExecaReturnValue>(await execaPromise.pipe`stdin`);
	expectType<EmptyExecaReturnValue>(await scriptPromise.pipe`stdin`);
	expectType<ShortcutExecaReturnValue>(await execaPromise.pipe('stdin', pipeOptions));
	expectType<ShortcutExecaReturnValue>(await scriptPromise.pipe('stdin', pipeOptions));
	expectType<BufferExecaReturnValue>(await execaPromise.pipe(execaPromise).pipe(execaBufferPromise));
	expectType<BufferExecaReturnValue>(await scriptPromise.pipe(execaPromise).pipe(execaBufferPromise));
	expectType<EmptyExecaReturnValue>(await execaPromise.pipe(execaPromise).pipe`stdin`);
	expectType<EmptyExecaReturnValue>(await scriptPromise.pipe(execaPromise).pipe`stdin`);
	expectType<ShortcutExecaReturnValue>(await execaPromise.pipe(execaPromise).pipe('stdin', pipeOptions));
	expectType<ShortcutExecaReturnValue>(await scriptPromise.pipe(execaPromise).pipe('stdin', pipeOptions));
	expectType<BufferExecaReturnValue>(await execaPromise.pipe`stdin`.pipe(execaBufferPromise));
	expectType<BufferExecaReturnValue>(await scriptPromise.pipe`stdin`.pipe(execaBufferPromise));
	expectType<EmptyExecaReturnValue>(await execaPromise.pipe`stdin`.pipe`stdin`);
	expectType<EmptyExecaReturnValue>(await scriptPromise.pipe`stdin`.pipe`stdin`);
	expectType<ShortcutExecaReturnValue>(await execaPromise.pipe`stdin`.pipe('stdin', pipeOptions));
	expectType<ShortcutExecaReturnValue>(await scriptPromise.pipe`stdin`.pipe('stdin', pipeOptions));
	expectType<BufferExecaReturnValue>(await execaPromise.pipe('pipe').pipe(execaBufferPromise));
	expectType<BufferExecaReturnValue>(await scriptPromise.pipe('pipe').pipe(execaBufferPromise));
	expectType<EmptyExecaReturnValue>(await execaPromise.pipe('pipe').pipe`stdin`);
	expectType<EmptyExecaReturnValue>(await scriptPromise.pipe('pipe').pipe`stdin`);
	expectType<ShortcutExecaReturnValue>(await execaPromise.pipe('pipe').pipe('stdin', pipeOptions));
	expectType<ShortcutExecaReturnValue>(await scriptPromise.pipe('pipe').pipe('stdin', pipeOptions));
	await execaPromise.pipe(execaPromise).pipe(execaBufferPromise, pipeOptions);
	await scriptPromise.pipe(execaPromise).pipe(execaBufferPromise, pipeOptions);
	await execaPromise.pipe(execaBufferPromise, pipeOptions).pipe`stdin`;
	await scriptPromise.pipe(execaBufferPromise, pipeOptions).pipe`stdin`;
	await execaPromise.pipe(execaBufferPromise, pipeOptions).pipe('stdin');
	await scriptPromise.pipe(execaBufferPromise, pipeOptions).pipe('stdin');
	await execaPromise.pipe`stdin`.pipe(execaBufferPromise, pipeOptions);
	await scriptPromise.pipe`stdin`.pipe(execaBufferPromise, pipeOptions);
	await execaPromise.pipe`stdin`.pipe(pipeOptions)`stdin`;
	await scriptPromise.pipe`stdin`.pipe(pipeOptions)`stdin`;
	await execaPromise.pipe`stdin`.pipe('stdin', pipeOptions);
	await scriptPromise.pipe`stdin`.pipe('stdin', pipeOptions);
	expectError(execaPromise.pipe(execaBufferPromise).stdout);
	expectError(scriptPromise.pipe(execaBufferPromise).stdout);
	expectError(execaPromise.pipe`stdin`.stdout);
	expectError(scriptPromise.pipe`stdin`.stdout);
	expectError(execaPromise.pipe('stdin').stdout);
	expectError(scriptPromise.pipe('stdin').stdout);
	expectError(execaPromise.pipe(createWriteStream('output.txt')));
	expectError(scriptPromise.pipe(createWriteStream('output.txt')));
	expectError(execaPromise.pipe(false));
	expectError(scriptPromise.pipe(false));
	await execaPromise.pipe(execaBufferPromise, {});
	await scriptPromise.pipe(execaBufferPromise, {});
	await execaPromise.pipe({})`stdin`;
	await scriptPromise.pipe({})`stdin`;
	await execaPromise.pipe('stdin', {});
	await scriptPromise.pipe('stdin', {});
	expectError(execaPromise.pipe(execaBufferPromise, 'stdout'));
	expectError(scriptPromise.pipe(execaBufferPromise, 'stdout'));
	expectError(execaPromise.pipe('stdout')`stdin`);
	expectError(scriptPromise.pipe('stdout')`stdin`);
	await execaPromise.pipe(execaBufferPromise, {from: 'stdout'});
	await scriptPromise.pipe(execaBufferPromise, {from: 'stdout'});
	await execaPromise.pipe({from: 'stdout'})`stdin`;
	await scriptPromise.pipe({from: 'stdout'})`stdin`;
	await execaPromise.pipe('stdin', {from: 'stdout'});
	await scriptPromise.pipe('stdin', {from: 'stdout'});
	await execaPromise.pipe(execaBufferPromise, {from: 'stderr'});
	await scriptPromise.pipe(execaBufferPromise, {from: 'stderr'});
	await execaPromise.pipe({from: 'stderr'})`stdin`;
	await scriptPromise.pipe({from: 'stderr'})`stdin`;
	await execaPromise.pipe('stdin', {from: 'stderr'});
	await scriptPromise.pipe('stdin', {from: 'stderr'});
	await execaPromise.pipe(execaBufferPromise, {from: 'all'});
	await scriptPromise.pipe(execaBufferPromise, {from: 'all'});
	await execaPromise.pipe({from: 'all'})`stdin`;
	await scriptPromise.pipe({from: 'all'})`stdin`;
	await execaPromise.pipe('stdin', {from: 'all'});
	await scriptPromise.pipe('stdin', {from: 'all'});
	await execaPromise.pipe(execaBufferPromise, {from: 'fd3'});
	await scriptPromise.pipe(execaBufferPromise, {from: 'fd3'});
	await execaPromise.pipe({from: 'fd3'})`stdin`;
	await scriptPromise.pipe({from: 'fd3'})`stdin`;
	await execaPromise.pipe('stdin', {from: 'fd3'});
	await scriptPromise.pipe('stdin', {from: 'fd3'});
	expectError(execaPromise.pipe(execaBufferPromise, {from: 'stdin'}));
	expectError(scriptPromise.pipe(execaBufferPromise, {from: 'stdin'}));
	expectError(execaPromise.pipe({from: 'stdin'})`stdin`);
	expectError(scriptPromise.pipe({from: 'stdin'})`stdin`);
	expectError(execaPromise.pipe('stdin', {from: 'stdin'}));
	expectError(scriptPromise.pipe('stdin', {from: 'stdin'}));
	await execaPromise.pipe(execaBufferPromise, {to: 'stdin'});
	await scriptPromise.pipe(execaBufferPromise, {to: 'stdin'});
	await execaPromise.pipe({to: 'stdin'})`stdin`;
	await scriptPromise.pipe({to: 'stdin'})`stdin`;
	await execaPromise.pipe('stdin', {to: 'stdin'});
	await scriptPromise.pipe('stdin', {to: 'stdin'});
	await execaPromise.pipe(execaBufferPromise, {to: 'fd3'});
	await scriptPromise.pipe(execaBufferPromise, {to: 'fd3'});
	await execaPromise.pipe({to: 'fd3'})`stdin`;
	await scriptPromise.pipe({to: 'fd3'})`stdin`;
	await execaPromise.pipe('stdin', {to: 'fd3'});
	await scriptPromise.pipe('stdin', {to: 'fd3'});
	expectError(execaPromise.pipe(execaBufferPromise, {to: 'stdout'}));
	expectError(scriptPromise.pipe(execaBufferPromise, {to: 'stdout'}));
	expectError(execaPromise.pipe({to: 'stdout'})`stdin`);
	expectError(scriptPromise.pipe({to: 'stdout'})`stdin`);
	expectError(execaPromise.pipe('stdin', {to: 'stdout'}));
	expectError(scriptPromise.pipe('stdin', {to: 'stdout'}));
	await execaPromise.pipe(execaBufferPromise, {unpipeSignal: new AbortController().signal});
	await scriptPromise.pipe(execaBufferPromise, {unpipeSignal: new AbortController().signal});
	await execaPromise.pipe({unpipeSignal: new AbortController().signal})`stdin`;
	await scriptPromise.pipe({unpipeSignal: new AbortController().signal})`stdin`;
	await execaPromise.pipe('stdin', {unpipeSignal: new AbortController().signal});
	await scriptPromise.pipe('stdin', {unpipeSignal: new AbortController().signal});
	expectError(await execaPromise.pipe(execaBufferPromise, {unpipeSignal: true}));
	expectError(await scriptPromise.pipe(execaBufferPromise, {unpipeSignal: true}));
	expectError(await execaPromise.pipe({unpipeSignal: true})`stdin`);
	expectError(await scriptPromise.pipe({unpipeSignal: true})`stdin`);
	expectError(await execaPromise.pipe('stdin', {unpipeSignal: true}));
	expectError(await scriptPromise.pipe('stdin', {unpipeSignal: true}));
	expectError(await execaPromise.pipe({})({}));
	expectError(await scriptPromise.pipe({})({}));
	expectError(await execaPromise.pipe({})(execaPromise));
	expectError(await scriptPromise.pipe({})(execaPromise));
	expectError(await execaPromise.pipe({})('stdin'));
	expectError(await scriptPromise.pipe({})('stdin'));

	expectType<EmptyExecaReturnValue>(await execaPromise.pipe('stdin'));
	await execaPromise.pipe('stdin');
	await execaPromise.pipe(fileUrl);
	await execaPromise.pipe('stdin', []);
	await execaPromise.pipe('stdin', stringArray);
	await execaPromise.pipe('stdin', stringArray, {});
	await execaPromise.pipe('stdin', stringArray, {from: 'stderr', to: 'stdin', all: true});
	await execaPromise.pipe('stdin', {from: 'stderr'});
	await execaPromise.pipe('stdin', {to: 'stdin'});
	await execaPromise.pipe('stdin', {all: true});
	expectError(await execaPromise.pipe(stringArray));
	expectError(await execaPromise.pipe('stdin', 'foo'));
	expectError(await execaPromise.pipe('stdin', [false]));
	expectError(await execaPromise.pipe('stdin', [], false));
	expectError(await execaPromise.pipe('stdin', {other: true}));
	expectError(await execaPromise.pipe('stdin', [], {other: true}));
	expectError(await execaPromise.pipe('stdin', {from: 'fd'}));
	expectError(await execaPromise.pipe('stdin', [], {from: 'fd'}));
	expectError(await execaPromise.pipe('stdin', {from: 'fdNotANumber'}));
	expectError(await execaPromise.pipe('stdin', [], {from: 'fdNotANumber'}));
	expectError(await execaPromise.pipe('stdin', {from: 'other'}));
	expectError(await execaPromise.pipe('stdin', [], {from: 'other'}));
	expectError(await execaPromise.pipe('stdin', {to: 'fd'}));
	expectError(await execaPromise.pipe('stdin', [], {to: 'fd'}));
	expectError(await execaPromise.pipe('stdin', {to: 'fdNotANumber'}));
	expectError(await execaPromise.pipe('stdin', [], {to: 'fdNotANumber'}));
	expectError(await execaPromise.pipe('stdin', {to: 'other'}));
	expectError(await execaPromise.pipe('stdin', [], {to: 'other'}));

	const pipeResult = await execaPromise.pipe`stdin`;
	expectType<string>(pipeResult.stdout);
	const ignorePipeResult = await execaPromise.pipe({stdout: 'ignore'})`stdin`;
	expectType<undefined>(ignorePipeResult.stdout);

	const scriptPipeResult = await scriptPromise.pipe`stdin`;
	expectType<string>(scriptPipeResult.stdout);
	const ignoreScriptPipeResult = await scriptPromise.pipe({stdout: 'ignore'})`stdin`;
	expectType<undefined>(ignoreScriptPipeResult.stdout);

	const shortcutPipeResult = await execaPromise.pipe('stdin');
	expectType<string>(shortcutPipeResult.stdout);
	const ignoreShortcutPipeResult = await execaPromise.pipe('stdin', {stdout: 'ignore'});
	expectType<undefined>(ignoreShortcutPipeResult.stdout);

	const scriptShortcutPipeResult = await scriptPromise.pipe('stdin');
	expectType<string>(scriptShortcutPipeResult.stdout);
	const ignoreShortcutScriptPipeResult = await scriptPromise.pipe('stdin', {stdout: 'ignore'});
	expectType<undefined>(ignoreShortcutScriptPipeResult.stdout);

	const asyncIteration = async () => {
		for await (const line of scriptPromise) {
			expectType<string>(line);
		}

		for await (const line of scriptPromise.iterable()) {
			expectType<string>(line);
		}

		for await (const line of scriptPromise.iterable({binary: false})) {
			expectType<string>(line);
		}

		for await (const line of scriptPromise.iterable({binary: true})) {
			expectType<Uint8Array>(line);
		}

		for await (const line of scriptPromise.iterable({} as {binary: boolean})) {
			expectType<string | Uint8Array>(line);
		}

		for await (const line of execaBufferPromise) {
			expectType<Uint8Array>(line);
		}

		for await (const line of execaBufferPromise.iterable()) {
			expectType<Uint8Array>(line);
		}

		for await (const line of execaBufferPromise.iterable({binary: false})) {
			expectType<Uint8Array>(line);
		}

		for await (const line of execaBufferPromise.iterable({binary: true})) {
			expectType<Uint8Array>(line);
		}

		for await (const line of execaBufferPromise.iterable({} as {binary: boolean})) {
			expectType<Uint8Array>(line);
		}
	};

	await asyncIteration();
	expectType<AsyncIterableIterator<string>>(scriptPromise.iterable());
	expectType<AsyncIterableIterator<string>>(scriptPromise.iterable({binary: false}));
	expectType<AsyncIterableIterator<Uint8Array>>(scriptPromise.iterable({binary: true}));
	expectType<AsyncIterableIterator<string | Uint8Array>>(scriptPromise.iterable({} as {binary: boolean}));
	expectType<AsyncIterableIterator<Uint8Array>>(execaBufferPromise.iterable());
	expectType<AsyncIterableIterator<Uint8Array>>(execaBufferPromise.iterable({binary: false}));
	expectType<AsyncIterableIterator<Uint8Array>>(execaBufferPromise.iterable({binary: true}));
	expectType<AsyncIterableIterator<Uint8Array>>(execaBufferPromise.iterable({} as {binary: boolean}));
	expectType<AsyncIterableIterator<Uint8Array>>(execaHexPromise.iterable());
	expectType<AsyncIterableIterator<Uint8Array>>(execaHexPromise.iterable({binary: false}));
	expectType<AsyncIterableIterator<Uint8Array>>(execaHexPromise.iterable({binary: true}));
	expectType<AsyncIterableIterator<Uint8Array>>(execaHexPromise.iterable({} as {binary: boolean}));

	expectType<Readable>(scriptPromise.readable());
	expectType<Writable>(scriptPromise.writable());
	expectType<Duplex>(scriptPromise.duplex());

	scriptPromise.iterable({});
	scriptPromise.iterable({from: 'stdout'});
	scriptPromise.iterable({from: 'stderr'});
	scriptPromise.iterable({from: 'all'});
	scriptPromise.iterable({from: 'fd3'});
	scriptPromise.iterable({binary: false});
	scriptPromise.iterable({preserveNewlines: false});
	expectError(scriptPromise.iterable('stdout'));
	expectError(scriptPromise.iterable({from: 'stdin'}));
	expectError(scriptPromise.iterable({from: 'fd'}));
	expectError(scriptPromise.iterable({from: 'fdNotANumber'}));
	expectError(scriptPromise.iterable({binary: 'false'}));
	expectError(scriptPromise.iterable({preserveNewlines: 'false'}));
	expectError(scriptPromise.iterable({to: 'stdin'}));
	expectError(scriptPromise.iterable({other: 'stdout'}));
	scriptPromise.readable({});
	scriptPromise.readable({from: 'stdout'});
	scriptPromise.readable({from: 'stderr'});
	scriptPromise.readable({from: 'all'});
	scriptPromise.readable({from: 'fd3'});
	scriptPromise.readable({binary: false});
	scriptPromise.readable({preserveNewlines: false});
	expectError(scriptPromise.readable('stdout'));
	expectError(scriptPromise.readable({from: 'stdin'}));
	expectError(scriptPromise.readable({from: 'fd'}));
	expectError(scriptPromise.readable({from: 'fdNotANumber'}));
	expectError(scriptPromise.readable({binary: 'false'}));
	expectError(scriptPromise.readable({preserveNewlines: 'false'}));
	expectError(scriptPromise.readable({to: 'stdin'}));
	expectError(scriptPromise.readable({other: 'stdout'}));
	scriptPromise.writable({});
	scriptPromise.writable({to: 'stdin'});
	scriptPromise.writable({to: 'fd3'});
	expectError(scriptPromise.writable('stdin'));
	expectError(scriptPromise.writable({to: 'stdout'}));
	expectError(scriptPromise.writable({to: 'fd'}));
	expectError(scriptPromise.writable({to: 'fdNotANumber'}));
	expectError(scriptPromise.writable({from: 'stdout'}));
	expectError(scriptPromise.writable({binary: false}));
	expectError(scriptPromise.writable({preserveNewlines: false}));
	expectError(scriptPromise.writable({other: 'stdin'}));
	scriptPromise.duplex({});
	scriptPromise.duplex({from: 'stdout'});
	scriptPromise.duplex({from: 'stderr'});
	scriptPromise.duplex({from: 'all'});
	scriptPromise.duplex({from: 'fd3'});
	scriptPromise.duplex({from: 'stdout', to: 'stdin'});
	scriptPromise.duplex({from: 'stdout', to: 'fd3'});
	scriptPromise.duplex({binary: false});
	scriptPromise.duplex({preserveNewlines: false});
	expectError(scriptPromise.duplex('stdout'));
	expectError(scriptPromise.duplex({from: 'stdin'}));
	expectError(scriptPromise.duplex({from: 'stderr', to: 'stdout'}));
	expectError(scriptPromise.duplex({from: 'fd'}));
	expectError(scriptPromise.duplex({from: 'fdNotANumber'}));
	expectError(scriptPromise.duplex({to: 'fd'}));
	expectError(scriptPromise.duplex({to: 'fdNotANumber'}));
	expectError(scriptPromise.duplex({binary: 'false'}));
	expectError(scriptPromise.duplex({preserveNewlines: 'false'}));
	expectError(scriptPromise.duplex({other: 'stdout'}));

	expectType<Readable>(execaPromise.all);
	const noAllPromise = execa('unicorns');
	expectType<undefined>(noAllPromise.all);
	const noAllResult = await noAllPromise;
	expectType<undefined>(noAllResult.all);

	expectType<string>(unicornsResult.command);
	expectType<string>(unicornsResult.escapedCommand);
	expectType<number | undefined>(unicornsResult.exitCode);
	expectType<boolean>(unicornsResult.failed);
	expectType<boolean>(unicornsResult.timedOut);
	expectType<boolean>(unicornsResult.isCanceled);
	expectType<boolean>(unicornsResult.isTerminated);
	expectType<boolean>(unicornsResult.isMaxBuffer);
	expectType<string | undefined>(unicornsResult.signal);
	expectType<string | undefined>(unicornsResult.signalDescription);
	expectType<string>(unicornsResult.cwd);
	expectType<number>(unicornsResult.durationMs);
	expectType<ExecaResult[]>(unicornsResult.pipedFrom);

	expectType<undefined>(unicornsResult.stdio[0]);
	expectType<string>(unicornsResult.stdout);
	expectType<string>(unicornsResult.stdio[1]);
	expectType<string>(unicornsResult.stderr);
	expectType<string>(unicornsResult.stdio[2]);
	expectType<string>(unicornsResult.all);
	expectType<string | undefined>(unicornsResult.stdio[3 as number]);

	expectType<number | undefined>(execaBufferPromise.pid);

	expectType<boolean>(execa('unicorns', {ipc: true}).send({}));
	execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'ipc']}).send({});
	execa('unicorns', {stdio: ['pipe', 'pipe', 'ipc', 'pipe']}).send({});
	execa('unicorns', {ipc: true}).send('message');
	execa('unicorns', {ipc: true}).send({}, undefined, {keepOpen: true});
	expectError(execa('unicorns', {ipc: true}).send({}, true));
	expectType<undefined>(execa('unicorns', {}).send);
	expectType<undefined>(execa('unicorns', {ipc: false}).send);
	expectType<undefined>(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'pipe']}).send);

	expectType<Writable>(execaBufferPromise.stdin);
	expectType<Writable>(execaBufferPromise.stdio[0]);
	expectType<Readable>(execaBufferPromise.stdout);
	expectType<Readable>(execaBufferPromise.stdio[1]);
	expectType<Readable>(execaBufferPromise.stderr);
	expectType<Readable>(execaBufferPromise.stdio[2]);
	expectType<Readable>(execaBufferPromise.all);
	expectError(execaBufferPromise.stdio[3].destroy());
	expectType<Uint8Array>(bufferResult.stdout);
	expectType<Uint8Array>(bufferResult.stdio[1]);
	expectType<Uint8Array>(bufferResult.stderr);
	expectType<Uint8Array>(bufferResult.stdio[2]);
	expectType<Uint8Array>(bufferResult.all);

	expectType<Writable>(execaHexPromise.stdin);
	expectType<Writable>(execaHexPromise.stdio[0]);
	expectType<Readable>(execaHexPromise.stdout);
	expectType<Readable>(execaHexPromise.stdio[1]);
	expectType<Readable>(execaHexPromise.stderr);
	expectType<Readable>(execaHexPromise.stdio[2]);
	expectType<Readable>(execaHexPromise.all);
	expectError(execaHexPromise.stdio[3].destroy());
	expectType<string>(hexResult.stdout);
	expectType<string>(hexResult.stdio[1]);
	expectType<string>(hexResult.stderr);
	expectType<string>(hexResult.stdio[2]);
	expectType<string>(hexResult.all);

	const linesResult = await execa('unicorns', {lines: true, all: true});
	expectType<string[]>(linesResult.stdout);
	expectType<string[]>(linesResult.stdio[1]);
	expectType<string[]>(linesResult.stderr);
	expectType<string[]>(linesResult.stdio[2]);
	expectType<string[]>(linesResult.all);

	const linesBufferResult = await execa('unicorns', {lines: true, encoding: 'buffer', all: true});
	expectType<Uint8Array>(linesBufferResult.stdout);
	expectType<Uint8Array>(linesBufferResult.stdio[1]);
	expectType<Uint8Array>(linesBufferResult.stderr);
	expectType<Uint8Array>(linesBufferResult.stdio[2]);
	expectType<Uint8Array>(linesBufferResult.all);

	const linesHexResult = await execa('unicorns', {lines: true, encoding: 'hex', all: true});
	expectType<string>(linesHexResult.stdout);
	expectType<string>(linesHexResult.stdio[1]);
	expectType<string>(linesHexResult.stderr);
	expectType<string>(linesHexResult.stdio[2]);
	expectType<string>(linesHexResult.all);

	const noBufferPromise = execa('unicorns', {buffer: false, all: true});
	expectType<Writable>(noBufferPromise.stdin);
	expectType<Writable>(noBufferPromise.stdio[0]);
	expectType<Readable>(noBufferPromise.stdout);
	expectType<Readable>(noBufferPromise.stdio[1]);
	expectType<Readable>(noBufferPromise.stderr);
	expectType<Readable>(noBufferPromise.stdio[2]);
	expectType<Readable>(noBufferPromise.all);
	expectError(noBufferPromise.stdio[3].destroy());
	const noBufferResult = await noBufferPromise;
	expectType<undefined>(noBufferResult.stdout);
	expectType<undefined>(noBufferResult.stdio[1]);
	expectType<undefined>(noBufferResult.stderr);
	expectType<undefined>(noBufferResult.stdio[2]);
	expectType<undefined>(noBufferResult.all);

	const multipleStdinPromise = execa('unicorns', {stdin: ['inherit', 'pipe']});
	expectType<Writable>(multipleStdinPromise.stdin);

	const multipleStdoutPromise = execa('unicorns', {stdout: ['inherit', 'pipe'] as ['inherit', 'pipe'], all: true});
	expectType<Writable>(multipleStdoutPromise.stdin);
	expectType<Writable>(multipleStdoutPromise.stdio[0]);
	expectType<Readable>(multipleStdoutPromise.stdout);
	expectType<Readable>(multipleStdoutPromise.stdio[1]);
	expectType<Readable>(multipleStdoutPromise.stderr);
	expectType<Readable>(multipleStdoutPromise.stdio[2]);
	expectType<Readable>(multipleStdoutPromise.all);
	expectError(multipleStdoutPromise.stdio[3].destroy());
	const multipleStdoutResult = await multipleStdoutPromise;
	expectType<string>(multipleStdoutResult.stdout);
	expectType<string>(multipleStdoutResult.stdio[1]);
	expectType<string>(multipleStdoutResult.stderr);
	expectType<string>(multipleStdoutResult.stdio[2]);
	expectType<string>(multipleStdoutResult.all);

	const ignoreAnyPromise = execa('unicorns', {stdin: 'ignore', stdout: 'ignore', stderr: 'ignore', all: true});
	expectType<null>(ignoreAnyPromise.stdin);
	expectType<null>(ignoreAnyPromise.stdio[0]);
	expectType<null>(ignoreAnyPromise.stdout);
	expectType<null>(ignoreAnyPromise.stdio[1]);
	expectType<null>(ignoreAnyPromise.stderr);
	expectType<null>(ignoreAnyPromise.stdio[2]);
	expectType<undefined>(ignoreAnyPromise.all);
	expectError(ignoreAnyPromise.stdio[3].destroy());
	const ignoreAnyResult = await ignoreAnyPromise;
	expectType<undefined>(ignoreAnyResult.stdout);
	expectType<undefined>(ignoreAnyResult.stdio[1]);
	expectType<undefined>(ignoreAnyResult.stderr);
	expectType<undefined>(ignoreAnyResult.stdio[2]);
	expectType<undefined>(ignoreAnyResult.all);

	const ignoreAllPromise = execa('unicorns', {stdio: 'ignore', all: true});
	expectType<null>(ignoreAllPromise.stdin);
	expectType<null>(ignoreAllPromise.stdio[0]);
	expectType<null>(ignoreAllPromise.stdout);
	expectType<null>(ignoreAllPromise.stdio[1]);
	expectType<null>(ignoreAllPromise.stderr);
	expectType<null>(ignoreAllPromise.stdio[2]);
	expectType<undefined>(ignoreAllPromise.all);
	expectError(ignoreAllPromise.stdio[3].destroy());
	const ignoreAllResult = await ignoreAllPromise;
	expectType<undefined>(ignoreAllResult.stdout);
	expectType<undefined>(ignoreAllResult.stdio[1]);
	expectType<undefined>(ignoreAllResult.stderr);
	expectType<undefined>(ignoreAllResult.stdio[2]);
	expectType<undefined>(ignoreAllResult.all);

	const ignoreStdioArrayPromise = execa('unicorns', {stdio: ['ignore', 'ignore', 'pipe', 'pipe'], all: true});
	expectType<null>(ignoreStdioArrayPromise.stdin);
	expectType<null>(ignoreStdioArrayPromise.stdio[0]);
	expectType<null>(ignoreStdioArrayPromise.stdout);
	expectType<null>(ignoreStdioArrayPromise.stdio[1]);
	expectType<Readable>(ignoreStdioArrayPromise.stderr);
	expectType<Readable>(ignoreStdioArrayPromise.stdio[2]);
	expectType<Readable>(ignoreStdioArrayPromise.all);
	expectType<Readable>(ignoreStdioArrayPromise.stdio[3]);
	const ignoreStdioArrayResult = await ignoreStdioArrayPromise;
	expectType<undefined>(ignoreStdioArrayResult.stdout);
	expectType<undefined>(ignoreStdioArrayResult.stdio[1]);
	expectType<string>(ignoreStdioArrayResult.stderr);
	expectType<string>(ignoreStdioArrayResult.stdio[2]);
	expectType<string>(ignoreStdioArrayResult.all);

	const ignoreStdioArrayReadPromise = execa('unicorns', {stdio: ['ignore', 'ignore', 'pipe', new Uint8Array()], all: true});
	expectType<Writable>(ignoreStdioArrayReadPromise.stdio[3]);

	const ignoreStdinPromise = execa('unicorns', {stdin: 'ignore'});
	expectType<null>(ignoreStdinPromise.stdin);

	const ignoreStdoutPromise = execa('unicorns', {stdout: 'ignore', all: true});
	expectType<Writable>(ignoreStdoutPromise.stdin);
	expectType<Writable>(ignoreStdoutPromise.stdio[0]);
	expectType<null>(ignoreStdoutPromise.stdout);
	expectType<null>(ignoreStdoutPromise.stdio[1]);
	expectType<Readable>(ignoreStdoutPromise.stderr);
	expectType<Readable>(ignoreStdoutPromise.stdio[2]);
	expectType<Readable>(ignoreStdoutPromise.all);
	expectError(ignoreStdoutPromise.stdio[3].destroy());
	const ignoreStdoutResult = await ignoreStdoutPromise;
	expectType<undefined>(ignoreStdoutResult.stdout);
	expectType<string>(ignoreStdoutResult.stderr);
	expectType<string>(ignoreStdoutResult.all);

	const ignoreStderrPromise = execa('unicorns', {stderr: 'ignore', all: true});
	expectType<Writable>(ignoreStderrPromise.stdin);
	expectType<Writable>(ignoreStderrPromise.stdio[0]);
	expectType<Readable>(ignoreStderrPromise.stdout);
	expectType<Readable>(ignoreStderrPromise.stdio[1]);
	expectType<null>(ignoreStderrPromise.stderr);
	expectType<null>(ignoreStderrPromise.stdio[2]);
	expectType<Readable>(ignoreStderrPromise.all);
	expectError(ignoreStderrPromise.stdio[3].destroy());
	const ignoreStderrResult = await ignoreStderrPromise;
	expectType<string>(ignoreStderrResult.stdout);
	expectType<undefined>(ignoreStderrResult.stderr);
	expectType<string>(ignoreStderrResult.all);

	const ignoreStdioPromise = execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'ignore'], all: true});
	expectType<Writable>(ignoreStdioPromise.stdin);
	expectType<Writable>(ignoreStdioPromise.stdio[0]);
	expectType<Readable>(ignoreStdioPromise.stdout);
	expectType<Readable>(ignoreStdioPromise.stdio[1]);
	expectType<Readable>(ignoreStdioPromise.stderr);
	expectType<Readable>(ignoreStdioPromise.stdio[2]);
	expectType<Readable>(ignoreStdioPromise.all);
	expectType<null>(ignoreStdioPromise.stdio[3]);
	const ignoreStdioResult = await ignoreStdioPromise;
	expectType<string>(ignoreStdioResult.stdout);
	expectType<string>(ignoreStdioResult.stderr);
	expectType<string>(ignoreStdioResult.all);

	const inheritStdoutResult = await execa('unicorns', {stdout: 'inherit', all: true});
	expectType<undefined>(inheritStdoutResult.stdout);
	expectType<string>(inheritStdoutResult.stderr);
	expectType<string>(inheritStdoutResult.all);

	const inheritArrayStdoutResult = await execa('unicorns', {stdout: ['inherit'] as ['inherit'], all: true});
	expectType<undefined>(inheritArrayStdoutResult.stdout);
	expectType<string>(inheritArrayStdoutResult.stderr);
	expectType<string>(inheritArrayStdoutResult.all);

	const inheritStderrResult = await execa('unicorns', {stderr: 'inherit', all: true});
	expectType<string>(inheritStderrResult.stdout);
	expectType<undefined>(inheritStderrResult.stderr);
	expectType<string>(inheritStderrResult.all);

	const inheritArrayStderrResult = await execa('unicorns', {stderr: ['inherit'] as ['inherit'], all: true});
	expectType<string>(inheritArrayStderrResult.stdout);
	expectType<undefined>(inheritArrayStderrResult.stderr);
	expectType<string>(inheritArrayStderrResult.all);

	const ipcStdoutResult = await execa('unicorns', {stdout: 'ipc', all: true});
	expectType<undefined>(ipcStdoutResult.stdout);
	expectType<string>(ipcStdoutResult.stderr);
	expectType<string>(ipcStdoutResult.all);

	const ipcStderrResult = await execa('unicorns', {stderr: 'ipc', all: true});
	expectType<string>(ipcStderrResult.stdout);
	expectType<undefined>(ipcStderrResult.stderr);
	expectType<string>(ipcStderrResult.all);

	const numberStdoutResult = await execa('unicorns', {stdout: 1, all: true});
	expectType<undefined>(numberStdoutResult.stdout);
	expectType<string>(numberStdoutResult.stderr);
	expectType<string>(numberStdoutResult.all);

	const numberArrayStdoutResult = await execa('unicorns', {stdout: [1] as [1], all: true});
	expectType<undefined>(numberArrayStdoutResult.stdout);
	expectType<string>(numberArrayStdoutResult.stderr);
	expectType<string>(numberArrayStdoutResult.all);

	const numberStderrResult = await execa('unicorns', {stderr: 1, all: true});
	expectType<string>(numberStderrResult.stdout);
	expectType<undefined>(numberStderrResult.stderr);
	expectType<string>(numberStderrResult.all);

	const numberArrayStderrResult = await execa('unicorns', {stderr: [1] as [1], all: true});
	expectType<string>(numberArrayStderrResult.stdout);
	expectType<undefined>(numberArrayStderrResult.stderr);
	expectType<string>(numberArrayStderrResult.all);

	const streamStdoutResult = await execa('unicorns', {stdout: process.stdout, all: true});
	expectType<undefined>(streamStdoutResult.stdout);
	expectType<string>(streamStdoutResult.stderr);
	expectType<string>(streamStdoutResult.all);

	const streamArrayStdoutResult = await execa('unicorns', {stdout: [process.stdout] as [typeof process.stdout], all: true});
	expectType<undefined>(streamArrayStdoutResult.stdout);
	expectType<string>(streamArrayStdoutResult.stderr);
	expectType<string>(streamArrayStdoutResult.all);

	const streamStderrResult = await execa('unicorns', {stderr: process.stdout, all: true});
	expectType<string>(streamStderrResult.stdout);
	expectType<undefined>(streamStderrResult.stderr);
	expectType<string>(streamStderrResult.all);

	const streamArrayStderrResult = await execa('unicorns', {stderr: [process.stdout] as [typeof process.stdout], all: true});
	expectType<string>(streamArrayStderrResult.stdout);
	expectType<undefined>(streamArrayStderrResult.stderr);
	expectType<string>(streamArrayStderrResult.all);

	const undefinedStdoutResult = await execa('unicorns', {stdout: undefined, all: true});
	expectType<string>(undefinedStdoutResult.stdout);
	expectType<string>(undefinedStdoutResult.stderr);
	expectType<string>(undefinedStdoutResult.all);

	const undefinedArrayStdoutResult = await execa('unicorns', {stdout: [undefined] as const, all: true});
	expectType<string>(undefinedArrayStdoutResult.stdout);
	expectType<string>(undefinedArrayStdoutResult.stderr);
	expectType<string>(undefinedArrayStdoutResult.all);

	const undefinedStderrResult = await execa('unicorns', {stderr: undefined, all: true});
	expectType<string>(undefinedStderrResult.stdout);
	expectType<string>(undefinedStderrResult.stderr);
	expectType<string>(undefinedStderrResult.all);

	const undefinedArrayStderrResult = await execa('unicorns', {stderr: [undefined] as const, all: true});
	expectType<string>(undefinedArrayStderrResult.stdout);
	expectType<string>(undefinedArrayStderrResult.stderr);
	expectType<string>(undefinedArrayStderrResult.all);

	const fd3Result = await execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'pipe']});
	expectType<string>(fd3Result.stdio[3]);

	const inputFd3Result = await execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', ['pipe', new Readable()]]});
	expectType<undefined>(inputFd3Result.stdio[3]);

	const outputFd3Result = await execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', ['pipe', new Writable()]]});
	expectType<string>(outputFd3Result.stdio[3]);

	const bufferFd3Result = await execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'pipe'], encoding: 'buffer'});
	expectType<Uint8Array>(bufferFd3Result.stdio[3]);

	const linesFd3Result = await execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'pipe'], lines: true});
	expectType<string[]>(linesFd3Result.stdio[3]);

	const linesBufferFd3Result = await execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'pipe'], lines: true, encoding: 'buffer'});
	expectType<Uint8Array>(linesBufferFd3Result.stdio[3]);

	const noBufferFd3Result = await execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'pipe'], buffer: false});
	expectType<undefined>(noBufferFd3Result.stdio[3]);

	const ignoreFd3Result = await execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'ignore']});
	expectType<undefined>(ignoreFd3Result.stdio[3]);

	const undefinedFd3Result = await execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', undefined]});
	expectType<undefined>(undefinedFd3Result.stdio[3]);

	const undefinedArrayFd3Result = await execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [undefined] as const]});
	expectType<undefined>(undefinedArrayFd3Result.stdio[3]);

	const objectTransformLinesStdoutResult = await execa('unicorns', {lines: true, stdout: {transform: objectGenerator, final: objectFinal, objectMode: true}});
	expectType<unknown[]>(objectTransformLinesStdoutResult.stdout);
	expectType<[undefined, unknown[], string[]]>(objectTransformLinesStdoutResult.stdio);

	const objectWebTransformStdoutResult = await execa('unicorns', {stdout: webTransformObject});
	expectType<unknown[]>(objectWebTransformStdoutResult.stdout);
	expectType<[undefined, unknown[], string]>(objectWebTransformStdoutResult.stdio);

	const objectDuplexStdoutResult = await execa('unicorns', {stdout: duplexObject});
	expectType<unknown[]>(objectDuplexStdoutResult.stdout);
	expectType<[undefined, unknown[], string]>(objectDuplexStdoutResult.stdio);

	const objectDuplexPropertyStdoutResult = await execa('unicorns', {stdout: duplexObjectProperty});
	expectType<unknown[]>(objectDuplexPropertyStdoutResult.stdout);
	expectType<[undefined, unknown[], string]>(objectDuplexPropertyStdoutResult.stdio);

	const objectTransformStdoutResult = await execa('unicorns', {stdout: {transform: objectGenerator, final: objectFinal, objectMode: true}});
	expectType<unknown[]>(objectTransformStdoutResult.stdout);
	expectType<[undefined, unknown[], string]>(objectTransformStdoutResult.stdio);

	const objectWebTransformStderrResult = await execa('unicorns', {stderr: webTransformObject});
	expectType<unknown[]>(objectWebTransformStderrResult.stderr);
	expectType<[undefined, string, unknown[]]>(objectWebTransformStderrResult.stdio);

	const objectDuplexStderrResult = await execa('unicorns', {stderr: duplexObject});
	expectType<unknown[]>(objectDuplexStderrResult.stderr);
	expectType<[undefined, string, unknown[]]>(objectDuplexStderrResult.stdio);

	const objectDuplexPropertyStderrResult = await execa('unicorns', {stderr: duplexObjectProperty});
	expectType<unknown[]>(objectDuplexPropertyStderrResult.stderr);
	expectType<[undefined, string, unknown[]]>(objectDuplexPropertyStderrResult.stdio);

	const objectTransformStderrResult = await execa('unicorns', {stderr: {transform: objectGenerator, final: objectFinal, objectMode: true}});
	expectType<unknown[]>(objectTransformStderrResult.stderr);
	expectType<[undefined, string, unknown[]]>(objectTransformStderrResult.stdio);

	const objectWebTransformStdioResult = await execa('unicorns', {stdio: ['pipe', 'pipe', webTransformObject]});
	expectType<unknown[]>(objectWebTransformStdioResult.stderr);
	expectType<[undefined, string, unknown[]]>(objectWebTransformStdioResult.stdio);

	const objectDuplexStdioResult = await execa('unicorns', {stdio: ['pipe', 'pipe', duplexObject]});
	expectType<unknown[]>(objectDuplexStdioResult.stderr);
	expectType<[undefined, string, unknown[]]>(objectDuplexStdioResult.stdio);

	const objectDuplexPropertyStdioResult = await execa('unicorns', {stdio: ['pipe', 'pipe', duplexObjectProperty]});
	expectType<unknown[]>(objectDuplexPropertyStdioResult.stderr);
	expectType<[undefined, string, unknown[]]>(objectDuplexPropertyStdioResult.stdio);

	const objectTransformStdioResult = await execa('unicorns', {stdio: ['pipe', 'pipe', {transform: objectGenerator, final: objectFinal, objectMode: true}]});
	expectType<unknown[]>(objectTransformStdioResult.stderr);
	expectType<[undefined, string, unknown[]]>(objectTransformStdioResult.stdio);

	const singleObjectWebTransformStdoutResult = await execa('unicorns', {stdout: [webTransformObject]});
	expectType<unknown[]>(singleObjectWebTransformStdoutResult.stdout);
	expectType<[undefined, unknown[], string]>(singleObjectWebTransformStdoutResult.stdio);

	const singleObjectDuplexStdoutResult = await execa('unicorns', {stdout: [duplexObject]});
	expectType<unknown[]>(singleObjectDuplexStdoutResult.stdout);
	expectType<[undefined, unknown[], string]>(singleObjectDuplexStdoutResult.stdio);

	const singleObjectDuplexPropertyStdoutResult = await execa('unicorns', {stdout: [duplexObjectProperty]});
	expectType<unknown[]>(singleObjectDuplexPropertyStdoutResult.stdout);
	expectType<[undefined, unknown[], string]>(singleObjectDuplexPropertyStdoutResult.stdio);

	const singleObjectTransformStdoutResult = await execa('unicorns', {stdout: [{transform: objectGenerator, final: objectFinal, objectMode: true}]});
	expectType<unknown[]>(singleObjectTransformStdoutResult.stdout);
	expectType<[undefined, unknown[], string]>(singleObjectTransformStdoutResult.stdio);

	const manyObjectWebTransformStdoutResult = await execa('unicorns', {stdout: [webTransformObject, webTransformObject]});
	expectType<unknown[]>(manyObjectWebTransformStdoutResult.stdout);
	expectType<[undefined, unknown[], string]>(manyObjectWebTransformStdoutResult.stdio);

	const manyObjectDuplexStdoutResult = await execa('unicorns', {stdout: [duplexObject, duplexObject]});
	expectType<unknown[]>(manyObjectDuplexStdoutResult.stdout);
	expectType<[undefined, unknown[], string]>(manyObjectDuplexStdoutResult.stdio);

	const manyObjectDuplexPropertyStdoutResult = await execa('unicorns', {stdout: [duplexObjectProperty, duplexObjectProperty]});
	expectType<unknown[]>(manyObjectDuplexPropertyStdoutResult.stdout);
	expectType<[undefined, unknown[], string]>(manyObjectDuplexPropertyStdoutResult.stdio);

	const manyObjectTransformStdoutResult = await execa('unicorns', {stdout: [{transform: objectGenerator, final: objectFinal, objectMode: true}, {transform: objectGenerator, final: objectFinal, objectMode: true}]});
	expectType<unknown[]>(manyObjectTransformStdoutResult.stdout);
	expectType<[undefined, unknown[], string]>(manyObjectTransformStdoutResult.stdio);

	const falseObjectWebTransformStdoutResult = await execa('unicorns', {stdout: webTransformNotObject});
	expectType<string>(falseObjectWebTransformStdoutResult.stdout);
	expectType<[undefined, string, string]>(falseObjectWebTransformStdoutResult.stdio);

	const falseObjectDuplexStdoutResult = await execa('unicorns', {stdout: duplexNotObject});
	expectType<string>(falseObjectDuplexStdoutResult.stdout);
	expectType<[undefined, string, string]>(falseObjectDuplexStdoutResult.stdio);

	const falseObjectDuplexPropertyStdoutResult = await execa('unicorns', {stdout: duplexNotObjectProperty});
	expectType<string>(falseObjectDuplexPropertyStdoutResult.stdout);
	expectType<[undefined, string, string]>(falseObjectDuplexPropertyStdoutResult.stdio);

	const falseObjectTransformStdoutResult = await execa('unicorns', {stdout: {transform: objectGenerator, final: objectFinal, objectMode: false}});
	expectType<string>(falseObjectTransformStdoutResult.stdout);
	expectType<[undefined, string, string]>(falseObjectTransformStdoutResult.stdio);

	const falseObjectWebTransformStderrResult = await execa('unicorns', {stderr: webTransformNotObject});
	expectType<string>(falseObjectWebTransformStderrResult.stderr);
	expectType<[undefined, string, string]>(falseObjectWebTransformStderrResult.stdio);

	const falseObjectDuplexStderrResult = await execa('unicorns', {stderr: duplexNotObject});
	expectType<string>(falseObjectDuplexStderrResult.stderr);
	expectType<[undefined, string, string]>(falseObjectDuplexStderrResult.stdio);

	const falseObjectDuplexPropertyStderrResult = await execa('unicorns', {stderr: duplexNotObjectProperty});
	expectType<string>(falseObjectDuplexPropertyStderrResult.stderr);
	expectType<[undefined, string, string]>(falseObjectDuplexPropertyStderrResult.stdio);

	const falseObjectTransformStderrResult = await execa('unicorns', {stderr: {transform: objectGenerator, final: objectFinal, objectMode: false}});
	expectType<string>(falseObjectTransformStderrResult.stderr);
	expectType<[undefined, string, string]>(falseObjectTransformStderrResult.stdio);

	const falseObjectWebTransformStdioResult = await execa('unicorns', {stdio: ['pipe', 'pipe', webTransformNotObject]});
	expectType<string>(falseObjectWebTransformStdioResult.stderr);
	expectType<[undefined, string, string]>(falseObjectWebTransformStdioResult.stdio);

	const falseObjectDuplexStdioResult = await execa('unicorns', {stdio: ['pipe', 'pipe', duplexNotObject]});
	expectType<string>(falseObjectDuplexStdioResult.stderr);
	expectType<[undefined, string, string]>(falseObjectDuplexStdioResult.stdio);

	const falseObjectDuplexPropertyStdioResult = await execa('unicorns', {stdio: ['pipe', 'pipe', duplexNotObjectProperty]});
	expectType<string>(falseObjectDuplexPropertyStdioResult.stderr);
	expectType<[undefined, string, string]>(falseObjectDuplexPropertyStdioResult.stdio);

	const falseObjectTransformStdioResult = await execa('unicorns', {stdio: ['pipe', 'pipe', {transform: objectGenerator, final: objectFinal, objectMode: false}]});
	expectType<string>(falseObjectTransformStdioResult.stderr);
	expectType<[undefined, string, string]>(falseObjectTransformStdioResult.stdio);

	const topObjectWebTransformStdoutResult = await execa('unicorns', {stdout: webTransformInstance});
	expectType<string>(topObjectWebTransformStdoutResult.stdout);
	expectType<[undefined, string, string]>(topObjectWebTransformStdoutResult.stdio);

	const undefinedObjectWebTransformStdoutResult = await execa('unicorns', {stdout: webTransform});
	expectType<string>(undefinedObjectWebTransformStdoutResult.stdout);
	expectType<[undefined, string, string]>(undefinedObjectWebTransformStdoutResult.stdio);

	const undefinedObjectDuplexStdoutResult = await execa('unicorns', {stdout: duplex});
	expectType<string | unknown[]>(undefinedObjectDuplexStdoutResult.stdout);
	expectType<[undefined, string | unknown[], string]>(undefinedObjectDuplexStdoutResult.stdio);

	const undefinedObjectTransformStdoutResult = await execa('unicorns', {stdout: {transform: objectGenerator, final: objectFinal}});
	expectType<string>(undefinedObjectTransformStdoutResult.stdout);
	expectType<[undefined, string, string]>(undefinedObjectTransformStdoutResult.stdio);

	const noObjectTransformStdoutResult = await execa('unicorns', {stdout: objectGenerator, final: objectFinal});
	expectType<string>(noObjectTransformStdoutResult.stdout);
	expectType<[undefined, string, string]>(noObjectTransformStdoutResult.stdio);

	const trueTrueObjectTransformResult = await execa('unicorns', {stdout: {transform: objectGenerator, final: objectFinal, objectMode: true}, stderr: {transform: objectGenerator, final: objectFinal, objectMode: true}, all: true});
	expectType<unknown[]>(trueTrueObjectTransformResult.stdout);
	expectType<unknown[]>(trueTrueObjectTransformResult.stderr);
	expectType<unknown[]>(trueTrueObjectTransformResult.all);
	expectType<[undefined, unknown[], unknown[]]>(trueTrueObjectTransformResult.stdio);

	const trueFalseObjectTransformResult = await execa('unicorns', {stdout: {transform: objectGenerator, final: objectFinal, objectMode: true}, stderr: {transform: objectGenerator, final: objectFinal, objectMode: false}, all: true});
	expectType<unknown[]>(trueFalseObjectTransformResult.stdout);
	expectType<string>(trueFalseObjectTransformResult.stderr);
	expectType<unknown[]>(trueFalseObjectTransformResult.all);
	expectType<[undefined, unknown[], string]>(trueFalseObjectTransformResult.stdio);

	const falseTrueObjectTransformResult = await execa('unicorns', {stdout: {transform: objectGenerator, final: objectFinal, objectMode: false}, stderr: {transform: objectGenerator, final: objectFinal, objectMode: true}, all: true});
	expectType<string>(falseTrueObjectTransformResult.stdout);
	expectType<unknown[]>(falseTrueObjectTransformResult.stderr);
	expectType<unknown[]>(falseTrueObjectTransformResult.all);
	expectType<[undefined, string, unknown[]]>(falseTrueObjectTransformResult.stdio);

	const falseFalseObjectTransformResult = await execa('unicorns', {stdout: {transform: objectGenerator, final: objectFinal, objectMode: false}, stderr: {transform: objectGenerator, final: objectFinal, objectMode: false}, all: true});
	expectType<string>(falseFalseObjectTransformResult.stdout);
	expectType<string>(falseFalseObjectTransformResult.stderr);
	expectType<string>(falseFalseObjectTransformResult.all);
	expectType<[undefined, string, string]>(falseFalseObjectTransformResult.stdio);
} catch (error: unknown) {
	if (error instanceof ExecaError) {
		expectAssignable<ExecaError>(error);
		expectType<'ExecaError'>(error.name);
		expectType<string>(error.message);
		expectType<number | undefined>(error.exitCode);
		expectType<boolean>(error.failed);
		expectType<boolean>(error.timedOut);
		expectType<boolean>(error.isCanceled);
		expectType<boolean>(error.isTerminated);
		expectType<boolean>(error.isMaxBuffer);
		expectType<string | undefined>(error.signal);
		expectType<string | undefined>(error.signalDescription);
		expectType<string>(error.cwd);
		expectType<number>(error.durationMs);
		expectType<string>(error.shortMessage);
		expectType<string>(error.originalMessage);
		expectType<string | undefined>(error.code);
		expectType<unknown>(error.cause);
		expectType<ExecaResult[]>(error.pipedFrom);
	}

	const noAllError = error as ExecaError<{}>;
	expectType<undefined>(noAllError.stdio[0]);
	expectType<undefined>(noAllError.all);

	const execaStringError = error as ExecaError<{all: true}>;
	expectType<string>(execaStringError.stdout);
	expectType<string>(execaStringError.stdio[1]);
	expectType<string>(execaStringError.stderr);
	expectType<string>(execaStringError.stdio[2]);
	expectType<string>(execaStringError.all);

	const execaBufferError = error as ExecaError<{encoding: 'buffer'; all: true}>;
	expectType<Uint8Array>(execaBufferError.stdout);
	expectType<Uint8Array>(execaBufferError.stdio[1]);
	expectType<Uint8Array>(execaBufferError.stderr);
	expectType<Uint8Array>(execaBufferError.stdio[2]);
	expectType<Uint8Array>(execaBufferError.all);

	const execaLinesError = error as ExecaError<{lines: true; all: true}>;
	expectType<string[]>(execaLinesError.stdout);
	expectType<string[]>(execaLinesError.stdio[1]);
	expectType<string[]>(execaLinesError.stderr);
	expectType<string[]>(execaLinesError.stdio[2]);
	expectType<string[]>(execaLinesError.all);

	const execaLinesBufferError = error as ExecaError<{lines: true; encoding: 'buffer'; all: true}>;
	expectType<Uint8Array>(execaLinesBufferError.stdout);
	expectType<Uint8Array>(execaLinesBufferError.stdio[1]);
	expectType<Uint8Array>(execaLinesBufferError.stderr);
	expectType<Uint8Array>(execaLinesBufferError.stdio[2]);
	expectType<Uint8Array>(execaLinesBufferError.all);

	const noBufferError = error as ExecaError<{buffer: false; all: true}>;
	expectType<undefined>(noBufferError.stdout);
	expectType<undefined>(noBufferError.stdio[1]);
	expectType<undefined>(noBufferError.stderr);
	expectType<undefined>(noBufferError.stdio[2]);
	expectType<undefined>(noBufferError.all);

	const ignoreStdoutError = error as ExecaError<{stdout: 'ignore'; all: true}>;
	expectType<undefined>(ignoreStdoutError.stdout);
	expectType<undefined>(ignoreStdoutError.stdio[1]);
	expectType<string>(ignoreStdoutError.stderr);
	expectType<string>(ignoreStdoutError.stdio[2]);
	expectType<string>(ignoreStdoutError.all);

	const ignoreStderrError = error as ExecaError<{stderr: 'ignore'; all: true}>;
	expectType<string>(ignoreStderrError.stdout);
	expectType<undefined>(ignoreStderrError.stderr);
	expectType<string>(ignoreStderrError.all);

	const inheritStdoutError = error as ExecaError<{stdout: 'inherit'; all: true}>;
	expectType<undefined>(inheritStdoutError.stdout);
	expectType<string>(inheritStdoutError.stderr);
	expectType<string>(inheritStdoutError.all);

	const inheritStderrError = error as ExecaError<{stderr: 'inherit'; all: true}>;
	expectType<string>(inheritStderrError.stdout);
	expectType<undefined>(inheritStderrError.stderr);
	expectType<string>(inheritStderrError.all);

	const ipcStdoutError = error as ExecaError<{stdout: 'ipc'; all: true}>;
	expectType<undefined>(ipcStdoutError.stdout);
	expectType<string>(ipcStdoutError.stderr);
	expectType<string>(ipcStdoutError.all);

	const ipcStderrError = error as ExecaError<{stderr: 'ipc'; all: true}>;
	expectType<string>(ipcStderrError.stdout);
	expectType<undefined>(ipcStderrError.stderr);
	expectType<string>(ipcStderrError.all);

	const numberStdoutError = error as ExecaError<{stdout: 1; all: true}>;
	expectType<undefined>(numberStdoutError.stdout);
	expectType<string>(numberStdoutError.stderr);
	expectType<string>(numberStdoutError.all);

	const numberStderrError = error as ExecaError<{stderr: 1; all: true}>;
	expectType<string>(numberStderrError.stdout);
	expectType<undefined>(numberStderrError.stderr);
	expectType<string>(numberStderrError.all);

	const streamStdoutError = error as ExecaError<{stdout: typeof process.stdout; all: true}>;
	expectType<undefined>(streamStdoutError.stdout);
	expectType<string>(streamStdoutError.stderr);
	expectType<string>(streamStdoutError.all);

	const streamStderrError = error as ExecaError<{stderr: typeof process.stdout; all: true}>;
	expectType<string>(streamStderrError.stdout);
	expectType<undefined>(streamStderrError.stderr);
	expectType<string>(streamStderrError.all);

	const objectTransformStdoutError = error as ExecaError<{stdout: {transform: typeof objectGenerator; final: typeof objectFinal; objectMode: true}}>;
	expectType<unknown[]>(objectTransformStdoutError.stdout);
	expectType<[undefined, unknown[], string]>(objectTransformStdoutError.stdio);

	const objectTransformStderrError = error as ExecaError<{stderr: {transform: typeof objectGenerator; final: typeof objectFinal; objectMode: true}}>;
	expectType<unknown[]>(objectTransformStderrError.stderr);
	expectType<[undefined, string, unknown[]]>(objectTransformStderrError.stdio);

	const objectTransformStdioError = error as ExecaError<{stdio: ['pipe', 'pipe', {transform: typeof objectGenerator; final: typeof objectFinal; objectMode: true}]}>;
	expectType<unknown[]>(objectTransformStdioError.stderr);
	expectType<[undefined, string, unknown[]]>(objectTransformStdioError.stdio);

	const falseObjectTransformStdoutError = error as ExecaError<{stdout: {transform: typeof objectGenerator; final: typeof objectFinal; objectMode: false}}>;
	expectType<string>(falseObjectTransformStdoutError.stdout);
	expectType<[undefined, string, string]>(falseObjectTransformStdoutError.stdio);

	const falseObjectTransformStderrError = error as ExecaError<{stderr: {transform: typeof objectGenerator; final: typeof objectFinal; objectMode: false}}>;
	expectType<string>(falseObjectTransformStderrError.stderr);
	expectType<[undefined, string, string]>(falseObjectTransformStderrError.stdio);

	const falseObjectTransformStdioError = error as ExecaError<{stdio: ['pipe', 'pipe', {transform: typeof objectGenerator; final: typeof objectFinal; objectMode: false}]}>;
	expectType<string>(falseObjectTransformStdioError.stderr);
	expectType<[undefined, string, string]>(falseObjectTransformStdioError.stdio);
}

const rejectsResult = await execa('unicorns');
expectError(rejectsResult.stack?.toString());
expectError(rejectsResult.message?.toString());
expectError(rejectsResult.shortMessage?.toString());
expectError(rejectsResult.originalMessage?.toString());
expectError(rejectsResult.code?.toString());
expectError(rejectsResult.cause?.valueOf());

const noRejectsResult = await execa('unicorns', {reject: false});
expectType<string | undefined>(noRejectsResult.stack);
expectType<string | undefined>(noRejectsResult.message);
expectType<string | undefined>(noRejectsResult.shortMessage);
expectType<string | undefined>(noRejectsResult.originalMessage);
expectType<string | undefined>(noRejectsResult.code);
expectType<unknown>(noRejectsResult.cause);

try {
	const unicornsResult = execaSync('unicorns', {all: true});

	expectAssignable<ExecaSyncResult>(unicornsResult);
	expectType<string>(unicornsResult.command);
	expectType<string>(unicornsResult.escapedCommand);
	expectType<number | undefined>(unicornsResult.exitCode);
	expectError(unicornsResult.pipe);
	expectType<boolean>(unicornsResult.failed);
	expectType<boolean>(unicornsResult.timedOut);
	expectType<boolean>(unicornsResult.isCanceled);
	expectType<boolean>(unicornsResult.isTerminated);
	expectType<boolean>(unicornsResult.isMaxBuffer);
	expectType<string | undefined>(unicornsResult.signal);
	expectType<string | undefined>(unicornsResult.signalDescription);
	expectType<string>(unicornsResult.cwd);
	expectType<number>(unicornsResult.durationMs);
	expectType<[]>(unicornsResult.pipedFrom);

	expectType<undefined>(unicornsResult.stdio[0]);
	expectType<string>(unicornsResult.stdout);
	expectType<string>(unicornsResult.stdio[1]);
	expectType<string>(unicornsResult.stderr);
	expectType<string>(unicornsResult.stdio[2]);
	expectType<string>(unicornsResult.all);

	const bufferResult = execaSync('unicorns', {encoding: 'buffer', all: true});
	expectType<Uint8Array>(bufferResult.stdout);
	expectType<Uint8Array>(bufferResult.stdio[1]);
	expectType<Uint8Array>(bufferResult.stderr);
	expectType<Uint8Array>(bufferResult.stdio[2]);
	expectType<Uint8Array>(bufferResult.all);

	const linesResult = execaSync('unicorns', {lines: true, all: true});
	expectType<string[]>(linesResult.stdout);
	expectType<string[]>(linesResult.stderr);
	expectType<string[]>(linesResult.all);

	const linesBufferResult = execaSync('unicorns', {lines: true, encoding: 'buffer', all: true});
	expectType<Uint8Array>(linesBufferResult.stdout);
	expectType<Uint8Array>(linesBufferResult.stderr);
	expectType<Uint8Array>(linesBufferResult.all);

	const linesHexResult = execaSync('unicorns', {lines: true, encoding: 'hex', all: true});
	expectType<string>(linesHexResult.stdout);
	expectType<string>(linesHexResult.stderr);
	expectType<string>(linesHexResult.all);

	const noBufferResult = execaSync('unicorns', {buffer: false, all: true});
	expectType<undefined>(noBufferResult.stdout);
	expectType<undefined>(noBufferResult.stderr);
	expectType<undefined>(noBufferResult.all);

	const ignoreStdoutResult = execaSync('unicorns', {stdout: 'ignore', all: true});
	expectType<undefined>(ignoreStdoutResult.stdout);
	expectType<undefined>(ignoreStdoutResult.stdio[1]);
	expectType<string>(ignoreStdoutResult.stderr);
	expectType<string>(ignoreStdoutResult.stdio[2]);
	expectType<string>(ignoreStdoutResult.all);

	const ignoreStderrResult = execaSync('unicorns', {stderr: 'ignore', all: true});
	expectType<string>(ignoreStderrResult.stdout);
	expectType<undefined>(ignoreStderrResult.stderr);
	expectType<string>(ignoreStderrResult.all);

	const inheritStdoutResult = execaSync('unicorns', {stdout: 'inherit', all: true});
	expectType<undefined>(inheritStdoutResult.stdout);
	expectType<string>(inheritStdoutResult.stderr);
	expectType<string>(inheritStdoutResult.all);

	const inheritStderrResult = execaSync('unicorns', {stderr: 'inherit', all: true});
	expectType<string>(inheritStderrResult.stdout);
	expectType<undefined>(inheritStderrResult.stderr);
	expectType<string>(inheritStderrResult.all);

	const numberStdoutResult = execaSync('unicorns', {stdout: 1, all: true});
	expectType<undefined>(numberStdoutResult.stdout);
	expectType<string>(numberStdoutResult.stderr);
	expectType<string>(numberStdoutResult.all);

	const numberStderrResult = execaSync('unicorns', {stderr: 1, all: true});
	expectType<string>(numberStderrResult.stdout);
	expectType<undefined>(numberStderrResult.stderr);
	expectType<string>(numberStderrResult.all);
} catch (error: unknown) {
	if (error instanceof ExecaSyncError) {
		expectAssignable<ExecaSyncError>(error);
		expectType<'ExecaSyncError'>(error.name);
		expectType<string>(error.message);
		expectType<number | undefined>(error.exitCode);
		expectType<boolean>(error.failed);
		expectType<boolean>(error.timedOut);
		expectType<boolean>(error.isCanceled);
		expectType<boolean>(error.isTerminated);
		expectType<boolean>(error.isMaxBuffer);
		expectType<string | undefined>(error.signal);
		expectType<string | undefined>(error.signalDescription);
		expectType<string>(error.cwd);
		expectType<number>(error.durationMs);
		expectType<string>(error.shortMessage);
		expectType<string>(error.originalMessage);
		expectType<string | undefined>(error.code);
		expectType<unknown>(error.cause);
		expectType<[]>(error.pipedFrom);
	}

	const execaStringError = error as ExecaSyncError<{all: true}>;
	expectType<undefined>(execaStringError.stdio[0]);
	expectType<string>(execaStringError.stdout);
	expectType<string>(execaStringError.stdio[1]);
	expectType<string>(execaStringError.stderr);
	expectType<string>(execaStringError.stdio[2]);
	expectType<string>(execaStringError.all);

	const execaBufferError = error as ExecaSyncError<{encoding: 'buffer'; all: true}>;
	expectType<Uint8Array>(execaBufferError.stdout);
	expectType<Uint8Array>(execaBufferError.stdio[1]);
	expectType<Uint8Array>(execaBufferError.stderr);
	expectType<Uint8Array>(execaBufferError.stdio[2]);
	expectType<Uint8Array>(execaBufferError.all);

	const execaLinesError = error as ExecaSyncError<{lines: true; all: true}>;
	expectType<string[]>(execaLinesError.stdout);
	expectType<string[]>(execaLinesError.stderr);
	expectType<string[]>(execaLinesError.all);

	const execaLinesBufferError = error as ExecaSyncError<{lines: true; encoding: 'buffer'; all: true}>;
	expectType<Uint8Array>(execaLinesBufferError.stdout);
	expectType<Uint8Array>(execaLinesBufferError.stderr);
	expectType<Uint8Array>(execaLinesBufferError.all);

	const noBufferError = error as ExecaSyncError<{buffer: false; all: true}>;
	expectType<undefined>(noBufferError.stdout);
	expectType<undefined>(noBufferError.stderr);
	expectType<undefined>(noBufferError.all);

	const ignoreStdoutError = error as ExecaSyncError<{stdout: 'ignore'; all: true}>;
	expectType<undefined>(ignoreStdoutError.stdout);
	expectType<undefined>(ignoreStdoutError.stdio[1]);
	expectType<string>(ignoreStdoutError.stderr);
	expectType<string>(ignoreStdoutError.stdio[2]);
	expectType<string>(ignoreStdoutError.all);

	const ignoreStderrError = error as ExecaSyncError<{stderr: 'ignore'; all: true}>;
	expectType<string>(ignoreStderrError.stdout);
	expectType<undefined>(ignoreStderrError.stderr);
	expectType<string>(ignoreStderrError.all);

	const inheritStdoutError = error as ExecaSyncError<{stdout: 'inherit'; all: true}>;
	expectType<undefined>(inheritStdoutError.stdout);
	expectType<string>(inheritStdoutError.stderr);
	expectType<string>(inheritStdoutError.all);

	const inheritStderrError = error as ExecaSyncError<{stderr: 'inherit'; all: true}>;
	expectType<string>(inheritStderrError.stdout);
	expectType<undefined>(inheritStderrError.stderr);
	expectType<string>(inheritStderrError.all);

	const numberStdoutError = error as ExecaSyncError<{stdout: 1; all: true}>;
	expectType<undefined>(numberStdoutError.stdout);
	expectType<string>(numberStdoutError.stderr);
	expectType<string>(numberStdoutError.all);

	const numberStderrError = error as ExecaSyncError<{stderr: 1; all: true}>;
	expectType<string>(numberStderrError.stdout);
	expectType<undefined>(numberStderrError.stderr);
	expectType<string>(numberStderrError.all);
}

const rejectsSyncResult = execaSync('unicorns');
expectError(rejectsSyncResult.stack?.toString());
expectError(rejectsSyncResult.message?.toString());
expectError(rejectsSyncResult.shortMessage?.toString());
expectError(rejectsSyncResult.originalMessage?.toString());
expectError(rejectsSyncResult.code?.toString());
expectError(rejectsSyncResult.cause?.valueOf());

const noRejectsSyncResult = execaSync('unicorns', {reject: false});
expectType<string | undefined>(noRejectsSyncResult.stack);
expectType<string | undefined>(noRejectsSyncResult.message);
expectType<string | undefined>(noRejectsSyncResult.shortMessage);
expectType<string | undefined>(noRejectsSyncResult.originalMessage);

expectAssignable<Options>({cleanup: false});
expectNotAssignable<SyncOptions>({cleanup: false});
expectAssignable<SyncOptions>({preferLocal: false});

/* eslint-disable @typescript-eslint/no-floating-promises */
execa('unicorns', {preferLocal: false});
execaSync('unicorns', {preferLocal: false});
expectError(execa('unicorns', {preferLocal: 'false'}));
expectError(execaSync('unicorns', {preferLocal: 'false'}));
execa('unicorns', {localDir: '.'});
execaSync('unicorns', {localDir: '.'});
execa('unicorns', {localDir: fileUrl});
execaSync('unicorns', {localDir: fileUrl});
expectError(execa('unicorns', {localDir: false}));
expectError(execaSync('unicorns', {localDir: false}));
execa('unicorns', {node: true});
execaSync('unicorns', {node: true});
expectError(execa('unicorns', {node: 'true'}));
expectError(execaSync('unicorns', {node: 'true'}));
execa('unicorns', {nodePath: './node'});
execaSync('unicorns', {nodePath: './node'});
execa('unicorns', {nodePath: fileUrl});
execaSync('unicorns', {nodePath: fileUrl});
expectError(execa('unicorns', {nodePath: false}));
expectError(execaSync('unicorns', {nodePath: false}));
execa('unicorns', {nodeOptions: ['--async-stack-traces'] as const});
execaSync('unicorns', {nodeOptions: ['--async-stack-traces'] as const});
expectError(execa('unicorns', {nodeOptions: [false] as const}));
expectError(execaSync('unicorns', {nodeOptions: [false] as const}));
execa('unicorns', {input: ''});
execaSync('unicorns', {input: ''});
execa('unicorns', {input: new Uint8Array()});
execaSync('unicorns', {input: new Uint8Array()});
execa('unicorns', {input: process.stdin});
execaSync('unicorns', {input: process.stdin});
expectError(execa('unicorns', {input: false}));
expectError(execaSync('unicorns', {input: false}));
execa('unicorns', {inputFile: ''});
execaSync('unicorns', {inputFile: ''});
execa('unicorns', {inputFile: fileUrl});
execaSync('unicorns', {inputFile: fileUrl});
expectError(execa('unicorns', {inputFile: false}));
expectError(execaSync('unicorns', {inputFile: false}));
execa('unicorns', {lines: false});
execaSync('unicorns', {lines: false});
expectError(execa('unicorns', {lines: 'false'}));
expectError(execaSync('unicorns', {lines: 'false'}));
execa('unicorns', {reject: false});
execaSync('unicorns', {reject: false});
expectError(execa('unicorns', {reject: 'false'}));
expectError(execaSync('unicorns', {reject: 'false'}));
execa('unicorns', {stripFinalNewline: false});
execaSync('unicorns', {stripFinalNewline: false});
expectError(execa('unicorns', {stripFinalNewline: 'false'}));
expectError(execaSync('unicorns', {stripFinalNewline: 'false'}));
execa('unicorns', {extendEnv: false});
execaSync('unicorns', {extendEnv: false});
expectError(execa('unicorns', {extendEnv: 'false'}));
expectError(execaSync('unicorns', {extendEnv: 'false'}));
execa('unicorns', {cwd: '.'});
execaSync('unicorns', {cwd: '.'});
execa('unicorns', {cwd: fileUrl});
execaSync('unicorns', {cwd: fileUrl});
expectError(execa('unicorns', {cwd: false}));
expectError(execaSync('unicorns', {cwd: false}));
// eslint-disable-next-line @typescript-eslint/naming-convention
execa('unicorns', {env: {PATH: ''}});
// eslint-disable-next-line @typescript-eslint/naming-convention
execaSync('unicorns', {env: {PATH: ''}});
expectError(execa('unicorns', {env: false}));
expectError(execaSync('unicorns', {env: false}));
execa('unicorns', {argv0: ''});
execaSync('unicorns', {argv0: ''});
expectError(execa('unicorns', {argv0: false}));
expectError(execaSync('unicorns', {argv0: false}));
execa('unicorns', {uid: 0});
execaSync('unicorns', {uid: 0});
expectError(execa('unicorns', {uid: '0'}));
expectError(execaSync('unicorns', {uid: '0'}));
execa('unicorns', {gid: 0});
execaSync('unicorns', {gid: 0});
expectError(execa('unicorns', {gid: '0'}));
expectError(execaSync('unicorns', {gid: '0'}));
execa('unicorns', {shell: true});
execaSync('unicorns', {shell: true});
execa('unicorns', {shell: '/bin/sh'});
execaSync('unicorns', {shell: '/bin/sh'});
execa('unicorns', {shell: fileUrl});
execaSync('unicorns', {shell: fileUrl});
expectError(execa('unicorns', {shell: {}}));
expectError(execaSync('unicorns', {shell: {}}));
execa('unicorns', {timeout: 1000});
execaSync('unicorns', {timeout: 1000});
expectError(execa('unicorns', {timeout: '1000'}));
expectError(execaSync('unicorns', {timeout: '1000'}));
execa('unicorns', {maxBuffer: 1000});
execaSync('unicorns', {maxBuffer: 1000});
expectError(execa('unicorns', {maxBuffer: '1000'}));
expectError(execaSync('unicorns', {maxBuffer: '1000'}));
execa('unicorns', {killSignal: 'SIGTERM'});
execaSync('unicorns', {killSignal: 'SIGTERM'});
execa('unicorns', {killSignal: 9});
execaSync('unicorns', {killSignal: 9});
expectError(execa('unicorns', {killSignal: false}));
expectError(execaSync('unicorns', {killSignal: false}));
execa('unicorns', {forceKillAfterDelay: false});
expectError(execaSync('unicorns', {forceKillAfterDelay: false}));
execa('unicorns', {forceKillAfterDelay: 42});
expectError(execaSync('unicorns', {forceKillAfterDelay: 42}));
expectError(execa('unicorns', {forceKillAfterDelay: 'true'}));
expectError(execaSync('unicorns', {forceKillAfterDelay: 'true'}));
execa('unicorns', {windowsVerbatimArguments: true});
execaSync('unicorns', {windowsVerbatimArguments: true});
expectError(execa('unicorns', {windowsVerbatimArguments: 'true'}));
expectError(execaSync('unicorns', {windowsVerbatimArguments: 'true'}));
execa('unicorns', {windowsHide: false});
execaSync('unicorns', {windowsHide: false});
expectError(execa('unicorns', {windowsHide: 'false'}));
expectError(execaSync('unicorns', {windowsHide: 'false'}));
execa('unicorns', {verbose: 'none'});
execaSync('unicorns', {verbose: 'none'});
execa('unicorns', {verbose: 'short'});
execaSync('unicorns', {verbose: 'short'});
execa('unicorns', {verbose: 'full'});
execaSync('unicorns', {verbose: 'full'});
expectError(execa('unicorns', {verbose: 'other'}));
expectError(execaSync('unicorns', {verbose: 'other'}));
execa('unicorns', {cleanup: false});
expectError(execaSync('unicorns', {cleanup: false}));
expectError(execa('unicorns', {cleanup: 'false'}));
expectError(execaSync('unicorns', {cleanup: 'false'}));
execa('unicorns', {buffer: false});
execaSync('unicorns', {buffer: false});
expectError(execa('unicorns', {buffer: 'false'}));
expectError(execaSync('unicorns', {buffer: 'false'}));
execa('unicorns', {all: true});
execaSync('unicorns', {all: true});
expectError(execa('unicorns', {all: 'true'}));
expectError(execaSync('unicorns', {all: 'true'}));
execa('unicorns', {ipc: true});
expectError(execaSync('unicorns', {ipc: true}));
expectError(execa('unicorns', {ipc: 'true'}));
expectError(execaSync('unicorns', {ipc: 'true'}));
execa('unicorns', {serialization: 'json'});
expectError(execaSync('unicorns', {serialization: 'json'}));
execa('unicorns', {serialization: 'advanced'});
expectError(execaSync('unicorns', {serialization: 'advanced'}));
expectError(execa('unicorns', {serialization: 'other'}));
expectError(execaSync('unicorns', {serialization: 'other'}));
execa('unicorns', {detached: true});
expectError(execaSync('unicorns', {detached: true}));
expectError(execa('unicorns', {detached: 'true'}));
expectError(execaSync('unicorns', {detached: 'true'}));
execa('unicorns', {cancelSignal: new AbortController().signal});
expectError(execaSync('unicorns', {cancelSignal: new AbortController().signal}));
expectError(execa('unicorns', {cancelSignal: false}));
expectError(execaSync('unicorns', {cancelSignal: false}));

execa('unicorns', {encoding: 'utf8'});
execaSync('unicorns', {encoding: 'utf8'});
/* eslint-disable unicorn/text-encoding-identifier-case */
expectError(execa('unicorns', {encoding: 'utf-8'}));
expectError(execaSync('unicorns', {encoding: 'utf-8'}));
expectError(execa('unicorns', {encoding: 'UTF8'}));
expectError(execaSync('unicorns', {encoding: 'UTF8'}));
/* eslint-enable unicorn/text-encoding-identifier-case */
execa('unicorns', {encoding: 'utf16le'});
execaSync('unicorns', {encoding: 'utf16le'});
expectError(execa('unicorns', {encoding: 'utf-16le'}));
expectError(execaSync('unicorns', {encoding: 'utf-16le'}));
expectError(execa('unicorns', {encoding: 'ucs2'}));
expectError(execaSync('unicorns', {encoding: 'ucs2'}));
expectError(execa('unicorns', {encoding: 'ucs-2'}));
expectError(execaSync('unicorns', {encoding: 'ucs-2'}));
execa('unicorns', {encoding: 'buffer'});
execaSync('unicorns', {encoding: 'buffer'});
expectError(execa('unicorns', {encoding: null}));
expectError(execaSync('unicorns', {encoding: null}));
execa('unicorns', {encoding: 'hex'});
execaSync('unicorns', {encoding: 'hex'});
execa('unicorns', {encoding: 'base64'});
execaSync('unicorns', {encoding: 'base64'});
execa('unicorns', {encoding: 'base64url'});
execaSync('unicorns', {encoding: 'base64url'});
execa('unicorns', {encoding: 'latin1'});
execaSync('unicorns', {encoding: 'latin1'});
expectError(execa('unicorns', {encoding: 'binary'}));
expectError(execaSync('unicorns', {encoding: 'binary'}));
execa('unicorns', {encoding: 'ascii'});
execaSync('unicorns', {encoding: 'ascii'});
expectError(execa('unicorns', {encoding: 'unknownEncoding'}));
expectError(execaSync('unicorns', {encoding: 'unknownEncoding'}));

execa('unicorns', {maxBuffer: {}});
expectError(execa('unicorns', {maxBuffer: []}));
execa('unicorns', {maxBuffer: {stdout: 0}});
execa('unicorns', {maxBuffer: {stderr: 0}});
execa('unicorns', {maxBuffer: {stdout: 0, stderr: 0} as const});
execa('unicorns', {maxBuffer: {all: 0}});
execa('unicorns', {maxBuffer: {fd1: 0}});
execa('unicorns', {maxBuffer: {fd2: 0}});
execa('unicorns', {maxBuffer: {fd3: 0}});
expectError(execa('unicorns', {maxBuffer: {stdout: '0'}}));
execaSync('unicorns', {maxBuffer: {}});
expectError(execaSync('unicorns', {maxBuffer: []}));
execaSync('unicorns', {maxBuffer: {stdout: 0}});
execaSync('unicorns', {maxBuffer: {stderr: 0}});
execaSync('unicorns', {maxBuffer: {stdout: 0, stderr: 0} as const});
execaSync('unicorns', {maxBuffer: {all: 0}});
execaSync('unicorns', {maxBuffer: {fd1: 0}});
execaSync('unicorns', {maxBuffer: {fd2: 0}});
execaSync('unicorns', {maxBuffer: {fd3: 0}});
expectError(execaSync('unicorns', {maxBuffer: {stdout: '0'}}));
execa('unicorns', {verbose: {}});
expectError(execa('unicorns', {verbose: []}));
execa('unicorns', {verbose: {stdout: 'none'}});
execa('unicorns', {verbose: {stderr: 'none'}});
execa('unicorns', {verbose: {stdout: 'none', stderr: 'none'} as const});
execa('unicorns', {verbose: {all: 'none'}});
execa('unicorns', {verbose: {fd1: 'none'}});
execa('unicorns', {verbose: {fd2: 'none'}});
execa('unicorns', {verbose: {fd3: 'none'}});
expectError(execa('unicorns', {verbose: {stdout: 'other'}}));
execaSync('unicorns', {verbose: {}});
expectError(execaSync('unicorns', {verbose: []}));
execaSync('unicorns', {verbose: {stdout: 'none'}});
execaSync('unicorns', {verbose: {stderr: 'none'}});
execaSync('unicorns', {verbose: {stdout: 'none', stderr: 'none'} as const});
execaSync('unicorns', {verbose: {all: 'none'}});
execaSync('unicorns', {verbose: {fd1: 'none'}});
execaSync('unicorns', {verbose: {fd2: 'none'}});
execaSync('unicorns', {verbose: {fd3: 'none'}});
expectError(execaSync('unicorns', {verbose: {stdout: 'other'}}));
execa('unicorns', {stripFinalNewline: {}});
expectError(execa('unicorns', {stripFinalNewline: []}));
execa('unicorns', {stripFinalNewline: {stdout: true}});
execa('unicorns', {stripFinalNewline: {stderr: true}});
execa('unicorns', {stripFinalNewline: {stdout: true, stderr: true} as const});
execa('unicorns', {stripFinalNewline: {all: true}});
execa('unicorns', {stripFinalNewline: {fd1: true}});
execa('unicorns', {stripFinalNewline: {fd2: true}});
execa('unicorns', {stripFinalNewline: {fd3: true}});
expectError(execa('unicorns', {stripFinalNewline: {stdout: 'true'}}));
execaSync('unicorns', {stripFinalNewline: {}});
expectError(execaSync('unicorns', {stripFinalNewline: []}));
execaSync('unicorns', {stripFinalNewline: {stdout: true}});
execaSync('unicorns', {stripFinalNewline: {stderr: true}});
execaSync('unicorns', {stripFinalNewline: {stdout: true, stderr: true} as const});
execaSync('unicorns', {stripFinalNewline: {all: true}});
execaSync('unicorns', {stripFinalNewline: {fd1: true}});
execaSync('unicorns', {stripFinalNewline: {fd2: true}});
execaSync('unicorns', {stripFinalNewline: {fd3: true}});
expectError(execaSync('unicorns', {stripFinalNewline: {stdout: 'true'}}));
execa('unicorns', {lines: {}});
expectError(execa('unicorns', {lines: []}));
execa('unicorns', {lines: {stdout: true}});
execa('unicorns', {lines: {stderr: true}});
execa('unicorns', {lines: {stdout: true, stderr: true} as const});
execa('unicorns', {lines: {all: true}});
execa('unicorns', {lines: {fd1: true}});
execa('unicorns', {lines: {fd2: true}});
execa('unicorns', {lines: {fd3: true}});
expectError(execa('unicorns', {lines: {stdout: 'true'}}));
execaSync('unicorns', {lines: {}});
expectError(execaSync('unicorns', {lines: []}));
execaSync('unicorns', {lines: {stdout: true}});
execaSync('unicorns', {lines: {stderr: true}});
execaSync('unicorns', {lines: {stdout: true, stderr: true} as const});
execaSync('unicorns', {lines: {all: true}});
execaSync('unicorns', {lines: {fd1: true}});
execaSync('unicorns', {lines: {fd2: true}});
execaSync('unicorns', {lines: {fd3: true}});
expectError(execaSync('unicorns', {lines: {stdout: 'true'}}));
execa('unicorns', {buffer: {}});
expectError(execa('unicorns', {buffer: []}));
execa('unicorns', {buffer: {stdout: true}});
execa('unicorns', {buffer: {stderr: true}});
execa('unicorns', {buffer: {stdout: true, stderr: true} as const});
execa('unicorns', {buffer: {all: true}});
execa('unicorns', {buffer: {fd1: true}});
execa('unicorns', {buffer: {fd2: true}});
execa('unicorns', {buffer: {fd3: true}});
expectError(execa('unicorns', {buffer: {stdout: 'true'}}));
execaSync('unicorns', {buffer: {}});
expectError(execaSync('unicorns', {buffer: []}));
execaSync('unicorns', {buffer: {stdout: true}});
execaSync('unicorns', {buffer: {stderr: true}});
execaSync('unicorns', {buffer: {stdout: true, stderr: true} as const});
execaSync('unicorns', {buffer: {all: true}});
execaSync('unicorns', {buffer: {fd1: true}});
execaSync('unicorns', {buffer: {fd2: true}});
execaSync('unicorns', {buffer: {fd3: true}});
expectError(execaSync('unicorns', {buffer: {stdout: 'true'}}));

const linesStdoutResult = await execa('unicorns', {all: true, lines: {stdout: true}});
expectType<string[]>(linesStdoutResult.stdout);
expectType<string[]>(linesStdoutResult.stdio[1]);
expectType<string>(linesStdoutResult.stderr);
expectType<string>(linesStdoutResult.stdio[2]);
expectType<string[]>(linesStdoutResult.all);

const linesStderrResult = await execa('unicorns', {all: true, lines: {stderr: true}});
expectType<string>(linesStderrResult.stdout);
expectType<string>(linesStderrResult.stdio[1]);
expectType<string[]>(linesStderrResult.stderr);
expectType<string[]>(linesStderrResult.stdio[2]);
expectType<string[]>(linesStderrResult.all);

const linesFd1Result = await execa('unicorns', {all: true, lines: {fd1: true}});
expectType<string[]>(linesFd1Result.stdout);
expectType<string[]>(linesFd1Result.stdio[1]);
expectType<string>(linesFd1Result.stderr);
expectType<string>(linesFd1Result.stdio[2]);
expectType<string[]>(linesFd1Result.all);

const linesFd2Result = await execa('unicorns', {all: true, lines: {fd2: true}});
expectType<string>(linesFd2Result.stdout);
expectType<string>(linesFd2Result.stdio[1]);
expectType<string[]>(linesFd2Result.stderr);
expectType<string[]>(linesFd2Result.stdio[2]);
expectType<string[]>(linesFd2Result.all);

const linesAllResult = await execa('unicorns', {all: true, lines: {all: true}});
expectType<string[]>(linesAllResult.stdout);
expectType<string[]>(linesAllResult.stdio[1]);
expectType<string[]>(linesAllResult.stderr);
expectType<string[]>(linesAllResult.stdio[2]);
expectType<string[]>(linesAllResult.all);

const linesFd3Result = await execa('unicorns', {all: true, lines: {fd3: true}, stdio: ['pipe', 'pipe', 'pipe', 'pipe', 'pipe']});
expectType<string>(linesFd3Result.stdout);
expectType<string>(linesFd3Result.stdio[1]);
expectType<string>(linesFd3Result.stderr);
expectType<string>(linesFd3Result.stdio[2]);
expectType<string>(linesFd3Result.all);
expectType<string[]>(linesFd3Result.stdio[3]);
expectType<string>(linesFd3Result.stdio[4]);

const linesStdoutResultSync = execaSync('unicorns', {all: true, lines: {stdout: true}});
expectType<string[]>(linesStdoutResultSync.stdout);
expectType<string[]>(linesStdoutResultSync.stdio[1]);
expectType<string>(linesStdoutResultSync.stderr);
expectType<string>(linesStdoutResultSync.stdio[2]);
expectType<string[]>(linesStdoutResultSync.all);

const linesStderrResultSync = execaSync('unicorns', {all: true, lines: {stderr: true}});
expectType<string>(linesStderrResultSync.stdout);
expectType<string>(linesStderrResultSync.stdio[1]);
expectType<string[]>(linesStderrResultSync.stderr);
expectType<string[]>(linesStderrResultSync.stdio[2]);
expectType<string[]>(linesStderrResultSync.all);

const linesFd1ResultSync = execaSync('unicorns', {all: true, lines: {fd1: true}});
expectType<string[]>(linesFd1ResultSync.stdout);
expectType<string[]>(linesFd1ResultSync.stdio[1]);
expectType<string>(linesFd1ResultSync.stderr);
expectType<string>(linesFd1ResultSync.stdio[2]);
expectType<string[]>(linesFd1ResultSync.all);

const linesFd2ResultSync = execaSync('unicorns', {all: true, lines: {fd2: true}});
expectType<string>(linesFd2ResultSync.stdout);
expectType<string>(linesFd2ResultSync.stdio[1]);
expectType<string[]>(linesFd2ResultSync.stderr);
expectType<string[]>(linesFd2ResultSync.stdio[2]);
expectType<string[]>(linesFd2ResultSync.all);

const linesAllResultSync = execaSync('unicorns', {all: true, lines: {all: true}});
expectType<string[]>(linesAllResultSync.stdout);
expectType<string[]>(linesAllResultSync.stdio[1]);
expectType<string[]>(linesAllResultSync.stderr);
expectType<string[]>(linesAllResultSync.stdio[2]);
expectType<string[]>(linesAllResultSync.all);

const linesFd3ResultSync = execaSync('unicorns', {all: true, lines: {fd3: true}, stdio: ['pipe', 'pipe', 'pipe', 'pipe', 'pipe']});
expectType<string>(linesFd3ResultSync.stdout);
expectType<string>(linesFd3ResultSync.stdio[1]);
expectType<string>(linesFd3ResultSync.stderr);
expectType<string>(linesFd3ResultSync.stdio[2]);
expectType<string>(linesFd3ResultSync.all);
expectType<string[]>(linesFd3ResultSync.stdio[3]);
expectType<string>(linesFd3ResultSync.stdio[4]);

const noBufferStdoutResult = await execa('unicorns', {all: true, buffer: {stdout: false}});
expectType<undefined>(noBufferStdoutResult.stdout);
expectType<undefined>(noBufferStdoutResult.stdio[1]);
expectType<string>(noBufferStdoutResult.stderr);
expectType<string>(noBufferStdoutResult.stdio[2]);
expectType<string>(noBufferStdoutResult.all);

const noBufferStderrResult = await execa('unicorns', {all: true, buffer: {stderr: false}});
expectType<string>(noBufferStderrResult.stdout);
expectType<string>(noBufferStderrResult.stdio[1]);
expectType<undefined>(noBufferStderrResult.stderr);
expectType<undefined>(noBufferStderrResult.stdio[2]);
expectType<string>(noBufferStderrResult.all);

const noBufferFd1Result = await execa('unicorns', {all: true, buffer: {fd1: false}});
expectType<undefined>(noBufferFd1Result.stdout);
expectType<undefined>(noBufferFd1Result.stdio[1]);
expectType<string>(noBufferFd1Result.stderr);
expectType<string>(noBufferFd1Result.stdio[2]);
expectType<string>(noBufferFd1Result.all);

const noBufferFd2Result = await execa('unicorns', {all: true, buffer: {fd2: false}});
expectType<string>(noBufferFd2Result.stdout);
expectType<string>(noBufferFd2Result.stdio[1]);
expectType<undefined>(noBufferFd2Result.stderr);
expectType<undefined>(noBufferFd2Result.stdio[2]);
expectType<string>(noBufferFd2Result.all);

const noBufferAllResult = await execa('unicorns', {all: true, buffer: {all: false}});
expectType<undefined>(noBufferAllResult.stdout);
expectType<undefined>(noBufferAllResult.stdio[1]);
expectType<undefined>(noBufferAllResult.stderr);
expectType<undefined>(noBufferAllResult.stdio[2]);
expectType<undefined>(noBufferAllResult.all);

const noBufferFd3Result = await execa('unicorns', {all: true, buffer: {fd3: false}, stdio: ['pipe', 'pipe', 'pipe', 'pipe', 'pipe']});
expectType<string>(noBufferFd3Result.stdout);
expectType<string>(noBufferFd3Result.stdio[1]);
expectType<string>(noBufferFd3Result.stderr);
expectType<string>(noBufferFd3Result.stdio[2]);
expectType<string>(noBufferFd3Result.all);
expectType<undefined>(noBufferFd3Result.stdio[3]);
expectType<string>(noBufferFd3Result.stdio[4]);

const noBufferStdoutResultSync = execaSync('unicorns', {all: true, buffer: {stdout: false}});
expectType<undefined>(noBufferStdoutResultSync.stdout);
expectType<undefined>(noBufferStdoutResultSync.stdio[1]);
expectType<string>(noBufferStdoutResultSync.stderr);
expectType<string>(noBufferStdoutResultSync.stdio[2]);
expectType<string>(noBufferStdoutResultSync.all);

const noBufferStderrResultSync = execaSync('unicorns', {all: true, buffer: {stderr: false}});
expectType<string>(noBufferStderrResultSync.stdout);
expectType<string>(noBufferStderrResultSync.stdio[1]);
expectType<undefined>(noBufferStderrResultSync.stderr);
expectType<undefined>(noBufferStderrResultSync.stdio[2]);
expectType<string>(noBufferStderrResultSync.all);

const noBufferFd1ResultSync = execaSync('unicorns', {all: true, buffer: {fd1: false}});
expectType<undefined>(noBufferFd1ResultSync.stdout);
expectType<undefined>(noBufferFd1ResultSync.stdio[1]);
expectType<string>(noBufferFd1ResultSync.stderr);
expectType<string>(noBufferFd1ResultSync.stdio[2]);
expectType<string>(noBufferFd1ResultSync.all);

const noBufferFd2ResultSync = execaSync('unicorns', {all: true, buffer: {fd2: false}});
expectType<string>(noBufferFd2ResultSync.stdout);
expectType<string>(noBufferFd2ResultSync.stdio[1]);
expectType<undefined>(noBufferFd2ResultSync.stderr);
expectType<undefined>(noBufferFd2ResultSync.stdio[2]);
expectType<string>(noBufferFd2ResultSync.all);

const noBufferAllResultSync = execaSync('unicorns', {all: true, buffer: {all: false}});
expectType<undefined>(noBufferAllResultSync.stdout);
expectType<undefined>(noBufferAllResultSync.stdio[1]);
expectType<undefined>(noBufferAllResultSync.stderr);
expectType<undefined>(noBufferAllResultSync.stdio[2]);
expectType<undefined>(noBufferAllResultSync.all);

const noBufferFd3ResultSync = execaSync('unicorns', {all: true, buffer: {fd3: false}, stdio: ['pipe', 'pipe', 'pipe', 'pipe', 'pipe']});
expectType<string>(noBufferFd3ResultSync.stdout);
expectType<string>(noBufferFd3ResultSync.stdio[1]);
expectType<string>(noBufferFd3ResultSync.stderr);
expectType<string>(noBufferFd3ResultSync.stdio[2]);
expectType<string>(noBufferFd3ResultSync.all);
expectType<undefined>(noBufferFd3ResultSync.stdio[3]);
expectType<string>(noBufferFd3ResultSync.stdio[4]);

expectError(execa('unicorns', {stdio: []}));
expectError(execaSync('unicorns', {stdio: []}));
expectError(execa('unicorns', {stdio: ['pipe']}));
expectError(execaSync('unicorns', {stdio: ['pipe']}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe']}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe']}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe']});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'pipe']});
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'unknown']}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'pipe', 'pipe', 'unknown']}));
execa('unicorns', {stdio: [new Readable(), 'pipe', 'pipe']});
execaSync('unicorns', {stdio: [new Readable(), 'pipe', 'pipe']});
execa('unicorns', {stdio: [[new Readable()], ['pipe'], ['pipe']]});
expectError(execaSync('unicorns', {stdio: [[new Readable()], ['pipe'], ['pipe']]}));
execa('unicorns', {stdio: ['pipe', new Writable(), 'pipe']});
execaSync('unicorns', {stdio: ['pipe', new Writable(), 'pipe']});
execa('unicorns', {stdio: [['pipe'], [new Writable()], ['pipe']]});
expectError(execaSync('unicorns', {stdio: [['pipe'], [new Writable()], ['pipe']]}));
execa('unicorns', {stdio: ['pipe', 'pipe', new Writable()]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', new Writable()]});
execa('unicorns', {stdio: [['pipe'], ['pipe'], [new Writable()]]});
expectError(execaSync('unicorns', {stdio: [['pipe'], ['pipe'], [new Writable()]]}));
expectError(execa('unicorns', {stdio: [new Writable(), 'pipe', 'pipe']}));
expectError(execaSync('unicorns', {stdio: [new Writable(), 'pipe', 'pipe']}));
expectError(execa('unicorns', {stdio: [[new Writable()], ['pipe'], ['pipe']]}));
expectError(execaSync('unicorns', {stdio: [[new Writable()], ['pipe'], ['pipe']]}));
expectError(execa('unicorns', {stdio: ['pipe', new Readable(), 'pipe']}));
expectError(execaSync('unicorns', {stdio: ['pipe', new Readable(), 'pipe']}));
expectError(execa('unicorns', {stdio: [['pipe'], [new Readable()], ['pipe']]}));
expectError(execaSync('unicorns', {stdio: [['pipe'], [new Readable()], ['pipe']]}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', new Readable()]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', new Readable()]}));
expectError(execa('unicorns', {stdio: [['pipe'], ['pipe'], [new Readable()]]}));
expectError(execaSync('unicorns', {stdio: [['pipe'], ['pipe'], [new Readable()]]}));
expectAssignable<StdioOption>([new Uint8Array(), new Uint8Array()]);
expectAssignable<StdioOptionSync>([new Uint8Array(), new Uint8Array()]);
expectNotAssignable<StdioOption>([new Writable(), new Uint8Array()]);
expectNotAssignable<StdioOptionSync>([new Writable(), new Uint8Array()]);

expectError(execa('unicorns', {stdin: 'unknown'}));
expectError(execaSync('unicorns', {stdin: 'unknown'}));
expectError(execa('unicorns', {stdin: ['unknown']}));
expectError(execaSync('unicorns', {stdin: ['unknown']}));
expectError(execa('unicorns', {stdout: 'unknown'}));
expectError(execaSync('unicorns', {stdout: 'unknown'}));
expectError(execa('unicorns', {stdout: ['unknown']}));
expectError(execaSync('unicorns', {stdout: ['unknown']}));
expectError(execa('unicorns', {stderr: 'unknown'}));
expectError(execaSync('unicorns', {stderr: 'unknown'}));
expectError(execa('unicorns', {stderr: ['unknown']}));
expectError(execaSync('unicorns', {stderr: ['unknown']}));
expectError(execa('unicorns', {stdio: 'unknown'}));
expectError(execaSync('unicorns', {stdio: 'unknown'}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'unknown']}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'unknown']}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', ['unknown']]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', ['unknown']]}));
expectNotAssignable<StdinOption>('unknown');
expectNotAssignable<StdinOptionSync>('unknown');
expectNotAssignable<StdinOption>(['unknown']);
expectNotAssignable<StdinOptionSync>(['unknown']);
expectNotAssignable<StdoutStderrOption>('unknown');
expectNotAssignable<StdoutStderrOptionSync>('unknown');
expectNotAssignable<StdoutStderrOption>(['unknown']);
expectNotAssignable<StdoutStderrOptionSync>(['unknown']);
expectNotAssignable<StdioOption>('unknown');
expectNotAssignable<StdioOptionSync>('unknown');
expectNotAssignable<StdioOption>(['unknown']);
expectNotAssignable<StdioOptionSync>(['unknown']);
execa('unicorns', {stdin: pipeInherit});
execaSync('unicorns', {stdin: pipeInherit});
execa('unicorns', {stdout: pipeInherit});
execaSync('unicorns', {stdout: pipeInherit});
execa('unicorns', {stderr: pipeInherit});
execaSync('unicorns', {stderr: pipeInherit});
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', pipeInherit]}));
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', pipeInherit]});
expectAssignable<StdinOption>(pipeInherit);
expectAssignable<StdinOptionSync>(pipeInherit);
expectAssignable<StdoutStderrOption>(pipeInherit);
expectAssignable<StdoutStderrOptionSync>(pipeInherit);
expectAssignable<StdioOption>(pipeInherit);
expectAssignable<StdioOptionSync>(pipeInherit);
execa('unicorns', {stdin: pipeUndefined});
execaSync('unicorns', {stdin: pipeUndefined});
execa('unicorns', {stdout: pipeUndefined});
execaSync('unicorns', {stdout: pipeUndefined});
execa('unicorns', {stderr: pipeUndefined});
execaSync('unicorns', {stderr: pipeUndefined});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', pipeUndefined]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', pipeUndefined]});
expectAssignable<StdinOption>(pipeUndefined);
expectAssignable<StdinOptionSync>(pipeUndefined);
expectAssignable<StdoutStderrOption>(pipeUndefined);
expectAssignable<StdoutStderrOptionSync>(pipeUndefined);
expectAssignable<StdioOption>(pipeUndefined);
expectAssignable<StdioOptionSync>(pipeUndefined);
execa('unicorns', {stdin: 'pipe'});
execaSync('unicorns', {stdin: 'pipe'});
execa('unicorns', {stdin: ['pipe']});
execaSync('unicorns', {stdin: ['pipe']});
execa('unicorns', {stdout: 'pipe'});
execaSync('unicorns', {stdout: 'pipe'});
execa('unicorns', {stdout: ['pipe']});
execaSync('unicorns', {stdout: ['pipe']});
execa('unicorns', {stderr: 'pipe'});
execaSync('unicorns', {stderr: 'pipe'});
execa('unicorns', {stderr: ['pipe']});
execaSync('unicorns', {stderr: ['pipe']});
execa('unicorns', {stdio: 'pipe'});
execaSync('unicorns', {stdio: 'pipe'});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'pipe']});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'pipe']});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', ['pipe']]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', ['pipe']]});
expectAssignable<StdinOption>('pipe');
expectAssignable<StdinOptionSync>('pipe');
expectAssignable<StdinOption>(['pipe']);
expectAssignable<StdinOptionSync>(['pipe']);
expectAssignable<StdoutStderrOption>('pipe');
expectAssignable<StdoutStderrOptionSync>('pipe');
expectAssignable<StdoutStderrOption>(['pipe']);
expectAssignable<StdoutStderrOptionSync>(['pipe']);
expectAssignable<StdioOption>('pipe');
expectAssignable<StdioOptionSync>('pipe');
expectAssignable<StdioOption>(['pipe']);
expectAssignable<StdioOptionSync>(['pipe']);
execa('unicorns', {stdin: undefined});
execaSync('unicorns', {stdin: undefined});
execa('unicorns', {stdin: [undefined]});
execaSync('unicorns', {stdin: [undefined]});
execa('unicorns', {stdout: undefined});
execaSync('unicorns', {stdout: undefined});
execa('unicorns', {stdout: [undefined]});
execaSync('unicorns', {stdout: [undefined]});
execa('unicorns', {stderr: undefined});
execaSync('unicorns', {stderr: undefined});
execa('unicorns', {stderr: [undefined]});
execaSync('unicorns', {stderr: [undefined]});
execa('unicorns', {stdio: undefined});
execaSync('unicorns', {stdio: undefined});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', undefined]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', undefined]});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [undefined]]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [undefined]]});
expectAssignable<StdinOption>(undefined);
expectAssignable<StdinOptionSync>(undefined);
expectAssignable<StdinOption>([undefined]);
expectAssignable<StdinOptionSync>([undefined]);
expectAssignable<StdoutStderrOption>(undefined);
expectAssignable<StdoutStderrOptionSync>(undefined);
expectAssignable<StdoutStderrOption>([undefined]);
expectAssignable<StdoutStderrOptionSync>([undefined]);
expectAssignable<StdioOption>(undefined);
expectAssignable<StdioOptionSync>(undefined);
expectAssignable<StdioOption>([undefined]);
expectAssignable<StdioOptionSync>([undefined]);
expectError(execa('unicorns', {stdin: null}));
expectError(execaSync('unicorns', {stdin: null}));
expectError(execa('unicorns', {stdin: [null]}));
expectError(execaSync('unicorns', {stdin: [null]}));
expectError(execa('unicorns', {stdout: null}));
expectError(execaSync('unicorns', {stdout: null}));
expectError(execa('unicorns', {stdout: [null]}));
expectError(execaSync('unicorns', {stdout: [null]}));
expectError(execa('unicorns', {stderr: null}));
expectError(execaSync('unicorns', {stderr: null}));
expectError(execa('unicorns', {stderr: [null]}));
expectError(execaSync('unicorns', {stderr: [null]}));
expectError(execa('unicorns', {stdio: null}));
expectError(execaSync('unicorns', {stdio: null}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', null]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', null]}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [null]]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [null]]}));
expectNotAssignable<StdinOption>(null);
expectNotAssignable<StdinOptionSync>(null);
expectNotAssignable<StdinOption>([null]);
expectNotAssignable<StdinOptionSync>([null]);
expectNotAssignable<StdoutStderrOption>(null);
expectNotAssignable<StdoutStderrOptionSync>(null);
expectNotAssignable<StdoutStderrOption>([null]);
expectNotAssignable<StdoutStderrOptionSync>([null]);
expectNotAssignable<StdioOption>(null);
expectNotAssignable<StdioOptionSync>(null);
expectNotAssignable<StdioOption>([null]);
expectNotAssignable<StdioOptionSync>([null]);
execa('unicorns', {stdin: 'inherit'});
execaSync('unicorns', {stdin: 'inherit'});
execa('unicorns', {stdin: ['inherit']});
execaSync('unicorns', {stdin: ['inherit']});
execa('unicorns', {stdout: 'inherit'});
execaSync('unicorns', {stdout: 'inherit'});
execa('unicorns', {stdout: ['inherit']});
execaSync('unicorns', {stdout: ['inherit']});
execa('unicorns', {stderr: 'inherit'});
execaSync('unicorns', {stderr: 'inherit'});
execa('unicorns', {stderr: ['inherit']});
execaSync('unicorns', {stderr: ['inherit']});
execa('unicorns', {stdio: 'inherit'});
execaSync('unicorns', {stdio: 'inherit'});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'inherit']});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'inherit']});
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', ['inherit']]}));
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', ['inherit']]});
expectAssignable<StdinOption>('inherit');
expectAssignable<StdinOptionSync>('inherit');
expectAssignable<StdinOption>(['inherit']);
expectAssignable<StdinOptionSync>(['inherit']);
expectAssignable<StdoutStderrOption>('inherit');
expectAssignable<StdoutStderrOptionSync>('inherit');
expectAssignable<StdoutStderrOption>(['inherit']);
expectAssignable<StdoutStderrOptionSync>(['inherit']);
expectAssignable<StdioOption>('inherit');
expectAssignable<StdioOptionSync>('inherit');
expectAssignable<StdioOption>(['inherit']);
expectAssignable<StdioOptionSync>(['inherit']);
execa('unicorns', {stdin: 'ignore'});
execaSync('unicorns', {stdin: 'ignore'});
expectError(execa('unicorns', {stdin: ['ignore']}));
expectError(execaSync('unicorns', {stdin: ['ignore']}));
execa('unicorns', {stdout: 'ignore'});
execaSync('unicorns', {stdout: 'ignore'});
expectError(execa('unicorns', {stdout: ['ignore']}));
expectError(execaSync('unicorns', {stdout: ['ignore']}));
execa('unicorns', {stderr: 'ignore'});
execaSync('unicorns', {stderr: 'ignore'});
expectError(execa('unicorns', {stderr: ['ignore']}));
expectError(execaSync('unicorns', {stderr: ['ignore']}));
execa('unicorns', {stdio: 'ignore'});
execaSync('unicorns', {stdio: 'ignore'});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'ignore']});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'ignore']});
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', ['ignore']]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', ['ignore']]}));
expectAssignable<StdinOption>('ignore');
expectAssignable<StdinOptionSync>('ignore');
expectNotAssignable<StdinOption>(['ignore']);
expectNotAssignable<StdinOptionSync>(['ignore']);
expectAssignable<StdoutStderrOption>('ignore');
expectAssignable<StdoutStderrOptionSync>('ignore');
expectNotAssignable<StdoutStderrOption>(['ignore']);
expectNotAssignable<StdoutStderrOptionSync>(['ignore']);
expectAssignable<StdioOption>('ignore');
expectAssignable<StdioOptionSync>('ignore');
expectNotAssignable<StdioOption>(['ignore']);
expectNotAssignable<StdioOptionSync>(['ignore']);
execa('unicorns', {stdin: 'overlapped'});
expectError(execaSync('unicorns', {stdin: 'overlapped'}));
execa('unicorns', {stdin: ['overlapped']});
expectError(execaSync('unicorns', {stdin: ['overlapped']}));
execa('unicorns', {stdout: 'overlapped'});
expectError(execaSync('unicorns', {stdout: 'overlapped'}));
execa('unicorns', {stdout: ['overlapped']});
expectError(execaSync('unicorns', {stdout: ['overlapped']}));
execa('unicorns', {stderr: 'overlapped'});
expectError(execaSync('unicorns', {stderr: 'overlapped'}));
execa('unicorns', {stderr: ['overlapped']});
expectError(execaSync('unicorns', {stderr: ['overlapped']}));
execa('unicorns', {stdio: 'overlapped'});
expectError(execaSync('unicorns', {stdio: 'overlapped'}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'overlapped']});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'overlapped']}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', ['overlapped']]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', ['overlapped']]}));
expectAssignable<StdinOption>('overlapped');
expectNotAssignable<StdinOptionSync>('overlapped');
expectAssignable<StdinOption>(['overlapped']);
expectNotAssignable<StdinOptionSync>(['overlapped']);
expectAssignable<StdoutStderrOption>('overlapped');
expectNotAssignable<StdoutStderrOptionSync>('overlapped');
expectAssignable<StdoutStderrOption>(['overlapped']);
expectNotAssignable<StdoutStderrOptionSync>(['overlapped']);
expectAssignable<StdioOption>('overlapped');
expectNotAssignable<StdioOptionSync>('overlapped');
expectAssignable<StdioOption>(['overlapped']);
expectNotAssignable<StdioOptionSync>(['overlapped']);
execa('unicorns', {stdin: 'ipc'});
expectError(execaSync('unicorns', {stdin: 'ipc'}));
expectError(execa('unicorns', {stdin: ['ipc']}));
expectError(execaSync('unicorns', {stdin: ['ipc']}));
execa('unicorns', {stdout: 'ipc'});
expectError(execaSync('unicorns', {stdout: 'ipc'}));
expectError(execa('unicorns', {stdout: ['ipc']}));
expectError(execaSync('unicorns', {stdout: ['ipc']}));
execa('unicorns', {stderr: 'ipc'});
expectError(execaSync('unicorns', {stderr: 'ipc'}));
expectError(execa('unicorns', {stderr: ['ipc']}));
expectError(execaSync('unicorns', {stderr: ['ipc']}));
expectError(execa('unicorns', {stdio: 'ipc'}));
expectError(execaSync('unicorns', {stdio: 'ipc'}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'ipc']});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 'ipc']}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', ['ipc']]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', ['ipc']]}));
expectAssignable<StdinOption>('ipc');
expectNotAssignable<StdinOptionSync>('ipc');
expectNotAssignable<StdinOption>(['ipc']);
expectNotAssignable<StdinOptionSync>(['ipc']);
expectAssignable<StdoutStderrOption>('ipc');
expectNotAssignable<StdoutStderrOptionSync>('ipc');
expectNotAssignable<StdoutStderrOption>(['ipc']);
expectNotAssignable<StdoutStderrOptionSync>(['ipc']);
expectAssignable<StdioOption>('ipc');
expectNotAssignable<StdioOptionSync>('ipc');
expectNotAssignable<StdioOption>(['ipc']);
expectNotAssignable<StdioOptionSync>(['ipc']);
execa('unicorns', {stdin: 0});
execaSync('unicorns', {stdin: 0});
execa('unicorns', {stdin: [0]});
execaSync('unicorns', {stdin: [0]});
expectError(execa('unicorns', {stdin: [1]}));
expectError(execa('unicorns', {stdin: [2]}));
execa('unicorns', {stdin: 3});
execaSync('unicorns', {stdin: 3});
expectError(execa('unicorns', {stdin: [3]}));
execaSync('unicorns', {stdin: [3]});
expectError(execa('unicorns', {stdout: [0]}));
execa('unicorns', {stdout: 1});
execaSync('unicorns', {stdout: 1});
execa('unicorns', {stdout: [1]});
execaSync('unicorns', {stdout: [1]});
execa('unicorns', {stdout: 2});
execaSync('unicorns', {stdout: 2});
execa('unicorns', {stdout: [2]});
execaSync('unicorns', {stdout: [2]});
execa('unicorns', {stdout: 3});
execaSync('unicorns', {stdout: 3});
expectError(execa('unicorns', {stdout: [3]}));
execaSync('unicorns', {stdout: [3]});
expectError(execa('unicorns', {stderr: [0]}));
execa('unicorns', {stderr: 1});
execaSync('unicorns', {stderr: 1});
execa('unicorns', {stderr: [1]});
execaSync('unicorns', {stderr: [1]});
execa('unicorns', {stderr: 1});
execaSync('unicorns', {stderr: 2});
execa('unicorns', {stderr: [2]});
execaSync('unicorns', {stderr: [2]});
execa('unicorns', {stderr: 3});
execaSync('unicorns', {stderr: 3});
expectError(execa('unicorns', {stderr: [3]}));
execaSync('unicorns', {stderr: [3]});
expectError(execa('unicorns', {stdio: 0}));
expectError(execaSync('unicorns', {stdio: 0}));
expectError(execa('unicorns', {stdio: 1}));
expectError(execaSync('unicorns', {stdio: 1}));
expectError(execa('unicorns', {stdio: 2}));
expectError(execaSync('unicorns', {stdio: 2}));
expectError(execa('unicorns', {stdio: 3}));
expectError(execaSync('unicorns', {stdio: 3}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 0]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 0]});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [0]]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [0]]});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 1]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 1]});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [1]]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [1]]});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 2]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 2]});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [2]]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [2]]});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 3]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', 3]});
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [3]]}));
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [3]]});
expectAssignable<StdinOption>(0);
expectAssignable<StdinOptionSync>(0);
expectAssignable<StdinOption>([0]);
expectAssignable<StdinOptionSync>([0]);
expectAssignable<StdoutStderrOption>(1);
expectAssignable<StdoutStderrOptionSync>(1);
expectAssignable<StdoutStderrOption>([1]);
expectAssignable<StdoutStderrOptionSync>([1]);
expectAssignable<StdoutStderrOption>(2);
expectAssignable<StdoutStderrOptionSync>(2);
expectAssignable<StdoutStderrOption>([2]);
expectAssignable<StdoutStderrOptionSync>([2]);
expectAssignable<StdioOption>(3);
expectAssignable<StdioOptionSync>(3);
expectNotAssignable<StdioOption>([3]);
expectAssignable<StdioOptionSync>([3]);
execa('unicorns', {stdin: process.stdin});
execaSync('unicorns', {stdin: process.stdin});
execa('unicorns', {stdin: [process.stdin]});
expectError(execaSync('unicorns', {stdin: [process.stdin]}));
execa('unicorns', {stdout: process.stdout});
execaSync('unicorns', {stdout: process.stdout});
execa('unicorns', {stdout: [process.stdout]});
expectError(execaSync('unicorns', {stdout: [process.stdout]}));
execa('unicorns', {stderr: process.stderr});
execaSync('unicorns', {stderr: process.stderr});
execa('unicorns', {stderr: [process.stderr]});
expectError(execaSync('unicorns', {stderr: [process.stderr]}));
expectError(execa('unicorns', {stdio: process.stderr}));
expectError(execaSync('unicorns', {stdio: process.stderr}));
expectAssignable<StdinOption>(process.stdin);
expectAssignable<StdinOptionSync>(process.stdin);
expectAssignable<StdinOption>([process.stdin]);
expectNotAssignable<StdinOptionSync>([process.stdin]);
expectAssignable<StdoutStderrOption>(process.stdout);
expectAssignable<StdoutStderrOptionSync>(process.stdout);
expectAssignable<StdoutStderrOption>([process.stdout]);
expectNotAssignable<StdoutStderrOptionSync>([process.stdout]);
expectAssignable<StdoutStderrOption>(process.stderr);
expectAssignable<StdoutStderrOptionSync>(process.stderr);
expectAssignable<StdoutStderrOption>([process.stderr]);
expectNotAssignable<StdoutStderrOptionSync>([process.stderr]);
execa('unicorns', {stdin: new Readable()});
execaSync('unicorns', {stdin: new Readable()});
execa('unicorns', {stdin: [new Readable()]});
expectError(execaSync('unicorns', {stdin: [new Readable()]}));
expectError(execa('unicorns', {stdout: new Readable()}));
expectError(execaSync('unicorns', {stdout: new Readable()}));
expectError(execa('unicorns', {stdout: [new Readable()]}));
expectError(execaSync('unicorns', {stdout: [new Readable()]}));
expectError(execa('unicorns', {stderr: new Readable()}));
expectError(execaSync('unicorns', {stderr: new Readable()}));
expectError(execa('unicorns', {stderr: [new Readable()]}));
expectError(execaSync('unicorns', {stderr: [new Readable()]}));
expectError(execa('unicorns', {stdio: new Readable()}));
expectError(execaSync('unicorns', {stdio: new Readable()}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', new Readable()]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', new Readable()]});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [new Readable()]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [new Readable()]]}));
expectAssignable<StdinOption>(new Readable());
expectAssignable<StdinOptionSync>(new Readable());
expectAssignable<StdinOption>([new Readable()]);
expectNotAssignable<StdinOptionSync>([new Readable()]);
expectNotAssignable<StdoutStderrOption>(new Readable());
expectNotAssignable<StdoutStderrOptionSync>(new Readable());
expectNotAssignable<StdoutStderrOption>([new Readable()]);
expectNotAssignable<StdoutStderrOptionSync>([new Readable()]);
expectAssignable<StdioOption>(new Readable());
expectAssignable<StdioOptionSync>(new Readable());
expectAssignable<StdioOption>([new Readable()]);
expectNotAssignable<StdioOptionSync>([new Readable()]);
expectError(execa('unicorns', {stdin: new Writable()}));
expectError(execaSync('unicorns', {stdin: new Writable()}));
expectError(execa('unicorns', {stdin: [new Writable()]}));
expectError(execaSync('unicorns', {stdin: [new Writable()]}));
execa('unicorns', {stdout: new Writable()});
execaSync('unicorns', {stdout: new Writable()});
execa('unicorns', {stdout: [new Writable()]});
expectError(execaSync('unicorns', {stdout: [new Writable()]}));
execa('unicorns', {stderr: new Writable()});
execaSync('unicorns', {stderr: new Writable()});
execa('unicorns', {stderr: [new Writable()]});
expectError(execaSync('unicorns', {stderr: [new Writable()]}));
expectError(execa('unicorns', {stdio: new Writable()}));
expectError(execaSync('unicorns', {stdio: new Writable()}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', new Writable()]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', new Writable()]});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [new Writable()]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [new Writable()]]}));
expectNotAssignable<StdinOption>(new Writable());
expectNotAssignable<StdinOptionSync>(new Writable());
expectNotAssignable<StdinOption>([new Writable()]);
expectNotAssignable<StdinOptionSync>([new Writable()]);
expectAssignable<StdoutStderrOption>(new Writable());
expectAssignable<StdoutStderrOptionSync>(new Writable());
expectAssignable<StdoutStderrOption>([new Writable()]);
expectNotAssignable<StdoutStderrOptionSync>([new Writable()]);
expectAssignable<StdioOption>(new Writable());
expectAssignable<StdioOptionSync>(new Writable());
expectAssignable<StdioOption>([new Writable()]);
expectNotAssignable<StdioOptionSync>([new Writable()]);
execa('unicorns', {stdin: new ReadableStream()});
expectError(execaSync('unicorns', {stdin: new ReadableStream()}));
execa('unicorns', {stdin: [new ReadableStream()]});
expectError(execaSync('unicorns', {stdin: [new ReadableStream()]}));
expectError(execa('unicorns', {stdout: new ReadableStream()}));
expectError(execaSync('unicorns', {stdout: new ReadableStream()}));
expectError(execa('unicorns', {stdout: [new ReadableStream()]}));
expectError(execaSync('unicorns', {stdout: [new ReadableStream()]}));
expectError(execa('unicorns', {stderr: new ReadableStream()}));
expectError(execaSync('unicorns', {stderr: new ReadableStream()}));
expectError(execa('unicorns', {stderr: [new ReadableStream()]}));
expectError(execaSync('unicorns', {stderr: [new ReadableStream()]}));
expectError(execa('unicorns', {stdio: new ReadableStream()}));
expectError(execaSync('unicorns', {stdio: new ReadableStream()}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', new ReadableStream()]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', new ReadableStream()]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [new ReadableStream()]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [new ReadableStream()]]}));
expectAssignable<StdinOption>(new ReadableStream());
expectNotAssignable<StdinOptionSync>(new ReadableStream());
expectAssignable<StdinOption>([new ReadableStream()]);
expectNotAssignable<StdinOptionSync>([new ReadableStream()]);
expectNotAssignable<StdoutStderrOption>(new ReadableStream());
expectNotAssignable<StdoutStderrOptionSync>(new ReadableStream());
expectNotAssignable<StdoutStderrOption>([new ReadableStream()]);
expectNotAssignable<StdoutStderrOptionSync>([new ReadableStream()]);
expectAssignable<StdioOption>(new ReadableStream());
expectNotAssignable<StdioOptionSync>(new ReadableStream());
expectAssignable<StdioOption>([new ReadableStream()]);
expectNotAssignable<StdioOptionSync>([new ReadableStream()]);
expectError(execa('unicorns', {stdin: new WritableStream()}));
expectError(execaSync('unicorns', {stdin: new WritableStream()}));
expectError(execa('unicorns', {stdin: [new WritableStream()]}));
expectError(execaSync('unicorns', {stdin: [new WritableStream()]}));
execa('unicorns', {stdout: new WritableStream()});
expectError(execaSync('unicorns', {stdout: new WritableStream()}));
execa('unicorns', {stdout: [new WritableStream()]});
expectError(execaSync('unicorns', {stdout: [new WritableStream()]}));
execa('unicorns', {stderr: new WritableStream()});
expectError(execaSync('unicorns', {stderr: new WritableStream()}));
execa('unicorns', {stderr: [new WritableStream()]});
expectError(execaSync('unicorns', {stderr: [new WritableStream()]}));
expectError(execa('unicorns', {stdio: new WritableStream()}));
expectError(execaSync('unicorns', {stdio: new WritableStream()}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', new WritableStream()]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', new WritableStream()]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [new WritableStream()]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [new WritableStream()]]}));
expectNotAssignable<StdinOption>(new WritableStream());
expectNotAssignable<StdinOptionSync>(new WritableStream());
expectNotAssignable<StdinOption>([new WritableStream()]);
expectNotAssignable<StdinOptionSync>([new WritableStream()]);
expectAssignable<StdoutStderrOption>(new WritableStream());
expectNotAssignable<StdoutStderrOptionSync>(new WritableStream());
expectAssignable<StdoutStderrOption>([new WritableStream()]);
expectNotAssignable<StdoutStderrOptionSync>([new WritableStream()]);
expectAssignable<StdioOption>(new WritableStream());
expectNotAssignable<StdioOptionSync>(new WritableStream());
expectAssignable<StdioOption>([new WritableStream()]);
expectNotAssignable<StdioOptionSync>([new WritableStream()]);
execa('unicorns', {stdin: new Uint8Array()});
execaSync('unicorns', {stdin: new Uint8Array()});
execa('unicorns', {stdin: [new Uint8Array()]});
execaSync('unicorns', {stdin: [new Uint8Array()]});
expectError(execa('unicorns', {stdout: new Uint8Array()}));
expectError(execaSync('unicorns', {stdout: new Uint8Array()}));
expectError(execa('unicorns', {stdout: [new Uint8Array()]}));
expectError(execaSync('unicorns', {stdout: [new Uint8Array()]}));
expectError(execa('unicorns', {stderr: new Uint8Array()}));
expectError(execaSync('unicorns', {stderr: new Uint8Array()}));
expectError(execa('unicorns', {stderr: [new Uint8Array()]}));
expectError(execaSync('unicorns', {stderr: [new Uint8Array()]}));
expectError(execa('unicorns', {stdio: new Uint8Array()}));
expectError(execaSync('unicorns', {stdio: new Uint8Array()}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', new Uint8Array()]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', new Uint8Array()]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [new Uint8Array()]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [new Uint8Array()]]}));
expectAssignable<StdinOption>(new Uint8Array());
expectAssignable<StdinOptionSync>(new Uint8Array());
expectAssignable<StdinOption>([new Uint8Array()]);
expectAssignable<StdinOptionSync>([new Uint8Array()]);
expectNotAssignable<StdoutStderrOption>(new Uint8Array());
expectNotAssignable<StdoutStderrOptionSync>(new Uint8Array());
expectNotAssignable<StdoutStderrOption>([new Uint8Array()]);
expectNotAssignable<StdoutStderrOptionSync>([new Uint8Array()]);
expectAssignable<StdioOption>(new Uint8Array());
expectAssignable<StdioOptionSync>(new Uint8Array());
expectAssignable<StdioOption>([new Uint8Array()]);
expectAssignable<StdioOptionSync>([new Uint8Array()]);
execa('unicorns', {stdin: fileUrl});
execaSync('unicorns', {stdin: fileUrl});
execa('unicorns', {stdin: [fileUrl]});
execaSync('unicorns', {stdin: [fileUrl]});
execa('unicorns', {stdout: fileUrl});
execaSync('unicorns', {stdout: fileUrl});
execa('unicorns', {stdout: [fileUrl]});
execaSync('unicorns', {stdout: [fileUrl]});
execa('unicorns', {stderr: fileUrl});
execaSync('unicorns', {stderr: fileUrl});
execa('unicorns', {stderr: [fileUrl]});
execaSync('unicorns', {stderr: [fileUrl]});
expectError(execa('unicorns', {stdio: fileUrl}));
expectError(execaSync('unicorns', {stdio: fileUrl}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', fileUrl]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', fileUrl]});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [fileUrl]]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [fileUrl]]});
expectAssignable<StdinOption>(fileUrl);
expectAssignable<StdinOptionSync>(fileUrl);
expectAssignable<StdinOption>([fileUrl]);
expectAssignable<StdinOptionSync>([fileUrl]);
expectAssignable<StdoutStderrOption>(fileUrl);
expectAssignable<StdoutStderrOptionSync>(fileUrl);
expectAssignable<StdoutStderrOption>([fileUrl]);
expectAssignable<StdoutStderrOptionSync>([fileUrl]);
expectAssignable<StdioOption>(fileUrl);
expectAssignable<StdioOptionSync>(fileUrl);
expectAssignable<StdioOption>([fileUrl]);
expectAssignable<StdioOptionSync>([fileUrl]);
execa('unicorns', {stdin: fileObject});
execaSync('unicorns', {stdin: fileObject});
execa('unicorns', {stdin: [fileObject]});
execaSync('unicorns', {stdin: [fileObject]});
execa('unicorns', {stdout: fileObject});
execaSync('unicorns', {stdout: fileObject});
execa('unicorns', {stdout: [fileObject]});
execaSync('unicorns', {stdout: [fileObject]});
execa('unicorns', {stderr: fileObject});
execaSync('unicorns', {stderr: fileObject});
execa('unicorns', {stderr: [fileObject]});
execaSync('unicorns', {stderr: [fileObject]});
expectError(execa('unicorns', {stdio: fileObject}));
expectError(execaSync('unicorns', {stdio: fileObject}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', fileObject]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', fileObject]});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [fileObject]]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [fileObject]]});
expectAssignable<StdinOption>(fileObject);
expectAssignable<StdinOptionSync>(fileObject);
expectAssignable<StdinOption>([fileObject]);
expectAssignable<StdinOptionSync>([fileObject]);
expectAssignable<StdoutStderrOption>(fileObject);
expectAssignable<StdoutStderrOptionSync>(fileObject);
expectAssignable<StdoutStderrOption>([fileObject]);
expectAssignable<StdoutStderrOptionSync>([fileObject]);
expectAssignable<StdioOption>(fileObject);
expectAssignable<StdioOptionSync>(fileObject);
expectAssignable<StdioOption>([fileObject]);
expectAssignable<StdioOptionSync>([fileObject]);
expectError(execa('unicorns', {stdin: invalidFileObject}));
expectError(execaSync('unicorns', {stdin: invalidFileObject}));
expectError(execa('unicorns', {stdin: [invalidFileObject]}));
expectError(execaSync('unicorns', {stdin: [invalidFileObject]}));
expectError(execa('unicorns', {stdout: invalidFileObject}));
expectError(execaSync('unicorns', {stdout: invalidFileObject}));
expectError(execa('unicorns', {stdout: [invalidFileObject]}));
expectError(execaSync('unicorns', {stdout: [invalidFileObject]}));
expectError(execa('unicorns', {stderr: invalidFileObject}));
expectError(execaSync('unicorns', {stderr: invalidFileObject}));
expectError(execa('unicorns', {stderr: [invalidFileObject]}));
expectError(execaSync('unicorns', {stderr: [invalidFileObject]}));
expectError(execa('unicorns', {stdio: invalidFileObject}));
expectError(execaSync('unicorns', {stdio: invalidFileObject}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', invalidFileObject]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', invalidFileObject]}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [invalidFileObject]]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [invalidFileObject]]}));
expectNotAssignable<StdinOption>(invalidFileObject);
expectNotAssignable<StdinOptionSync>(invalidFileObject);
expectNotAssignable<StdinOption>([invalidFileObject]);
expectNotAssignable<StdinOptionSync>([invalidFileObject]);
expectNotAssignable<StdoutStderrOption>(invalidFileObject);
expectNotAssignable<StdoutStderrOptionSync>(invalidFileObject);
expectNotAssignable<StdoutStderrOption>([invalidFileObject]);
expectNotAssignable<StdoutStderrOptionSync>([invalidFileObject]);
expectNotAssignable<StdioOption>(invalidFileObject);
expectNotAssignable<StdioOptionSync>(invalidFileObject);
expectNotAssignable<StdioOption>([invalidFileObject]);
expectNotAssignable<StdioOptionSync>([invalidFileObject]);
execa('unicorns', {stdin: [stringArray]});
execaSync('unicorns', {stdin: [stringArray]});
expectError(execa('unicorns', {stdout: [stringArray]}));
expectError(execaSync('unicorns', {stdout: [stringArray]}));
expectError(execa('unicorns', {stderr: [stringArray]}));
expectError(execaSync('unicorns', {stderr: [stringArray]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [stringArray]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [stringArray]]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [[stringArray]]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [[stringArray]]]}));
expectAssignable<StdinOption>([stringArray]);
expectAssignable<StdinOptionSync>([stringArray]);
expectNotAssignable<StdoutStderrOption>([stringArray]);
expectNotAssignable<StdoutStderrOptionSync>([stringArray]);
expectAssignable<StdioOption>([stringArray]);
expectAssignable<StdioOptionSync>([stringArray]);
execa('unicorns', {stdin: [binaryArray]});
execaSync('unicorns', {stdin: [binaryArray]});
expectError(execa('unicorns', {stdout: [binaryArray]}));
expectError(execaSync('unicorns', {stdout: [binaryArray]}));
expectError(execa('unicorns', {stderr: [binaryArray]}));
expectError(execaSync('unicorns', {stderr: [binaryArray]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [binaryArray]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [binaryArray]]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [[binaryArray]]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [[binaryArray]]]}));
expectAssignable<StdinOption>([binaryArray]);
expectAssignable<StdinOptionSync>([binaryArray]);
expectNotAssignable<StdoutStderrOption>([binaryArray]);
expectNotAssignable<StdoutStderrOptionSync>([binaryArray]);
expectAssignable<StdioOption>([binaryArray]);
expectAssignable<StdioOptionSync>([binaryArray]);
execa('unicorns', {stdin: [objectArray]});
execaSync('unicorns', {stdin: [objectArray]});
expectError(execa('unicorns', {stdout: [objectArray]}));
expectError(execaSync('unicorns', {stdout: [objectArray]}));
expectError(execa('unicorns', {stderr: [objectArray]}));
expectError(execaSync('unicorns', {stderr: [objectArray]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [objectArray]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [objectArray]]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [[objectArray]]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [[objectArray]]]}));
expectAssignable<StdinOption>([objectArray]);
expectAssignable<StdinOptionSync>([objectArray]);
expectNotAssignable<StdoutStderrOption>([objectArray]);
expectNotAssignable<StdoutStderrOptionSync>([objectArray]);
expectAssignable<StdioOption>([objectArray]);
expectAssignable<StdioOptionSync>([objectArray]);
execa('unicorns', {stdin: stringIterable});
execaSync('unicorns', {stdin: stringIterable});
execa('unicorns', {stdin: [stringIterable]});
execaSync('unicorns', {stdin: [stringIterable]});
expectError(execa('unicorns', {stdout: stringIterable}));
expectError(execaSync('unicorns', {stdout: stringIterable}));
expectError(execa('unicorns', {stdout: [stringIterable]}));
expectError(execaSync('unicorns', {stdout: [stringIterable]}));
expectError(execa('unicorns', {stderr: stringIterable}));
expectError(execaSync('unicorns', {stderr: stringIterable}));
expectError(execa('unicorns', {stderr: [stringIterable]}));
expectError(execaSync('unicorns', {stderr: [stringIterable]}));
expectError(execa('unicorns', {stdio: stringIterable}));
expectError(execaSync('unicorns', {stdio: stringIterable}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', stringIterable]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', stringIterable]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [stringIterable]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [stringIterable]]}));
expectAssignable<StdinOption>(stringIterable);
expectAssignable<StdinOptionSync>(stringIterable);
expectAssignable<StdinOption>([stringIterable]);
expectAssignable<StdinOptionSync>([stringIterable]);
expectNotAssignable<StdoutStderrOption>(stringIterable);
expectNotAssignable<StdoutStderrOptionSync>(stringIterable);
expectNotAssignable<StdoutStderrOption>([stringIterable]);
expectNotAssignable<StdoutStderrOptionSync>([stringIterable]);
expectAssignable<StdioOption>(stringIterable);
expectAssignable<StdioOptionSync>(stringIterable);
expectAssignable<StdioOption>([stringIterable]);
expectAssignable<StdioOptionSync>([stringIterable]);
execa('unicorns', {stdin: binaryIterable});
execaSync('unicorns', {stdin: binaryIterable});
execa('unicorns', {stdin: [binaryIterable]});
execaSync('unicorns', {stdin: [binaryIterable]});
expectError(execa('unicorns', {stdout: binaryIterable}));
expectError(execaSync('unicorns', {stdout: binaryIterable}));
expectError(execa('unicorns', {stdout: [binaryIterable]}));
expectError(execaSync('unicorns', {stdout: [binaryIterable]}));
expectError(execa('unicorns', {stderr: binaryIterable}));
expectError(execaSync('unicorns', {stderr: binaryIterable}));
expectError(execa('unicorns', {stderr: [binaryIterable]}));
expectError(execaSync('unicorns', {stderr: [binaryIterable]}));
expectError(execa('unicorns', {stdio: binaryIterable}));
expectError(execaSync('unicorns', {stdio: binaryIterable}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', binaryIterable]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', binaryIterable]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [binaryIterable]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [binaryIterable]]}));
expectAssignable<StdinOption>(binaryIterable);
expectAssignable<StdinOptionSync>(binaryIterable);
expectAssignable<StdinOption>([binaryIterable]);
expectAssignable<StdinOptionSync>([binaryIterable]);
expectNotAssignable<StdoutStderrOption>(binaryIterable);
expectNotAssignable<StdoutStderrOptionSync>(binaryIterable);
expectNotAssignable<StdoutStderrOption>([binaryIterable]);
expectNotAssignable<StdoutStderrOptionSync>([binaryIterable]);
expectAssignable<StdioOption>(binaryIterable);
expectAssignable<StdioOptionSync>(binaryIterable);
expectAssignable<StdioOption>([binaryIterable]);
expectAssignable<StdioOptionSync>([binaryIterable]);
execa('unicorns', {stdin: objectIterable});
execaSync('unicorns', {stdin: objectIterable});
execa('unicorns', {stdin: [objectIterable]});
execaSync('unicorns', {stdin: [objectIterable]});
expectError(execa('unicorns', {stdout: objectIterable}));
expectError(execaSync('unicorns', {stdout: objectIterable}));
expectError(execa('unicorns', {stdout: [objectIterable]}));
expectError(execaSync('unicorns', {stdout: [objectIterable]}));
expectError(execa('unicorns', {stderr: objectIterable}));
expectError(execaSync('unicorns', {stderr: objectIterable}));
expectError(execa('unicorns', {stderr: [objectIterable]}));
expectError(execaSync('unicorns', {stderr: [objectIterable]}));
expectError(execa('unicorns', {stdio: objectIterable}));
expectError(execaSync('unicorns', {stdio: objectIterable}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', objectIterable]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', objectIterable]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [objectIterable]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [objectIterable]]}));
expectAssignable<StdinOption>(objectIterable);
expectAssignable<StdinOptionSync>(objectIterable);
expectAssignable<StdinOption>([objectIterable]);
expectAssignable<StdinOptionSync>([objectIterable]);
expectNotAssignable<StdoutStderrOption>(objectIterable);
expectNotAssignable<StdoutStderrOptionSync>(objectIterable);
expectNotAssignable<StdoutStderrOption>([objectIterable]);
expectNotAssignable<StdoutStderrOptionSync>([objectIterable]);
expectAssignable<StdioOption>(objectIterable);
expectAssignable<StdioOptionSync>(objectIterable);
expectAssignable<StdioOption>([objectIterable]);
expectAssignable<StdioOptionSync>([objectIterable]);
execa('unicorns', {stdin: asyncStringIterable});
expectError(execaSync('unicorns', {stdin: asyncStringIterable}));
execa('unicorns', {stdin: [asyncStringIterable]});
expectError(execaSync('unicorns', {stdin: [asyncStringIterable]}));
expectError(execa('unicorns', {stdout: asyncStringIterable}));
expectError(execaSync('unicorns', {stdout: asyncStringIterable}));
expectError(execa('unicorns', {stdout: [asyncStringIterable]}));
expectError(execaSync('unicorns', {stdout: [asyncStringIterable]}));
expectError(execa('unicorns', {stderr: asyncStringIterable}));
expectError(execaSync('unicorns', {stderr: asyncStringIterable}));
expectError(execa('unicorns', {stderr: [asyncStringIterable]}));
expectError(execaSync('unicorns', {stderr: [asyncStringIterable]}));
expectError(execa('unicorns', {stdio: asyncStringIterable}));
expectError(execaSync('unicorns', {stdio: asyncStringIterable}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', asyncStringIterable]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', asyncStringIterable]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [asyncStringIterable]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [asyncStringIterable]]}));
expectAssignable<StdinOption>(asyncStringIterable);
expectNotAssignable<StdinOptionSync>(asyncStringIterable);
expectAssignable<StdinOption>([asyncStringIterable]);
expectNotAssignable<StdinOptionSync>([asyncStringIterable]);
expectNotAssignable<StdoutStderrOption>(asyncStringIterable);
expectNotAssignable<StdoutStderrOptionSync>(asyncStringIterable);
expectNotAssignable<StdoutStderrOption>([asyncStringIterable]);
expectNotAssignable<StdoutStderrOptionSync>([asyncStringIterable]);
expectAssignable<StdioOption>(asyncStringIterable);
expectNotAssignable<StdioOptionSync>(asyncStringIterable);
expectAssignable<StdioOption>([asyncStringIterable]);
expectNotAssignable<StdioOptionSync>([asyncStringIterable]);
execa('unicorns', {stdin: asyncBinaryIterable});
expectError(execaSync('unicorns', {stdin: asyncBinaryIterable}));
execa('unicorns', {stdin: [asyncBinaryIterable]});
expectError(execaSync('unicorns', {stdin: [asyncBinaryIterable]}));
expectError(execa('unicorns', {stdout: asyncBinaryIterable}));
expectError(execaSync('unicorns', {stdout: asyncBinaryIterable}));
expectError(execa('unicorns', {stdout: [asyncBinaryIterable]}));
expectError(execaSync('unicorns', {stdout: [asyncBinaryIterable]}));
expectError(execa('unicorns', {stderr: asyncBinaryIterable}));
expectError(execaSync('unicorns', {stderr: asyncBinaryIterable}));
expectError(execa('unicorns', {stderr: [asyncBinaryIterable]}));
expectError(execaSync('unicorns', {stderr: [asyncBinaryIterable]}));
expectError(execa('unicorns', {stdio: asyncBinaryIterable}));
expectError(execaSync('unicorns', {stdio: asyncBinaryIterable}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', asyncBinaryIterable]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', asyncBinaryIterable]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [asyncBinaryIterable]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [asyncBinaryIterable]]}));
expectAssignable<StdinOption>(asyncBinaryIterable);
expectNotAssignable<StdinOptionSync>(asyncBinaryIterable);
expectAssignable<StdinOption>([asyncBinaryIterable]);
expectNotAssignable<StdinOptionSync>([asyncBinaryIterable]);
expectNotAssignable<StdoutStderrOption>(asyncBinaryIterable);
expectNotAssignable<StdoutStderrOptionSync>(asyncBinaryIterable);
expectNotAssignable<StdoutStderrOption>([asyncBinaryIterable]);
expectNotAssignable<StdoutStderrOptionSync>([asyncBinaryIterable]);
expectAssignable<StdioOption>(asyncBinaryIterable);
expectNotAssignable<StdioOptionSync>(asyncBinaryIterable);
expectAssignable<StdioOption>([asyncBinaryIterable]);
expectNotAssignable<StdioOptionSync>([asyncBinaryIterable]);
execa('unicorns', {stdin: asyncObjectIterable});
expectError(execaSync('unicorns', {stdin: asyncObjectIterable}));
execa('unicorns', {stdin: [asyncObjectIterable]});
expectError(execaSync('unicorns', {stdin: [asyncObjectIterable]}));
expectError(execa('unicorns', {stdout: asyncObjectIterable}));
expectError(execaSync('unicorns', {stdout: asyncObjectIterable}));
expectError(execa('unicorns', {stdout: [asyncObjectIterable]}));
expectError(execaSync('unicorns', {stdout: [asyncObjectIterable]}));
expectError(execa('unicorns', {stderr: asyncObjectIterable}));
expectError(execaSync('unicorns', {stderr: asyncObjectIterable}));
expectError(execa('unicorns', {stderr: [asyncObjectIterable]}));
expectError(execaSync('unicorns', {stderr: [asyncObjectIterable]}));
expectError(execa('unicorns', {stdio: asyncObjectIterable}));
expectError(execaSync('unicorns', {stdio: asyncObjectIterable}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', asyncObjectIterable]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', asyncObjectIterable]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [asyncObjectIterable]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [asyncObjectIterable]]}));
expectAssignable<StdinOption>(asyncObjectIterable);
expectNotAssignable<StdinOptionSync>(asyncObjectIterable);
expectAssignable<StdinOption>([asyncObjectIterable]);
expectNotAssignable<StdinOptionSync>([asyncObjectIterable]);
expectNotAssignable<StdoutStderrOption>(asyncObjectIterable);
expectNotAssignable<StdoutStderrOptionSync>(asyncObjectIterable);
expectNotAssignable<StdoutStderrOption>([asyncObjectIterable]);
expectNotAssignable<StdoutStderrOptionSync>([asyncObjectIterable]);
expectAssignable<StdioOption>(asyncObjectIterable);
expectNotAssignable<StdioOptionSync>(asyncObjectIterable);
expectAssignable<StdioOption>([asyncObjectIterable]);
expectNotAssignable<StdioOptionSync>([asyncObjectIterable]);
execa('unicorns', {stdin: duplex});
expectError(execaSync('unicorns', {stdin: duplex}));
execa('unicorns', {stdin: [duplex]});
expectError(execaSync('unicorns', {stdin: [duplex]}));
execa('unicorns', {stdout: duplex});
expectError(execaSync('unicorns', {stdout: duplex}));
execa('unicorns', {stdout: [duplex]});
expectError(execaSync('unicorns', {stdout: [duplex]}));
execa('unicorns', {stderr: duplex});
expectError(execaSync('unicorns', {stderr: duplex}));
execa('unicorns', {stderr: [duplex]});
expectError(execaSync('unicorns', {stderr: [duplex]}));
expectError(execa('unicorns', {stdio: duplex}));
expectError(execaSync('unicorns', {stdio: duplex}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', duplex]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', duplex]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [duplex]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [duplex]]}));
expectAssignable<StdinOption>(duplex);
expectNotAssignable<StdinOptionSync>(duplex);
expectAssignable<StdinOption>([duplex]);
expectNotAssignable<StdinOptionSync>([duplex]);
expectAssignable<StdoutStderrOption>(duplex);
expectNotAssignable<StdoutStderrOptionSync>(duplex);
expectAssignable<StdoutStderrOption>([duplex]);
expectNotAssignable<StdoutStderrOptionSync>([duplex]);
expectAssignable<StdioOption>(duplex);
expectNotAssignable<StdioOptionSync>(duplex);
expectAssignable<StdioOption>([duplex]);
expectNotAssignable<StdioOptionSync>([duplex]);
execa('unicorns', {stdin: duplexTransform});
expectError(execaSync('unicorns', {stdin: duplexTransform}));
execa('unicorns', {stdin: [duplexTransform]});
expectError(execaSync('unicorns', {stdin: [duplexTransform]}));
execa('unicorns', {stdout: duplexTransform});
expectError(execaSync('unicorns', {stdout: duplexTransform}));
execa('unicorns', {stdout: [duplexTransform]});
expectError(execaSync('unicorns', {stdout: [duplexTransform]}));
execa('unicorns', {stderr: duplexTransform});
expectError(execaSync('unicorns', {stderr: duplexTransform}));
execa('unicorns', {stderr: [duplexTransform]});
expectError(execaSync('unicorns', {stderr: [duplexTransform]}));
expectError(execa('unicorns', {stdio: duplexTransform}));
expectError(execaSync('unicorns', {stdio: duplexTransform}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', duplexTransform]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', duplexTransform]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [duplexTransform]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [duplexTransform]]}));
expectAssignable<StdinOption>(duplexTransform);
expectNotAssignable<StdinOptionSync>(duplexTransform);
expectAssignable<StdinOption>([duplexTransform]);
expectNotAssignable<StdinOptionSync>([duplexTransform]);
expectAssignable<StdoutStderrOption>(duplexTransform);
expectNotAssignable<StdoutStderrOptionSync>(duplexTransform);
expectAssignable<StdoutStderrOption>([duplexTransform]);
expectNotAssignable<StdoutStderrOptionSync>([duplexTransform]);
expectAssignable<StdioOption>(duplexTransform);
expectNotAssignable<StdioOptionSync>(duplexTransform);
expectAssignable<StdioOption>([duplexTransform]);
expectNotAssignable<StdioOptionSync>([duplexTransform]);
execa('unicorns', {stdin: duplexObjectProperty});
expectError(execaSync('unicorns', {stdin: duplexObjectProperty}));
execa('unicorns', {stdin: [duplexObjectProperty]});
expectError(execaSync('unicorns', {stdin: [duplexObjectProperty]}));
execa('unicorns', {stdout: duplexObjectProperty});
expectError(execaSync('unicorns', {stdout: duplexObjectProperty}));
execa('unicorns', {stdout: [duplexObjectProperty]});
expectError(execaSync('unicorns', {stdout: [duplexObjectProperty]}));
execa('unicorns', {stderr: duplexObjectProperty});
expectError(execaSync('unicorns', {stderr: duplexObjectProperty}));
execa('unicorns', {stderr: [duplexObjectProperty]});
expectError(execaSync('unicorns', {stderr: [duplexObjectProperty]}));
expectError(execa('unicorns', {stdio: duplexObjectProperty}));
expectError(execaSync('unicorns', {stdio: duplexObjectProperty}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', duplexObjectProperty]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', duplexObjectProperty]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [duplexObjectProperty]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [duplexObjectProperty]]}));
expectAssignable<StdinOption>(duplexObjectProperty);
expectNotAssignable<StdinOptionSync>(duplexObjectProperty);
expectAssignable<StdinOption>([duplexObjectProperty]);
expectNotAssignable<StdinOptionSync>([duplexObjectProperty]);
expectAssignable<StdoutStderrOption>(duplexObjectProperty);
expectNotAssignable<StdoutStderrOptionSync>(duplexObjectProperty);
expectAssignable<StdoutStderrOption>([duplexObjectProperty]);
expectNotAssignable<StdoutStderrOptionSync>([duplexObjectProperty]);
expectAssignable<StdioOption>(duplexObjectProperty);
expectNotAssignable<StdioOptionSync>(duplexObjectProperty);
expectAssignable<StdioOption>([duplexObjectProperty]);
expectNotAssignable<StdioOptionSync>([duplexObjectProperty]);
expectError(execa('unicorns', {stdin: duplexWithInvalidObjectMode}));
expectError(execaSync('unicorns', {stdin: duplexWithInvalidObjectMode}));
expectError(execa('unicorns', {stdin: [duplexWithInvalidObjectMode]}));
expectError(execaSync('unicorns', {stdin: [duplexWithInvalidObjectMode]}));
expectError(execa('unicorns', {stdout: duplexWithInvalidObjectMode}));
expectError(execaSync('unicorns', {stdout: duplexWithInvalidObjectMode}));
expectError(execa('unicorns', {stdout: [duplexWithInvalidObjectMode]}));
expectError(execaSync('unicorns', {stdout: [duplexWithInvalidObjectMode]}));
expectError(execa('unicorns', {stderr: duplexWithInvalidObjectMode}));
expectError(execaSync('unicorns', {stderr: duplexWithInvalidObjectMode}));
expectError(execa('unicorns', {stderr: [duplexWithInvalidObjectMode]}));
expectError(execaSync('unicorns', {stderr: [duplexWithInvalidObjectMode]}));
expectError(execa('unicorns', {stdio: duplexWithInvalidObjectMode}));
expectError(execaSync('unicorns', {stdio: duplexWithInvalidObjectMode}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', duplexWithInvalidObjectMode]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', duplexWithInvalidObjectMode]}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [duplexWithInvalidObjectMode]]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [duplexWithInvalidObjectMode]]}));
expectNotAssignable<StdinOption>(duplexWithInvalidObjectMode);
expectNotAssignable<StdinOptionSync>(duplexWithInvalidObjectMode);
expectNotAssignable<StdinOption>([duplexWithInvalidObjectMode]);
expectNotAssignable<StdinOptionSync>([duplexWithInvalidObjectMode]);
expectNotAssignable<StdoutStderrOption>(duplexWithInvalidObjectMode);
expectNotAssignable<StdoutStderrOptionSync>(duplexWithInvalidObjectMode);
expectNotAssignable<StdoutStderrOption>([duplexWithInvalidObjectMode]);
expectNotAssignable<StdoutStderrOptionSync>([duplexWithInvalidObjectMode]);
expectNotAssignable<StdioOption>(duplexWithInvalidObjectMode);
expectNotAssignable<StdioOptionSync>(duplexWithInvalidObjectMode);
expectNotAssignable<StdioOption>([duplexWithInvalidObjectMode]);
expectNotAssignable<StdioOptionSync>([duplexWithInvalidObjectMode]);
execa('unicorns', {stdin: webTransformInstance});
expectError(execaSync('unicorns', {stdin: webTransformInstance}));
execa('unicorns', {stdin: [webTransformInstance]});
expectError(execaSync('unicorns', {stdin: [webTransformInstance]}));
execa('unicorns', {stdout: webTransformInstance});
expectError(execaSync('unicorns', {stdout: webTransformInstance}));
execa('unicorns', {stdout: [webTransformInstance]});
expectError(execaSync('unicorns', {stdout: [webTransformInstance]}));
execa('unicorns', {stderr: webTransformInstance});
expectError(execaSync('unicorns', {stderr: webTransformInstance}));
execa('unicorns', {stderr: [webTransformInstance]});
expectError(execaSync('unicorns', {stderr: [webTransformInstance]}));
expectError(execa('unicorns', {stdio: webTransformInstance}));
expectError(execaSync('unicorns', {stdio: webTransformInstance}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', webTransformInstance]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', webTransformInstance]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [webTransformInstance]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [webTransformInstance]]}));
expectAssignable<StdinOption>(webTransformInstance);
expectNotAssignable<StdinOptionSync>(webTransformInstance);
expectAssignable<StdinOption>([webTransformInstance]);
expectNotAssignable<StdinOptionSync>([webTransformInstance]);
expectAssignable<StdoutStderrOption>(webTransformInstance);
expectNotAssignable<StdoutStderrOptionSync>(webTransformInstance);
expectAssignable<StdoutStderrOption>([webTransformInstance]);
expectNotAssignable<StdoutStderrOptionSync>([webTransformInstance]);
expectAssignable<StdioOption>(webTransformInstance);
expectNotAssignable<StdioOptionSync>(webTransformInstance);
expectAssignable<StdioOption>([webTransformInstance]);
expectNotAssignable<StdioOptionSync>([webTransformInstance]);
execa('unicorns', {stdin: webTransform});
expectError(execaSync('unicorns', {stdin: webTransform}));
execa('unicorns', {stdin: [webTransform]});
expectError(execaSync('unicorns', {stdin: [webTransform]}));
execa('unicorns', {stdout: webTransform});
expectError(execaSync('unicorns', {stdout: webTransform}));
execa('unicorns', {stdout: [webTransform]});
expectError(execaSync('unicorns', {stdout: [webTransform]}));
execa('unicorns', {stderr: webTransform});
expectError(execaSync('unicorns', {stderr: webTransform}));
execa('unicorns', {stderr: [webTransform]});
expectError(execaSync('unicorns', {stderr: [webTransform]}));
expectError(execa('unicorns', {stdio: webTransform}));
expectError(execaSync('unicorns', {stdio: webTransform}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', webTransform]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', webTransform]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [webTransform]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [webTransform]]}));
expectAssignable<StdinOption>(webTransform);
expectNotAssignable<StdinOptionSync>(webTransform);
expectAssignable<StdinOption>([webTransform]);
expectNotAssignable<StdinOptionSync>([webTransform]);
expectAssignable<StdoutStderrOption>(webTransform);
expectNotAssignable<StdoutStderrOptionSync>(webTransform);
expectAssignable<StdoutStderrOption>([webTransform]);
expectNotAssignable<StdoutStderrOptionSync>([webTransform]);
expectAssignable<StdioOption>(webTransform);
expectNotAssignable<StdioOptionSync>(webTransform);
expectAssignable<StdioOption>([webTransform]);
expectNotAssignable<StdioOptionSync>([webTransform]);
execa('unicorns', {stdin: webTransformObject});
expectError(execaSync('unicorns', {stdin: webTransformObject}));
execa('unicorns', {stdin: [webTransformObject]});
expectError(execaSync('unicorns', {stdin: [webTransformObject]}));
execa('unicorns', {stdout: webTransformObject});
expectError(execaSync('unicorns', {stdout: webTransformObject}));
execa('unicorns', {stdout: [webTransformObject]});
expectError(execaSync('unicorns', {stdout: [webTransformObject]}));
execa('unicorns', {stderr: webTransformObject});
expectError(execaSync('unicorns', {stderr: webTransformObject}));
execa('unicorns', {stderr: [webTransformObject]});
expectError(execaSync('unicorns', {stderr: [webTransformObject]}));
expectError(execa('unicorns', {stdio: webTransformObject}));
expectError(execaSync('unicorns', {stdio: webTransformObject}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', webTransformObject]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', webTransformObject]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [webTransformObject]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [webTransformObject]]}));
expectAssignable<StdinOption>(webTransformObject);
expectNotAssignable<StdinOptionSync>(webTransformObject);
expectAssignable<StdinOption>([webTransformObject]);
expectNotAssignable<StdinOptionSync>([webTransformObject]);
expectAssignable<StdoutStderrOption>(webTransformObject);
expectNotAssignable<StdoutStderrOptionSync>(webTransformObject);
expectAssignable<StdoutStderrOption>([webTransformObject]);
expectNotAssignable<StdoutStderrOptionSync>([webTransformObject]);
expectAssignable<StdioOption>(webTransformObject);
expectNotAssignable<StdioOptionSync>(webTransformObject);
expectAssignable<StdioOption>([webTransformObject]);
expectNotAssignable<StdioOptionSync>([webTransformObject]);
expectError(execa('unicorns', {stdin: webTransformWithInvalidObjectMode}));
expectError(execaSync('unicorns', {stdin: webTransformWithInvalidObjectMode}));
expectError(execa('unicorns', {stdin: [webTransformWithInvalidObjectMode]}));
expectError(execaSync('unicorns', {stdin: [webTransformWithInvalidObjectMode]}));
expectError(execa('unicorns', {stdout: webTransformWithInvalidObjectMode}));
expectError(execaSync('unicorns', {stdout: webTransformWithInvalidObjectMode}));
expectError(execa('unicorns', {stdout: [webTransformWithInvalidObjectMode]}));
expectError(execaSync('unicorns', {stdout: [webTransformWithInvalidObjectMode]}));
expectError(execa('unicorns', {stderr: webTransformWithInvalidObjectMode}));
expectError(execaSync('unicorns', {stderr: webTransformWithInvalidObjectMode}));
expectError(execa('unicorns', {stderr: [webTransformWithInvalidObjectMode]}));
expectError(execaSync('unicorns', {stderr: [webTransformWithInvalidObjectMode]}));
expectError(execa('unicorns', {stdio: webTransformWithInvalidObjectMode}));
expectError(execaSync('unicorns', {stdio: webTransformWithInvalidObjectMode}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', webTransformWithInvalidObjectMode]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', webTransformWithInvalidObjectMode]}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [webTransformWithInvalidObjectMode]]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [webTransformWithInvalidObjectMode]]}));
expectNotAssignable<StdinOption>(webTransformWithInvalidObjectMode);
expectNotAssignable<StdinOptionSync>(webTransformWithInvalidObjectMode);
expectNotAssignable<StdinOption>([webTransformWithInvalidObjectMode]);
expectNotAssignable<StdinOptionSync>([webTransformWithInvalidObjectMode]);
expectNotAssignable<StdoutStderrOption>(webTransformWithInvalidObjectMode);
expectNotAssignable<StdoutStderrOptionSync>(webTransformWithInvalidObjectMode);
expectNotAssignable<StdoutStderrOption>([webTransformWithInvalidObjectMode]);
expectNotAssignable<StdoutStderrOptionSync>([webTransformWithInvalidObjectMode]);
expectNotAssignable<StdioOption>(webTransformWithInvalidObjectMode);
expectNotAssignable<StdioOptionSync>(webTransformWithInvalidObjectMode);
expectNotAssignable<StdioOption>([webTransformWithInvalidObjectMode]);
expectNotAssignable<StdioOptionSync>([webTransformWithInvalidObjectMode]);
execa('unicorns', {stdin: unknownGenerator});
execaSync('unicorns', {stdin: unknownGenerator});
execa('unicorns', {stdin: [unknownGenerator]});
execaSync('unicorns', {stdin: [unknownGenerator]});
execa('unicorns', {stdout: unknownGenerator});
execaSync('unicorns', {stdout: unknownGenerator});
execa('unicorns', {stdout: [unknownGenerator]});
execaSync('unicorns', {stdout: [unknownGenerator]});
execa('unicorns', {stderr: unknownGenerator});
execaSync('unicorns', {stderr: unknownGenerator});
execa('unicorns', {stderr: [unknownGenerator]});
execaSync('unicorns', {stderr: [unknownGenerator]});
expectError(execa('unicorns', {stdio: unknownGenerator}));
expectError(execaSync('unicorns', {stdio: unknownGenerator}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', unknownGenerator]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', unknownGenerator]});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [unknownGenerator]]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [unknownGenerator]]});
expectAssignable<StdinOption>(unknownGenerator);
expectAssignable<StdinOptionSync>(unknownGenerator);
expectAssignable<StdinOption>([unknownGenerator]);
expectAssignable<StdinOptionSync>([unknownGenerator]);
expectAssignable<StdoutStderrOption>(unknownGenerator);
expectAssignable<StdoutStderrOptionSync>(unknownGenerator);
expectAssignable<StdoutStderrOption>([unknownGenerator]);
expectAssignable<StdoutStderrOptionSync>([unknownGenerator]);
expectAssignable<StdioOption>(unknownGenerator);
expectAssignable<StdioOptionSync>(unknownGenerator);
expectAssignable<StdioOption>([unknownGenerator]);
expectAssignable<StdioOptionSync>([unknownGenerator]);
execa('unicorns', {stdin: unknownGeneratorFull});
execaSync('unicorns', {stdin: unknownGeneratorFull});
execa('unicorns', {stdin: [unknownGeneratorFull]});
execaSync('unicorns', {stdin: [unknownGeneratorFull]});
execa('unicorns', {stdout: unknownGeneratorFull});
execaSync('unicorns', {stdout: unknownGeneratorFull});
execa('unicorns', {stdout: [unknownGeneratorFull]});
execaSync('unicorns', {stdout: [unknownGeneratorFull]});
execa('unicorns', {stderr: unknownGeneratorFull});
execaSync('unicorns', {stderr: unknownGeneratorFull});
execa('unicorns', {stderr: [unknownGeneratorFull]});
execaSync('unicorns', {stderr: [unknownGeneratorFull]});
expectError(execa('unicorns', {stdio: unknownGeneratorFull}));
expectError(execaSync('unicorns', {stdio: unknownGeneratorFull}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', unknownGeneratorFull]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', unknownGeneratorFull]});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [unknownGeneratorFull]]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [unknownGeneratorFull]]});
expectAssignable<StdinOption>(unknownGeneratorFull);
expectAssignable<StdinOptionSync>(unknownGeneratorFull);
expectAssignable<StdinOption>([unknownGeneratorFull]);
expectAssignable<StdinOptionSync>([unknownGeneratorFull]);
expectAssignable<StdoutStderrOption>(unknownGeneratorFull);
expectAssignable<StdoutStderrOptionSync>(unknownGeneratorFull);
expectAssignable<StdoutStderrOption>([unknownGeneratorFull]);
expectAssignable<StdoutStderrOptionSync>([unknownGeneratorFull]);
expectAssignable<StdioOption>(unknownGeneratorFull);
expectAssignable<StdioOptionSync>(unknownGeneratorFull);
expectAssignable<StdioOption>([unknownGeneratorFull]);
expectAssignable<StdioOptionSync>([unknownGeneratorFull]);
execa('unicorns', {stdin: unknownFinalFull});
execaSync('unicorns', {stdin: unknownFinalFull});
execa('unicorns', {stdin: [unknownFinalFull]});
execaSync('unicorns', {stdin: [unknownFinalFull]});
execa('unicorns', {stdout: unknownFinalFull});
execaSync('unicorns', {stdout: unknownFinalFull});
execa('unicorns', {stdout: [unknownFinalFull]});
execaSync('unicorns', {stdout: [unknownFinalFull]});
execa('unicorns', {stderr: unknownFinalFull});
execaSync('unicorns', {stderr: unknownFinalFull});
execa('unicorns', {stderr: [unknownFinalFull]});
execaSync('unicorns', {stderr: [unknownFinalFull]});
expectError(execa('unicorns', {stdio: unknownFinalFull}));
expectError(execaSync('unicorns', {stdio: unknownFinalFull}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', unknownFinalFull]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', unknownFinalFull]});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [unknownFinalFull]]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [unknownFinalFull]]});
expectAssignable<StdinOption>(unknownFinalFull);
expectAssignable<StdinOptionSync>(unknownFinalFull);
expectAssignable<StdinOption>([unknownFinalFull]);
expectAssignable<StdinOptionSync>([unknownFinalFull]);
expectAssignable<StdoutStderrOption>(unknownFinalFull);
expectAssignable<StdoutStderrOptionSync>(unknownFinalFull);
expectAssignable<StdoutStderrOption>([unknownFinalFull]);
expectAssignable<StdoutStderrOptionSync>([unknownFinalFull]);
expectAssignable<StdioOption>(unknownFinalFull);
expectAssignable<StdioOptionSync>(unknownFinalFull);
expectAssignable<StdioOption>([unknownFinalFull]);
expectAssignable<StdioOptionSync>([unknownFinalFull]);
execa('unicorns', {stdin: objectGenerator});
execaSync('unicorns', {stdin: objectGenerator});
execa('unicorns', {stdin: [objectGenerator]});
execaSync('unicorns', {stdin: [objectGenerator]});
execa('unicorns', {stdout: objectGenerator});
execaSync('unicorns', {stdout: objectGenerator});
execa('unicorns', {stdout: [objectGenerator]});
execaSync('unicorns', {stdout: [objectGenerator]});
execa('unicorns', {stderr: objectGenerator});
execaSync('unicorns', {stderr: objectGenerator});
execa('unicorns', {stderr: [objectGenerator]});
execaSync('unicorns', {stderr: [objectGenerator]});
expectError(execa('unicorns', {stdio: objectGenerator}));
expectError(execaSync('unicorns', {stdio: objectGenerator}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', objectGenerator]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', objectGenerator]});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [objectGenerator]]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [objectGenerator]]});
expectAssignable<StdinOption>(objectGenerator);
expectAssignable<StdinOptionSync>(objectGenerator);
expectAssignable<StdinOption>([objectGenerator]);
expectAssignable<StdinOptionSync>([objectGenerator]);
expectAssignable<StdoutStderrOption>(objectGenerator);
expectAssignable<StdoutStderrOptionSync>(objectGenerator);
expectAssignable<StdoutStderrOption>([objectGenerator]);
expectAssignable<StdoutStderrOptionSync>([objectGenerator]);
expectAssignable<StdioOption>(objectGenerator);
expectAssignable<StdioOptionSync>(objectGenerator);
expectAssignable<StdioOption>([objectGenerator]);
expectAssignable<StdioOptionSync>([objectGenerator]);
execa('unicorns', {stdin: objectGeneratorFull});
execaSync('unicorns', {stdin: objectGeneratorFull});
execa('unicorns', {stdin: [objectGeneratorFull]});
execaSync('unicorns', {stdin: [objectGeneratorFull]});
execa('unicorns', {stdout: objectGeneratorFull});
execaSync('unicorns', {stdout: objectGeneratorFull});
execa('unicorns', {stdout: [objectGeneratorFull]});
execaSync('unicorns', {stdout: [objectGeneratorFull]});
execa('unicorns', {stderr: objectGeneratorFull});
execaSync('unicorns', {stderr: objectGeneratorFull});
execa('unicorns', {stderr: [objectGeneratorFull]});
execaSync('unicorns', {stderr: [objectGeneratorFull]});
expectError(execa('unicorns', {stdio: objectGeneratorFull}));
expectError(execaSync('unicorns', {stdio: objectGeneratorFull}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', objectGeneratorFull]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', objectGeneratorFull]});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [objectGeneratorFull]]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [objectGeneratorFull]]});
expectAssignable<StdinOption>(objectGeneratorFull);
expectAssignable<StdinOptionSync>(objectGeneratorFull);
expectAssignable<StdinOption>([objectGeneratorFull]);
expectAssignable<StdinOptionSync>([objectGeneratorFull]);
expectAssignable<StdoutStderrOption>(objectGeneratorFull);
expectAssignable<StdoutStderrOptionSync>(objectGeneratorFull);
expectAssignable<StdoutStderrOption>([objectGeneratorFull]);
expectAssignable<StdoutStderrOptionSync>([objectGeneratorFull]);
expectAssignable<StdioOption>(objectGeneratorFull);
expectAssignable<StdioOptionSync>(objectGeneratorFull);
expectAssignable<StdioOption>([objectGeneratorFull]);
expectAssignable<StdioOptionSync>([objectGeneratorFull]);
execa('unicorns', {stdin: objectFinalFull});
execaSync('unicorns', {stdin: objectFinalFull});
execa('unicorns', {stdin: [objectFinalFull]});
execaSync('unicorns', {stdin: [objectFinalFull]});
execa('unicorns', {stdout: objectFinalFull});
execaSync('unicorns', {stdout: objectFinalFull});
execa('unicorns', {stdout: [objectFinalFull]});
execaSync('unicorns', {stdout: [objectFinalFull]});
execa('unicorns', {stderr: objectFinalFull});
execaSync('unicorns', {stderr: objectFinalFull});
execa('unicorns', {stderr: [objectFinalFull]});
execaSync('unicorns', {stderr: [objectFinalFull]});
expectError(execa('unicorns', {stdio: objectFinalFull}));
expectError(execaSync('unicorns', {stdio: objectFinalFull}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', objectFinalFull]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', objectFinalFull]});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [objectFinalFull]]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [objectFinalFull]]});
expectAssignable<StdinOption>(objectFinalFull);
expectAssignable<StdinOptionSync>(objectFinalFull);
expectAssignable<StdinOption>([objectFinalFull]);
expectAssignable<StdinOptionSync>([objectFinalFull]);
expectAssignable<StdoutStderrOption>(objectFinalFull);
expectAssignable<StdoutStderrOptionSync>(objectFinalFull);
expectAssignable<StdoutStderrOption>([objectFinalFull]);
expectAssignable<StdoutStderrOptionSync>([objectFinalFull]);
expectAssignable<StdioOption>(objectFinalFull);
expectAssignable<StdioOptionSync>(objectFinalFull);
expectAssignable<StdioOption>([objectFinalFull]);
expectAssignable<StdioOptionSync>([objectFinalFull]);
expectError(execa('unicorns', {stdin: booleanGenerator}));
expectError(execaSync('unicorns', {stdin: booleanGenerator}));
expectError(execa('unicorns', {stdin: [booleanGenerator]}));
expectError(execaSync('unicorns', {stdin: [booleanGenerator]}));
expectError(execa('unicorns', {stdout: booleanGenerator}));
expectError(execaSync('unicorns', {stdout: booleanGenerator}));
expectError(execa('unicorns', {stdout: [booleanGenerator]}));
expectError(execaSync('unicorns', {stdout: [booleanGenerator]}));
expectError(execa('unicorns', {stderr: booleanGenerator}));
expectError(execaSync('unicorns', {stderr: booleanGenerator}));
expectError(execa('unicorns', {stderr: [booleanGenerator]}));
expectError(execaSync('unicorns', {stderr: [booleanGenerator]}));
expectError(execa('unicorns', {stdio: booleanGenerator}));
expectError(execaSync('unicorns', {stdio: booleanGenerator}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', booleanGenerator]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', booleanGenerator]}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [booleanGenerator]]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [booleanGenerator]]}));
expectNotAssignable<StdinOption>(booleanGenerator);
expectNotAssignable<StdinOptionSync>(booleanGenerator);
expectNotAssignable<StdinOption>([booleanGenerator]);
expectNotAssignable<StdinOptionSync>([booleanGenerator]);
expectNotAssignable<StdoutStderrOption>(booleanGenerator);
expectNotAssignable<StdoutStderrOptionSync>(booleanGenerator);
expectNotAssignable<StdoutStderrOption>([booleanGenerator]);
expectNotAssignable<StdoutStderrOptionSync>([booleanGenerator]);
expectNotAssignable<StdioOption>(booleanGenerator);
expectNotAssignable<StdioOptionSync>(booleanGenerator);
expectNotAssignable<StdioOption>([booleanGenerator]);
expectNotAssignable<StdioOptionSync>([booleanGenerator]);
expectError(execa('unicorns', {stdin: booleanGeneratorFull}));
expectError(execaSync('unicorns', {stdin: booleanGeneratorFull}));
expectError(execa('unicorns', {stdin: [booleanGeneratorFull]}));
expectError(execaSync('unicorns', {stdin: [booleanGeneratorFull]}));
expectError(execa('unicorns', {stdout: booleanGeneratorFull}));
expectError(execaSync('unicorns', {stdout: booleanGeneratorFull}));
expectError(execa('unicorns', {stdout: [booleanGeneratorFull]}));
expectError(execaSync('unicorns', {stdout: [booleanGeneratorFull]}));
expectError(execa('unicorns', {stderr: booleanGeneratorFull}));
expectError(execaSync('unicorns', {stderr: booleanGeneratorFull}));
expectError(execa('unicorns', {stderr: [booleanGeneratorFull]}));
expectError(execaSync('unicorns', {stderr: [booleanGeneratorFull]}));
expectError(execa('unicorns', {stdio: booleanGeneratorFull}));
expectError(execaSync('unicorns', {stdio: booleanGeneratorFull}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', booleanGeneratorFull]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', booleanGeneratorFull]}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [booleanGeneratorFull]]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [booleanGeneratorFull]]}));
expectNotAssignable<StdinOption>(booleanGeneratorFull);
expectNotAssignable<StdinOptionSync>(booleanGeneratorFull);
expectNotAssignable<StdinOption>([booleanGeneratorFull]);
expectNotAssignable<StdinOptionSync>([booleanGeneratorFull]);
expectNotAssignable<StdoutStderrOption>(booleanGeneratorFull);
expectNotAssignable<StdoutStderrOptionSync>(booleanGeneratorFull);
expectNotAssignable<StdoutStderrOption>([booleanGeneratorFull]);
expectNotAssignable<StdoutStderrOptionSync>([booleanGeneratorFull]);
expectNotAssignable<StdioOption>(booleanGeneratorFull);
expectNotAssignable<StdioOptionSync>(booleanGeneratorFull);
expectNotAssignable<StdioOption>([booleanGeneratorFull]);
expectNotAssignable<StdioOptionSync>([booleanGeneratorFull]);
expectError(execa('unicorns', {stdin: stringGenerator}));
expectError(execaSync('unicorns', {stdin: stringGenerator}));
expectError(execa('unicorns', {stdin: [stringGenerator]}));
expectError(execaSync('unicorns', {stdin: [stringGenerator]}));
expectError(execa('unicorns', {stdout: stringGenerator}));
expectError(execaSync('unicorns', {stdout: stringGenerator}));
expectError(execa('unicorns', {stdout: [stringGenerator]}));
expectError(execaSync('unicorns', {stdout: [stringGenerator]}));
expectError(execa('unicorns', {stderr: stringGenerator}));
expectError(execaSync('unicorns', {stderr: stringGenerator}));
expectError(execa('unicorns', {stderr: [stringGenerator]}));
expectError(execaSync('unicorns', {stderr: [stringGenerator]}));
expectError(execa('unicorns', {stdio: stringGenerator}));
expectError(execaSync('unicorns', {stdio: stringGenerator}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', stringGenerator]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', stringGenerator]}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [stringGenerator]]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [stringGenerator]]}));
expectNotAssignable<StdinOption>(stringGenerator);
expectNotAssignable<StdinOptionSync>(stringGenerator);
expectNotAssignable<StdinOption>([stringGenerator]);
expectNotAssignable<StdinOptionSync>([stringGenerator]);
expectNotAssignable<StdoutStderrOption>(stringGenerator);
expectNotAssignable<StdoutStderrOptionSync>(stringGenerator);
expectNotAssignable<StdoutStderrOption>([stringGenerator]);
expectNotAssignable<StdoutStderrOptionSync>([stringGenerator]);
expectNotAssignable<StdioOption>(stringGenerator);
expectNotAssignable<StdioOptionSync>(stringGenerator);
expectNotAssignable<StdioOption>([stringGenerator]);
expectNotAssignable<StdioOptionSync>([stringGenerator]);
expectError(execa('unicorns', {stdin: stringGeneratorFull}));
expectError(execaSync('unicorns', {stdin: stringGeneratorFull}));
expectError(execa('unicorns', {stdin: [stringGeneratorFull]}));
expectError(execaSync('unicorns', {stdin: [stringGeneratorFull]}));
expectError(execa('unicorns', {stdout: stringGeneratorFull}));
expectError(execaSync('unicorns', {stdout: stringGeneratorFull}));
expectError(execa('unicorns', {stdout: [stringGeneratorFull]}));
expectError(execaSync('unicorns', {stdout: [stringGeneratorFull]}));
expectError(execa('unicorns', {stderr: stringGeneratorFull}));
expectError(execaSync('unicorns', {stderr: stringGeneratorFull}));
expectError(execa('unicorns', {stderr: [stringGeneratorFull]}));
expectError(execaSync('unicorns', {stderr: [stringGeneratorFull]}));
expectError(execa('unicorns', {stdio: stringGeneratorFull}));
expectError(execaSync('unicorns', {stdio: stringGeneratorFull}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', stringGeneratorFull]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', stringGeneratorFull]}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [stringGeneratorFull]]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [stringGeneratorFull]]}));
expectNotAssignable<StdinOption>(stringGeneratorFull);
expectNotAssignable<StdinOptionSync>(stringGeneratorFull);
expectNotAssignable<StdinOption>([stringGeneratorFull]);
expectNotAssignable<StdinOptionSync>([stringGeneratorFull]);
expectNotAssignable<StdoutStderrOption>(stringGeneratorFull);
expectNotAssignable<StdoutStderrOptionSync>(stringGeneratorFull);
expectNotAssignable<StdoutStderrOption>([stringGeneratorFull]);
expectNotAssignable<StdoutStderrOptionSync>([stringGeneratorFull]);
expectNotAssignable<StdioOption>(stringGeneratorFull);
expectNotAssignable<StdioOptionSync>(stringGeneratorFull);
expectNotAssignable<StdioOption>([stringGeneratorFull]);
expectNotAssignable<StdioOptionSync>([stringGeneratorFull]);
expectError(execa('unicorns', {stdin: invalidReturnGenerator}));
expectError(execaSync('unicorns', {stdin: invalidReturnGenerator}));
expectError(execa('unicorns', {stdin: [invalidReturnGenerator]}));
expectError(execaSync('unicorns', {stdin: [invalidReturnGenerator]}));
expectError(execa('unicorns', {stdout: invalidReturnGenerator}));
expectError(execaSync('unicorns', {stdout: invalidReturnGenerator}));
expectError(execa('unicorns', {stdout: [invalidReturnGenerator]}));
expectError(execaSync('unicorns', {stdout: [invalidReturnGenerator]}));
expectError(execa('unicorns', {stderr: invalidReturnGenerator}));
expectError(execaSync('unicorns', {stderr: invalidReturnGenerator}));
expectError(execa('unicorns', {stderr: [invalidReturnGenerator]}));
expectError(execaSync('unicorns', {stderr: [invalidReturnGenerator]}));
expectError(execa('unicorns', {stdio: invalidReturnGenerator}));
expectError(execaSync('unicorns', {stdio: invalidReturnGenerator}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', invalidReturnGenerator]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', invalidReturnGenerator]}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [invalidReturnGenerator]]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [invalidReturnGenerator]]}));
expectNotAssignable<StdinOption>(invalidReturnGenerator);
expectNotAssignable<StdinOptionSync>(invalidReturnGenerator);
expectNotAssignable<StdinOption>([invalidReturnGenerator]);
expectNotAssignable<StdinOptionSync>([invalidReturnGenerator]);
expectNotAssignable<StdoutStderrOption>(invalidReturnGenerator);
expectNotAssignable<StdoutStderrOptionSync>(invalidReturnGenerator);
expectNotAssignable<StdoutStderrOption>([invalidReturnGenerator]);
expectNotAssignable<StdoutStderrOptionSync>([invalidReturnGenerator]);
expectNotAssignable<StdioOption>(invalidReturnGenerator);
expectNotAssignable<StdioOptionSync>(invalidReturnGenerator);
expectNotAssignable<StdioOption>([invalidReturnGenerator]);
expectNotAssignable<StdioOptionSync>([invalidReturnGenerator]);
expectError(execa('unicorns', {stdin: invalidReturnGeneratorFull}));
expectError(execaSync('unicorns', {stdin: invalidReturnGeneratorFull}));
expectError(execa('unicorns', {stdin: [invalidReturnGeneratorFull]}));
expectError(execaSync('unicorns', {stdin: [invalidReturnGeneratorFull]}));
expectError(execa('unicorns', {stdout: invalidReturnGeneratorFull}));
expectError(execaSync('unicorns', {stdout: invalidReturnGeneratorFull}));
expectError(execa('unicorns', {stdout: [invalidReturnGeneratorFull]}));
expectError(execaSync('unicorns', {stdout: [invalidReturnGeneratorFull]}));
expectError(execa('unicorns', {stderr: invalidReturnGeneratorFull}));
expectError(execaSync('unicorns', {stderr: invalidReturnGeneratorFull}));
expectError(execa('unicorns', {stderr: [invalidReturnGeneratorFull]}));
expectError(execaSync('unicorns', {stderr: [invalidReturnGeneratorFull]}));
expectError(execa('unicorns', {stdio: invalidReturnGeneratorFull}));
expectError(execaSync('unicorns', {stdio: invalidReturnGeneratorFull}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', invalidReturnGeneratorFull]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', invalidReturnGeneratorFull]}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [invalidReturnGeneratorFull]]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [invalidReturnGeneratorFull]]}));
expectNotAssignable<StdinOption>(invalidReturnGeneratorFull);
expectNotAssignable<StdinOptionSync>(invalidReturnGeneratorFull);
expectNotAssignable<StdinOption>([invalidReturnGeneratorFull]);
expectNotAssignable<StdinOptionSync>([invalidReturnGeneratorFull]);
expectNotAssignable<StdoutStderrOption>(invalidReturnGeneratorFull);
expectNotAssignable<StdoutStderrOptionSync>(invalidReturnGeneratorFull);
expectNotAssignable<StdoutStderrOption>([invalidReturnGeneratorFull]);
expectNotAssignable<StdoutStderrOptionSync>([invalidReturnGeneratorFull]);
expectNotAssignable<StdioOption>(invalidReturnGeneratorFull);
expectNotAssignable<StdioOptionSync>(invalidReturnGeneratorFull);
expectNotAssignable<StdioOption>([invalidReturnGeneratorFull]);
expectNotAssignable<StdioOptionSync>([invalidReturnGeneratorFull]);
execa('unicorns', {stdin: asyncGenerator});
expectError(execaSync('unicorns', {stdin: asyncGenerator}));
execa('unicorns', {stdin: [asyncGenerator]});
expectError(execaSync('unicorns', {stdin: [asyncGenerator]}));
execa('unicorns', {stdout: asyncGenerator});
expectError(execaSync('unicorns', {stdout: asyncGenerator}));
execa('unicorns', {stdout: [asyncGenerator]});
expectError(execaSync('unicorns', {stdout: [asyncGenerator]}));
execa('unicorns', {stderr: asyncGenerator});
expectError(execaSync('unicorns', {stderr: asyncGenerator}));
execa('unicorns', {stderr: [asyncGenerator]});
expectError(execaSync('unicorns', {stderr: [asyncGenerator]}));
expectError(execa('unicorns', {stdio: asyncGenerator}));
expectError(execaSync('unicorns', {stdio: asyncGenerator}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', asyncGenerator]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', asyncGenerator]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [asyncGenerator]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [asyncGenerator]]}));
expectAssignable<StdinOption>(asyncGenerator);
expectNotAssignable<StdinOptionSync>(asyncGenerator);
expectAssignable<StdinOption>([asyncGenerator]);
expectNotAssignable<StdinOptionSync>([asyncGenerator]);
expectAssignable<StdoutStderrOption>(asyncGenerator);
expectNotAssignable<StdoutStderrOptionSync>(asyncGenerator);
expectAssignable<StdoutStderrOption>([asyncGenerator]);
expectNotAssignable<StdoutStderrOptionSync>([asyncGenerator]);
expectAssignable<StdioOption>(asyncGenerator);
expectNotAssignable<StdioOptionSync>(asyncGenerator);
expectAssignable<StdioOption>([asyncGenerator]);
expectNotAssignable<StdioOptionSync>([asyncGenerator]);
execa('unicorns', {stdin: asyncGeneratorFull});
expectError(execaSync('unicorns', {stdin: asyncGeneratorFull}));
execa('unicorns', {stdin: [asyncGeneratorFull]});
expectError(execaSync('unicorns', {stdin: [asyncGeneratorFull]}));
execa('unicorns', {stdout: asyncGeneratorFull});
expectError(execaSync('unicorns', {stdout: asyncGeneratorFull}));
execa('unicorns', {stdout: [asyncGeneratorFull]});
expectError(execaSync('unicorns', {stdout: [asyncGeneratorFull]}));
execa('unicorns', {stderr: asyncGeneratorFull});
expectError(execaSync('unicorns', {stderr: asyncGeneratorFull}));
execa('unicorns', {stderr: [asyncGeneratorFull]});
expectError(execaSync('unicorns', {stderr: [asyncGeneratorFull]}));
expectError(execa('unicorns', {stdio: asyncGeneratorFull}));
expectError(execaSync('unicorns', {stdio: asyncGeneratorFull}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', asyncGeneratorFull]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', asyncGeneratorFull]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [asyncGeneratorFull]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [asyncGeneratorFull]]}));
expectAssignable<StdinOption>(asyncGeneratorFull);
expectNotAssignable<StdinOptionSync>(asyncGeneratorFull);
expectAssignable<StdinOption>([asyncGeneratorFull]);
expectNotAssignable<StdinOptionSync>([asyncGeneratorFull]);
expectAssignable<StdoutStderrOption>(asyncGeneratorFull);
expectNotAssignable<StdoutStderrOptionSync>(asyncGeneratorFull);
expectAssignable<StdoutStderrOption>([asyncGeneratorFull]);
expectNotAssignable<StdoutStderrOptionSync>([asyncGeneratorFull]);
expectAssignable<StdioOption>(asyncGeneratorFull);
expectNotAssignable<StdioOptionSync>(asyncGeneratorFull);
expectAssignable<StdioOption>([asyncGeneratorFull]);
expectNotAssignable<StdioOptionSync>([asyncGeneratorFull]);
execa('unicorns', {stdin: asyncFinalFull});
expectError(execaSync('unicorns', {stdin: asyncFinalFull}));
execa('unicorns', {stdin: [asyncFinalFull]});
expectError(execaSync('unicorns', {stdin: [asyncFinalFull]}));
execa('unicorns', {stdout: asyncFinalFull});
expectError(execaSync('unicorns', {stdout: asyncFinalFull}));
execa('unicorns', {stdout: [asyncFinalFull]});
expectError(execaSync('unicorns', {stdout: [asyncFinalFull]}));
execa('unicorns', {stderr: asyncFinalFull});
expectError(execaSync('unicorns', {stderr: asyncFinalFull}));
execa('unicorns', {stderr: [asyncFinalFull]});
expectError(execaSync('unicorns', {stderr: [asyncFinalFull]}));
expectError(execa('unicorns', {stdio: asyncFinalFull}));
expectError(execaSync('unicorns', {stdio: asyncFinalFull}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', asyncFinalFull]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', asyncFinalFull]}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [asyncFinalFull]]});
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [asyncFinalFull]]}));
expectAssignable<StdinOption>(asyncFinalFull);
expectNotAssignable<StdinOptionSync>(asyncFinalFull);
expectAssignable<StdinOption>([asyncFinalFull]);
expectNotAssignable<StdinOptionSync>([asyncFinalFull]);
expectAssignable<StdoutStderrOption>(asyncFinalFull);
expectNotAssignable<StdoutStderrOptionSync>(asyncFinalFull);
expectAssignable<StdoutStderrOption>([asyncFinalFull]);
expectNotAssignable<StdoutStderrOptionSync>([asyncFinalFull]);
expectAssignable<StdioOption>(asyncFinalFull);
expectNotAssignable<StdioOptionSync>(asyncFinalFull);
expectAssignable<StdioOption>([asyncFinalFull]);
expectNotAssignable<StdioOptionSync>([asyncFinalFull]);
expectError(execa('unicorns', {stdin: invalidReturnFinalFull}));
expectError(execaSync('unicorns', {stdin: invalidReturnFinalFull}));
expectError(execa('unicorns', {stdin: [invalidReturnFinalFull]}));
expectError(execaSync('unicorns', {stdin: [invalidReturnFinalFull]}));
expectError(execa('unicorns', {stdout: invalidReturnFinalFull}));
expectError(execaSync('unicorns', {stdout: invalidReturnFinalFull}));
expectError(execa('unicorns', {stdout: [invalidReturnFinalFull]}));
expectError(execaSync('unicorns', {stdout: [invalidReturnFinalFull]}));
expectError(execa('unicorns', {stderr: invalidReturnFinalFull}));
expectError(execaSync('unicorns', {stderr: invalidReturnFinalFull}));
expectError(execa('unicorns', {stderr: [invalidReturnFinalFull]}));
expectError(execaSync('unicorns', {stderr: [invalidReturnFinalFull]}));
expectError(execa('unicorns', {stdio: invalidReturnFinalFull}));
expectError(execaSync('unicorns', {stdio: invalidReturnFinalFull}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', invalidReturnFinalFull]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', invalidReturnFinalFull]}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [invalidReturnFinalFull]]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [invalidReturnFinalFull]]}));
expectNotAssignable<StdinOption>(invalidReturnFinalFull);
expectNotAssignable<StdinOptionSync>(invalidReturnFinalFull);
expectNotAssignable<StdinOption>([invalidReturnFinalFull]);
expectNotAssignable<StdinOptionSync>([invalidReturnFinalFull]);
expectNotAssignable<StdoutStderrOption>(invalidReturnFinalFull);
expectNotAssignable<StdoutStderrOptionSync>(invalidReturnFinalFull);
expectNotAssignable<StdoutStderrOption>([invalidReturnFinalFull]);
expectNotAssignable<StdoutStderrOptionSync>([invalidReturnFinalFull]);
expectNotAssignable<StdioOption>(invalidReturnFinalFull);
expectNotAssignable<StdioOptionSync>(invalidReturnFinalFull);
expectNotAssignable<StdioOption>([invalidReturnFinalFull]);
expectNotAssignable<StdioOptionSync>([invalidReturnFinalFull]);
execa('unicorns', {stdin: transformWithBinary});
execaSync('unicorns', {stdin: transformWithBinary});
execa('unicorns', {stdin: [transformWithBinary]});
execaSync('unicorns', {stdin: [transformWithBinary]});
execa('unicorns', {stdout: transformWithBinary});
execaSync('unicorns', {stdout: transformWithBinary});
execa('unicorns', {stdout: [transformWithBinary]});
execaSync('unicorns', {stdout: [transformWithBinary]});
execa('unicorns', {stderr: transformWithBinary});
execaSync('unicorns', {stderr: transformWithBinary});
execa('unicorns', {stderr: [transformWithBinary]});
execaSync('unicorns', {stderr: [transformWithBinary]});
expectError(execa('unicorns', {stdio: transformWithBinary}));
expectError(execaSync('unicorns', {stdio: transformWithBinary}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', transformWithBinary]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', transformWithBinary]});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [transformWithBinary]]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [transformWithBinary]]});
expectAssignable<StdinOption>(transformWithBinary);
expectAssignable<StdinOptionSync>(transformWithBinary);
expectAssignable<StdinOption>([transformWithBinary]);
expectAssignable<StdinOptionSync>([transformWithBinary]);
expectAssignable<StdoutStderrOption>(transformWithBinary);
expectAssignable<StdoutStderrOptionSync>(transformWithBinary);
expectAssignable<StdoutStderrOption>([transformWithBinary]);
expectAssignable<StdoutStderrOptionSync>([transformWithBinary]);
expectAssignable<StdioOption>(transformWithBinary);
expectAssignable<StdioOptionSync>(transformWithBinary);
expectAssignable<StdioOption>([transformWithBinary]);
expectAssignable<StdioOptionSync>([transformWithBinary]);
expectError(execa('unicorns', {stdin: transformWithInvalidBinary}));
expectError(execaSync('unicorns', {stdin: transformWithInvalidBinary}));
expectError(execa('unicorns', {stdin: [transformWithInvalidBinary]}));
expectError(execaSync('unicorns', {stdin: [transformWithInvalidBinary]}));
expectError(execa('unicorns', {stdout: transformWithInvalidBinary}));
expectError(execaSync('unicorns', {stdout: transformWithInvalidBinary}));
expectError(execa('unicorns', {stdout: [transformWithInvalidBinary]}));
expectError(execaSync('unicorns', {stdout: [transformWithInvalidBinary]}));
expectError(execa('unicorns', {stderr: transformWithInvalidBinary}));
expectError(execaSync('unicorns', {stderr: transformWithInvalidBinary}));
expectError(execa('unicorns', {stderr: [transformWithInvalidBinary]}));
expectError(execaSync('unicorns', {stderr: [transformWithInvalidBinary]}));
expectError(execa('unicorns', {stdio: transformWithInvalidBinary}));
expectError(execaSync('unicorns', {stdio: transformWithInvalidBinary}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', transformWithInvalidBinary]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', transformWithInvalidBinary]}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [transformWithInvalidBinary]]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [transformWithInvalidBinary]]}));
expectNotAssignable<StdinOption>(transformWithInvalidBinary);
expectNotAssignable<StdinOptionSync>(transformWithInvalidBinary);
expectNotAssignable<StdinOption>([transformWithInvalidBinary]);
expectNotAssignable<StdinOptionSync>([transformWithInvalidBinary]);
expectNotAssignable<StdoutStderrOption>(transformWithInvalidBinary);
expectNotAssignable<StdoutStderrOptionSync>(transformWithInvalidBinary);
expectNotAssignable<StdoutStderrOption>([transformWithInvalidBinary]);
expectNotAssignable<StdoutStderrOptionSync>([transformWithInvalidBinary]);
expectNotAssignable<StdioOption>(transformWithInvalidBinary);
expectNotAssignable<StdioOptionSync>(transformWithInvalidBinary);
expectNotAssignable<StdioOption>([transformWithInvalidBinary]);
expectNotAssignable<StdioOptionSync>([transformWithInvalidBinary]);
execa('unicorns', {stdin: transformWithPreserveNewlines});
execaSync('unicorns', {stdin: transformWithPreserveNewlines});
execa('unicorns', {stdin: [transformWithPreserveNewlines]});
execaSync('unicorns', {stdin: [transformWithPreserveNewlines]});
execa('unicorns', {stdout: transformWithPreserveNewlines});
execaSync('unicorns', {stdout: transformWithPreserveNewlines});
execa('unicorns', {stdout: [transformWithPreserveNewlines]});
execaSync('unicorns', {stdout: [transformWithPreserveNewlines]});
execa('unicorns', {stderr: transformWithPreserveNewlines});
execaSync('unicorns', {stderr: transformWithPreserveNewlines});
execa('unicorns', {stderr: [transformWithPreserveNewlines]});
execaSync('unicorns', {stderr: [transformWithPreserveNewlines]});
expectError(execa('unicorns', {stdio: transformWithPreserveNewlines}));
expectError(execaSync('unicorns', {stdio: transformWithPreserveNewlines}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', transformWithPreserveNewlines]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', transformWithPreserveNewlines]});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [transformWithPreserveNewlines]]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [transformWithPreserveNewlines]]});
expectAssignable<StdinOption>(transformWithPreserveNewlines);
expectAssignable<StdinOptionSync>(transformWithPreserveNewlines);
expectAssignable<StdinOption>([transformWithPreserveNewlines]);
expectAssignable<StdinOptionSync>([transformWithPreserveNewlines]);
expectAssignable<StdoutStderrOption>(transformWithPreserveNewlines);
expectAssignable<StdoutStderrOptionSync>(transformWithPreserveNewlines);
expectAssignable<StdoutStderrOption>([transformWithPreserveNewlines]);
expectAssignable<StdoutStderrOptionSync>([transformWithPreserveNewlines]);
expectAssignable<StdioOption>(transformWithPreserveNewlines);
expectAssignable<StdioOptionSync>(transformWithPreserveNewlines);
expectAssignable<StdioOption>([transformWithPreserveNewlines]);
expectAssignable<StdioOptionSync>([transformWithPreserveNewlines]);
expectError(execa('unicorns', {stdin: transformWithInvalidPreserveNewlines}));
expectError(execaSync('unicorns', {stdin: transformWithInvalidPreserveNewlines}));
expectError(execa('unicorns', {stdin: [transformWithInvalidPreserveNewlines]}));
expectError(execaSync('unicorns', {stdin: [transformWithInvalidPreserveNewlines]}));
expectError(execa('unicorns', {stdout: transformWithInvalidPreserveNewlines}));
expectError(execaSync('unicorns', {stdout: transformWithInvalidPreserveNewlines}));
expectError(execa('unicorns', {stdout: [transformWithInvalidPreserveNewlines]}));
expectError(execaSync('unicorns', {stdout: [transformWithInvalidPreserveNewlines]}));
expectError(execa('unicorns', {stderr: transformWithInvalidPreserveNewlines}));
expectError(execaSync('unicorns', {stderr: transformWithInvalidPreserveNewlines}));
expectError(execa('unicorns', {stderr: [transformWithInvalidPreserveNewlines]}));
expectError(execaSync('unicorns', {stderr: [transformWithInvalidPreserveNewlines]}));
expectError(execa('unicorns', {stdio: transformWithInvalidPreserveNewlines}));
expectError(execaSync('unicorns', {stdio: transformWithInvalidPreserveNewlines}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', transformWithInvalidPreserveNewlines]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', transformWithInvalidPreserveNewlines]}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [transformWithInvalidPreserveNewlines]]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [transformWithInvalidPreserveNewlines]]}));
expectNotAssignable<StdinOption>(transformWithInvalidPreserveNewlines);
expectNotAssignable<StdinOptionSync>(transformWithInvalidPreserveNewlines);
expectNotAssignable<StdinOption>([transformWithInvalidPreserveNewlines]);
expectNotAssignable<StdinOptionSync>([transformWithInvalidPreserveNewlines]);
expectNotAssignable<StdoutStderrOption>(transformWithInvalidPreserveNewlines);
expectNotAssignable<StdoutStderrOptionSync>(transformWithInvalidPreserveNewlines);
expectNotAssignable<StdoutStderrOption>([transformWithInvalidPreserveNewlines]);
expectNotAssignable<StdoutStderrOptionSync>([transformWithInvalidPreserveNewlines]);
expectNotAssignable<StdioOption>(transformWithInvalidPreserveNewlines);
expectNotAssignable<StdioOptionSync>(transformWithInvalidPreserveNewlines);
expectNotAssignable<StdioOption>([transformWithInvalidPreserveNewlines]);
expectNotAssignable<StdioOptionSync>([transformWithInvalidPreserveNewlines]);
execa('unicorns', {stdin: transformWithObjectMode});
execaSync('unicorns', {stdin: transformWithObjectMode});
execa('unicorns', {stdin: [transformWithObjectMode]});
execaSync('unicorns', {stdin: [transformWithObjectMode]});
execa('unicorns', {stdout: transformWithObjectMode});
execaSync('unicorns', {stdout: transformWithObjectMode});
execa('unicorns', {stdout: [transformWithObjectMode]});
execaSync('unicorns', {stdout: [transformWithObjectMode]});
execa('unicorns', {stderr: transformWithObjectMode});
execaSync('unicorns', {stderr: transformWithObjectMode});
execa('unicorns', {stderr: [transformWithObjectMode]});
execaSync('unicorns', {stderr: [transformWithObjectMode]});
expectError(execa('unicorns', {stdio: transformWithObjectMode}));
expectError(execaSync('unicorns', {stdio: transformWithObjectMode}));
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', transformWithObjectMode]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', transformWithObjectMode]});
execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [transformWithObjectMode]]});
execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [transformWithObjectMode]]});
expectAssignable<StdinOption>(transformWithObjectMode);
expectAssignable<StdinOptionSync>(transformWithObjectMode);
expectAssignable<StdinOption>([transformWithObjectMode]);
expectAssignable<StdinOptionSync>([transformWithObjectMode]);
expectAssignable<StdoutStderrOption>(transformWithObjectMode);
expectAssignable<StdoutStderrOptionSync>(transformWithObjectMode);
expectAssignable<StdoutStderrOption>([transformWithObjectMode]);
expectAssignable<StdoutStderrOptionSync>([transformWithObjectMode]);
expectAssignable<StdioOption>(transformWithObjectMode);
expectAssignable<StdioOptionSync>(transformWithObjectMode);
expectAssignable<StdioOption>([transformWithObjectMode]);
expectAssignable<StdioOptionSync>([transformWithObjectMode]);
expectError(execa('unicorns', {stdin: transformWithInvalidObjectMode}));
expectError(execaSync('unicorns', {stdin: transformWithInvalidObjectMode}));
expectError(execa('unicorns', {stdin: [transformWithInvalidObjectMode]}));
expectError(execaSync('unicorns', {stdin: [transformWithInvalidObjectMode]}));
expectError(execa('unicorns', {stdout: transformWithInvalidObjectMode}));
expectError(execaSync('unicorns', {stdout: transformWithInvalidObjectMode}));
expectError(execa('unicorns', {stdout: [transformWithInvalidObjectMode]}));
expectError(execaSync('unicorns', {stdout: [transformWithInvalidObjectMode]}));
expectError(execa('unicorns', {stderr: transformWithInvalidObjectMode}));
expectError(execaSync('unicorns', {stderr: transformWithInvalidObjectMode}));
expectError(execa('unicorns', {stderr: [transformWithInvalidObjectMode]}));
expectError(execaSync('unicorns', {stderr: [transformWithInvalidObjectMode]}));
expectError(execa('unicorns', {stdio: transformWithInvalidObjectMode}));
expectError(execaSync('unicorns', {stdio: transformWithInvalidObjectMode}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', transformWithInvalidObjectMode]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', transformWithInvalidObjectMode]}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [transformWithInvalidObjectMode]]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [transformWithInvalidObjectMode]]}));
expectNotAssignable<StdinOption>(transformWithInvalidObjectMode);
expectNotAssignable<StdinOptionSync>(transformWithInvalidObjectMode);
expectNotAssignable<StdinOption>([transformWithInvalidObjectMode]);
expectNotAssignable<StdinOptionSync>([transformWithInvalidObjectMode]);
expectNotAssignable<StdoutStderrOption>(transformWithInvalidObjectMode);
expectNotAssignable<StdoutStderrOptionSync>(transformWithInvalidObjectMode);
expectNotAssignable<StdoutStderrOption>([transformWithInvalidObjectMode]);
expectNotAssignable<StdoutStderrOptionSync>([transformWithInvalidObjectMode]);
expectNotAssignable<StdioOption>(transformWithInvalidObjectMode);
expectNotAssignable<StdioOptionSync>(transformWithInvalidObjectMode);
expectNotAssignable<StdioOption>([transformWithInvalidObjectMode]);
expectNotAssignable<StdioOptionSync>([transformWithInvalidObjectMode]);
expectError(execa('unicorns', {stdin: {}}));
expectError(execaSync('unicorns', {stdin: {}}));
expectError(execa('unicorns', {stdin: [{}]}));
expectError(execaSync('unicorns', {stdin: [{}]}));
expectError(execa('unicorns', {stdout: {}}));
expectError(execaSync('unicorns', {stdout: {}}));
expectError(execa('unicorns', {stdout: [{}]}));
expectError(execaSync('unicorns', {stdout: [{}]}));
expectError(execa('unicorns', {stderr: {}}));
expectError(execaSync('unicorns', {stderr: {}}));
expectError(execa('unicorns', {stderr: [{}]}));
expectError(execaSync('unicorns', {stderr: [{}]}));
expectError(execa('unicorns', {stdio: {}}));
expectError(execaSync('unicorns', {stdio: {}}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', {}]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', {}]}));
expectNotAssignable<StdinOption>({});
expectNotAssignable<StdinOptionSync>({});
expectNotAssignable<StdinOption>([{}]);
expectNotAssignable<StdinOptionSync>([{}]);
expectNotAssignable<StdoutStderrOption>({});
expectNotAssignable<StdoutStderrOptionSync>({});
expectNotAssignable<StdoutStderrOption>([{}]);
expectNotAssignable<StdoutStderrOptionSync>([{}]);
expectNotAssignable<StdioOption>({});
expectNotAssignable<StdioOptionSync>({});
expectNotAssignable<StdioOption>([{}]);
expectNotAssignable<StdioOptionSync>([{}]);
expectError(execa('unicorns', {stdin: binaryOnly}));
expectError(execaSync('unicorns', {stdin: binaryOnly}));
expectError(execa('unicorns', {stdin: [binaryOnly]}));
expectError(execaSync('unicorns', {stdin: [binaryOnly]}));
expectError(execa('unicorns', {stdout: binaryOnly}));
expectError(execaSync('unicorns', {stdout: binaryOnly}));
expectError(execa('unicorns', {stdout: [binaryOnly]}));
expectError(execaSync('unicorns', {stdout: [binaryOnly]}));
expectError(execa('unicorns', {stderr: binaryOnly}));
expectError(execaSync('unicorns', {stderr: binaryOnly}));
expectError(execa('unicorns', {stderr: [binaryOnly]}));
expectError(execaSync('unicorns', {stderr: [binaryOnly]}));
expectError(execa('unicorns', {stdio: binaryOnly}));
expectError(execaSync('unicorns', {stdio: binaryOnly}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', binaryOnly]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', binaryOnly]}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [binaryOnly]]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [binaryOnly]]}));
expectNotAssignable<StdinOption>(binaryOnly);
expectNotAssignable<StdinOptionSync>(binaryOnly);
expectNotAssignable<StdinOption>([binaryOnly]);
expectNotAssignable<StdinOptionSync>([binaryOnly]);
expectNotAssignable<StdoutStderrOption>(binaryOnly);
expectNotAssignable<StdoutStderrOptionSync>(binaryOnly);
expectNotAssignable<StdoutStderrOption>([binaryOnly]);
expectNotAssignable<StdoutStderrOptionSync>([binaryOnly]);
expectNotAssignable<StdioOption>(binaryOnly);
expectNotAssignable<StdioOptionSync>(binaryOnly);
expectNotAssignable<StdioOption>([binaryOnly]);
expectNotAssignable<StdioOptionSync>([binaryOnly]);
expectError(execa('unicorns', {stdin: preserveNewlinesOnly}));
expectError(execaSync('unicorns', {stdin: preserveNewlinesOnly}));
expectError(execa('unicorns', {stdin: [preserveNewlinesOnly]}));
expectError(execaSync('unicorns', {stdin: [preserveNewlinesOnly]}));
expectError(execa('unicorns', {stdout: preserveNewlinesOnly}));
expectError(execaSync('unicorns', {stdout: preserveNewlinesOnly}));
expectError(execa('unicorns', {stdout: [preserveNewlinesOnly]}));
expectError(execaSync('unicorns', {stdout: [preserveNewlinesOnly]}));
expectError(execa('unicorns', {stderr: preserveNewlinesOnly}));
expectError(execaSync('unicorns', {stderr: preserveNewlinesOnly}));
expectError(execa('unicorns', {stderr: [preserveNewlinesOnly]}));
expectError(execaSync('unicorns', {stderr: [preserveNewlinesOnly]}));
expectError(execa('unicorns', {stdio: preserveNewlinesOnly}));
expectError(execaSync('unicorns', {stdio: preserveNewlinesOnly}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', preserveNewlinesOnly]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', preserveNewlinesOnly]}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [preserveNewlinesOnly]]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [preserveNewlinesOnly]]}));
expectNotAssignable<StdinOption>(preserveNewlinesOnly);
expectNotAssignable<StdinOptionSync>(preserveNewlinesOnly);
expectNotAssignable<StdinOption>([preserveNewlinesOnly]);
expectNotAssignable<StdinOptionSync>([preserveNewlinesOnly]);
expectNotAssignable<StdoutStderrOption>(preserveNewlinesOnly);
expectNotAssignable<StdoutStderrOptionSync>(preserveNewlinesOnly);
expectNotAssignable<StdoutStderrOption>([preserveNewlinesOnly]);
expectNotAssignable<StdoutStderrOptionSync>([preserveNewlinesOnly]);
expectNotAssignable<StdioOption>(preserveNewlinesOnly);
expectNotAssignable<StdioOptionSync>(preserveNewlinesOnly);
expectNotAssignable<StdioOption>([preserveNewlinesOnly]);
expectNotAssignable<StdioOptionSync>([preserveNewlinesOnly]);
expectError(execa('unicorns', {stdin: objectModeOnly}));
expectError(execaSync('unicorns', {stdin: objectModeOnly}));
expectError(execa('unicorns', {stdin: [objectModeOnly]}));
expectError(execaSync('unicorns', {stdin: [objectModeOnly]}));
expectError(execa('unicorns', {stdout: objectModeOnly}));
expectError(execaSync('unicorns', {stdout: objectModeOnly}));
expectError(execa('unicorns', {stdout: [objectModeOnly]}));
expectError(execaSync('unicorns', {stdout: [objectModeOnly]}));
expectError(execa('unicorns', {stderr: objectModeOnly}));
expectError(execaSync('unicorns', {stderr: objectModeOnly}));
expectError(execa('unicorns', {stderr: [objectModeOnly]}));
expectError(execaSync('unicorns', {stderr: [objectModeOnly]}));
expectError(execa('unicorns', {stdio: objectModeOnly}));
expectError(execaSync('unicorns', {stdio: objectModeOnly}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', objectModeOnly]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', objectModeOnly]}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [objectModeOnly]]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [objectModeOnly]]}));
expectNotAssignable<StdinOption>(objectModeOnly);
expectNotAssignable<StdinOptionSync>(objectModeOnly);
expectNotAssignable<StdinOption>([objectModeOnly]);
expectNotAssignable<StdinOptionSync>([objectModeOnly]);
expectNotAssignable<StdoutStderrOption>(objectModeOnly);
expectNotAssignable<StdoutStderrOptionSync>(objectModeOnly);
expectNotAssignable<StdoutStderrOption>([objectModeOnly]);
expectNotAssignable<StdoutStderrOptionSync>([objectModeOnly]);
expectNotAssignable<StdioOption>(objectModeOnly);
expectNotAssignable<StdioOptionSync>(objectModeOnly);
expectNotAssignable<StdioOption>([objectModeOnly]);
expectNotAssignable<StdioOptionSync>([objectModeOnly]);
expectError(execa('unicorns', {stdin: finalOnly}));
expectError(execaSync('unicorns', {stdin: finalOnly}));
expectError(execa('unicorns', {stdin: [finalOnly]}));
expectError(execaSync('unicorns', {stdin: [finalOnly]}));
expectError(execa('unicorns', {stdout: finalOnly}));
expectError(execaSync('unicorns', {stdout: finalOnly}));
expectError(execa('unicorns', {stdout: [finalOnly]}));
expectError(execaSync('unicorns', {stdout: [finalOnly]}));
expectError(execa('unicorns', {stderr: finalOnly}));
expectError(execaSync('unicorns', {stderr: finalOnly}));
expectError(execa('unicorns', {stderr: [finalOnly]}));
expectError(execaSync('unicorns', {stderr: [finalOnly]}));
expectError(execa('unicorns', {stdio: finalOnly}));
expectError(execaSync('unicorns', {stdio: finalOnly}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', finalOnly]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', finalOnly]}));
expectError(execa('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [finalOnly]]}));
expectError(execaSync('unicorns', {stdio: ['pipe', 'pipe', 'pipe', [finalOnly]]}));
expectNotAssignable<StdinOption>(finalOnly);
expectNotAssignable<StdinOptionSync>(finalOnly);
expectNotAssignable<StdinOption>([finalOnly]);
expectNotAssignable<StdinOptionSync>([finalOnly]);
expectNotAssignable<StdoutStderrOption>(finalOnly);
expectNotAssignable<StdoutStderrOptionSync>(finalOnly);
expectNotAssignable<StdoutStderrOption>([finalOnly]);
expectNotAssignable<StdoutStderrOptionSync>([finalOnly]);
expectNotAssignable<StdioOption>(finalOnly);
expectNotAssignable<StdioOptionSync>(finalOnly);
expectNotAssignable<StdioOption>([finalOnly]);
expectNotAssignable<StdioOptionSync>([finalOnly]);

/* eslint-enable @typescript-eslint/no-floating-promises */
expectType<boolean>(execa('unicorns').kill());
execa('unicorns').kill('SIGKILL');
execa('unicorns').kill(undefined);
execa('unicorns').kill(new Error('test'));
execa('unicorns').kill('SIGKILL', new Error('test'));
execa('unicorns').kill(undefined, new Error('test'));
expectError(execa('unicorns').kill(null));
expectError(execa('unicorns').kill(0n));
expectError(execa('unicorns').kill([new Error('test')]));
expectError(execa('unicorns').kill({message: 'test'}));
expectError(execa('unicorns').kill(undefined, {}));
expectError(execa('unicorns').kill('SIGKILL', {}));
expectError(execa('unicorns').kill(null, new Error('test')));

expectError(execa());
expectError(execa(true));
expectError(execa(['unicorns', 'arg']));
expectAssignable<ExecaSubprocess>(execa('unicorns'));
expectAssignable<ExecaSubprocess>(execa(fileUrl));
expectAssignable<ExecaSubprocess>(execa('unicorns', []));
expectAssignable<ExecaSubprocess>(execa('unicorns', ['foo']));
expectAssignable<ExecaSubprocess>(execa('unicorns', {}));
expectAssignable<ExecaSubprocess>(execa('unicorns', [], {}));
expectError(execa('unicorns', 'foo'));
expectError(execa('unicorns', [true]));
expectError(execa('unicorns', [], []));
expectError(execa('unicorns', {other: true}));
expectAssignable<ExecaSubprocess>(execa`unicorns`);
expectAssignable<typeof execa>(execa({}));
expectAssignable<ExecaSubprocess>(execa({})('unicorns'));
expectAssignable<ExecaSubprocess>(execa({})`unicorns`);
expectType<ExecaResult<{}>>(await execa('unicorns'));
expectType<ExecaResult<{}>>(await execa`unicorns`);
expectAssignable<{stdout: string}>(await execa('unicorns'));
expectAssignable<{stdout: Uint8Array}>(await execa('unicorns', {encoding: 'buffer'}));
expectAssignable<{stdout: string}>(await execa('unicorns', ['foo']));
expectAssignable<{stdout: Uint8Array}>(await execa('unicorns', ['foo'], {encoding: 'buffer'}));
expectAssignable<{stdout: string}>(await execa({})('unicorns'));
expectAssignable<{stdout: Uint8Array}>(await execa({encoding: 'buffer'})('unicorns'));
expectAssignable<{stdout: Uint8Array}>(await execa({})({encoding: 'buffer'})('unicorns'));
expectAssignable<{stdout: Uint8Array}>(await execa({encoding: 'buffer'})({})('unicorns'));
expectAssignable<{stdout: string}>(await execa({})`unicorns`);
expectAssignable<{stdout: Uint8Array}>(await execa({encoding: 'buffer'})`unicorns`);
expectAssignable<{stdout: Uint8Array}>(await execa({})({encoding: 'buffer'})`unicorns`);
expectAssignable<{stdout: Uint8Array}>(await execa({encoding: 'buffer'})({})`unicorns`);
expectType<ExecaResult<{}>>(await execa`${'unicorns'}`);
expectType<ExecaResult<{}>>(await execa`unicorns ${'foo'}`);
expectType<ExecaResult<{}>>(await execa`unicorns ${'foo'} ${'bar'}`);
expectType<ExecaResult<{}>>(await execa`unicorns ${1}`);
expectType<ExecaResult<{}>>(await execa`unicorns ${stringArray}`);
expectType<ExecaResult<{}>>(await execa`unicorns ${[1, 2]}`);
expectType<ExecaResult<{}>>(await execa`unicorns ${await execa`echo foo`}`);
expectError(await execa`unicorns ${execa`echo foo`}`);
expectType<ExecaResult<{}>>(await execa`unicorns ${[await execa`echo foo`, 'bar']}`);
expectError(await execa`unicorns ${[execa`echo foo`, 'bar']}`);
expectType<ExecaResult<{}>>(await execa`unicorns ${true.toString()}`);
expectError(await execa`unicorns ${true}`);

expectError(execaSync());
expectError(execaSync(true));
expectError(execaSync(['unicorns', 'arg']));
expectType<ExecaSyncResult<{}>>(execaSync('unicorns'));
expectType<ExecaSyncResult<{}>>(execaSync(fileUrl));
expectType<ExecaSyncResult<{}>>(execaSync('unicorns', []));
expectType<ExecaSyncResult<{}>>(execaSync('unicorns', ['foo']));
expectType<ExecaSyncResult<{}>>(execaSync('unicorns', {}));
expectType<ExecaSyncResult<{}>>(execaSync('unicorns', [], {}));
expectError(execaSync('unicorns', 'foo'));
expectError(execaSync('unicorns', [true]));
expectError(execaSync('unicorns', [], []));
expectError(execaSync('unicorns', {other: true}));
expectType<ExecaSyncResult<{}>>(execaSync`unicorns`);
expectAssignable<typeof execaSync>(execaSync({}));
expectType<ExecaSyncResult<{}>>(execaSync({})('unicorns'));
expectType<ExecaSyncResult<{}>>(execaSync({})`unicorns`);
expectType<ExecaSyncResult<{}>>(execaSync('unicorns'));
expectType<ExecaSyncResult<{}>>(execaSync`unicorns`);
expectAssignable<{stdout: string}>(execaSync('unicorns'));
expectAssignable<{stdout: Uint8Array}>(execaSync('unicorns', {encoding: 'buffer'}));
expectAssignable<{stdout: string}>(execaSync('unicorns', ['foo']));
expectAssignable<{stdout: Uint8Array}>(execaSync('unicorns', ['foo'], {encoding: 'buffer'}));
expectAssignable<{stdout: string}>(execaSync({})('unicorns'));
expectAssignable<{stdout: Uint8Array}>(execaSync({encoding: 'buffer'})('unicorns'));
expectAssignable<{stdout: Uint8Array}>(execaSync({})({encoding: 'buffer'})('unicorns'));
expectAssignable<{stdout: Uint8Array}>(execaSync({encoding: 'buffer'})({})('unicorns'));
expectAssignable<{stdout: string}>(execaSync({})`unicorns`);
expectAssignable<{stdout: Uint8Array}>(execaSync({encoding: 'buffer'})`unicorns`);
expectAssignable<{stdout: Uint8Array}>(execaSync({})({encoding: 'buffer'})`unicorns`);
expectAssignable<{stdout: Uint8Array}>(execaSync({encoding: 'buffer'})({})`unicorns`);
expectType<ExecaSyncResult<{}>>(execaSync`${'unicorns'}`);
expectType<ExecaSyncResult<{}>>(execaSync`unicorns ${'foo'}`);
expectType<ExecaSyncResult<{}>>(execaSync`unicorns ${'foo'} ${'bar'}`);
expectType<ExecaSyncResult<{}>>(execaSync`unicorns ${1}`);
expectType<ExecaSyncResult<{}>>(execaSync`unicorns ${stringArray}`);
expectType<ExecaSyncResult<{}>>(execaSync`unicorns ${[1, 2]}`);
expectType<ExecaSyncResult<{}>>(execaSync`unicorns ${execaSync`echo foo`}`);
expectType<ExecaSyncResult<{}>>(execaSync`unicorns ${[execaSync`echo foo`, 'bar']}`);
expectType<ExecaSyncResult<{}>>(execaSync`unicorns ${false.toString()}`);
expectError(execaSync`unicorns ${false}`);

expectError(execaCommand());
expectError(execaCommand(true));
expectError(execaCommand(['unicorns', 'arg']));
expectAssignable<ExecaSubprocess>(execaCommand('unicorns'));
expectError(execaCommand(fileUrl));
expectError(execaCommand('unicorns', []));
expectError(execaCommand('unicorns', ['foo']));
expectAssignable<ExecaSubprocess>(execaCommand('unicorns', {}));
expectError(execaCommand('unicorns', [], {}));
expectError(execaCommand('unicorns', 'foo'));
expectError(execaCommand('unicorns', [true]));
expectError(execaCommand('unicorns', [], []));
expectError(execaCommand('unicorns', {other: true}));
expectAssignable<ExecaSubprocess>(execaCommand`unicorns`);
expectAssignable<typeof execaCommand>(execaCommand({}));
expectAssignable<ExecaSubprocess>(execaCommand({})('unicorns'));
expectAssignable<ExecaSubprocess>(execaCommand({})`unicorns`);
expectType<ExecaResult<{}>>(await execaCommand('unicorns'));
expectType<ExecaResult<{}>>(await execaCommand`unicorns`);
expectAssignable<{stdout: string}>(await execaCommand('unicorns'));
expectAssignable<{stdout: Uint8Array}>(await execaCommand('unicorns', {encoding: 'buffer'}));
expectAssignable<{stdout: string}>(await execaCommand({})('unicorns'));
expectAssignable<{stdout: Uint8Array}>(await execaCommand({encoding: 'buffer'})('unicorns'));
expectAssignable<{stdout: Uint8Array}>(await execaCommand({})({encoding: 'buffer'})('unicorns'));
expectAssignable<{stdout: Uint8Array}>(await execaCommand({encoding: 'buffer'})({})('unicorns'));
expectAssignable<{stdout: string}>(await execaCommand({})`unicorns`);
expectAssignable<{stdout: Uint8Array}>(await execaCommand({encoding: 'buffer'})`unicorns`);
expectAssignable<{stdout: Uint8Array}>(await execaCommand({})({encoding: 'buffer'})`unicorns`);
expectAssignable<{stdout: Uint8Array}>(await execaCommand({encoding: 'buffer'})({})`unicorns`);
expectType<ExecaResult<{}>>(await execaCommand`${'unicorns'}`);
expectType<ExecaResult<{}>>(await execaCommand`unicorns ${'foo'}`);
expectError(await execaCommand`unicorns ${'foo'} ${'bar'}`);
expectError(await execaCommand`unicorns ${1}`);
expectError(await execaCommand`unicorns ${stringArray}`);
expectError(await execaCommand`unicorns ${[1, 2]}`);
expectError(await execaCommand`unicorns ${await execaCommand`echo foo`}`);
expectError(await execaCommand`unicorns ${execaCommand`echo foo`}`);
expectError(await execaCommand`unicorns ${[await execaCommand`echo foo`, 'bar']}`);
expectError(await execaCommand`unicorns ${[execaCommand`echo foo`, 'bar']}`);
expectType<ExecaResult<{}>>(await execaCommand`unicorns ${true.toString()}`);
expectError(await execaCommand`unicorns ${true}`);

expectError(execaCommandSync());
expectError(execaCommandSync(true));
expectError(execaCommandSync(['unicorns', 'arg']));
expectType<ExecaSyncResult<{}>>(execaCommandSync('unicorns'));
expectError(execaCommandSync(fileUrl));
expectError(execaCommandSync('unicorns', []));
expectError(execaCommandSync('unicorns', ['foo']));
expectType<ExecaSyncResult<{}>>(execaCommandSync('unicorns', {}));
expectError(execaCommandSync('unicorns', [], {}));
expectError(execaCommandSync('unicorns', 'foo'));
expectError(execaCommandSync('unicorns', [true]));
expectError(execaCommandSync('unicorns', [], []));
expectError(execaCommandSync('unicorns', {other: true}));
expectType<ExecaSyncResult<{}>>(execaCommandSync`unicorns`);
expectAssignable<typeof execaCommandSync>(execaCommandSync({}));
expectType<ExecaSyncResult<{}>>(execaCommandSync({})('unicorns'));
expectType<ExecaSyncResult<{}>>(execaCommandSync({})`unicorns`);
expectType<ExecaSyncResult<{}>>(execaCommandSync('unicorns'));
expectType<ExecaSyncResult<{}>>(execaCommandSync`unicorns`);
expectAssignable<{stdout: string}>(execaCommandSync('unicorns'));
expectAssignable<{stdout: Uint8Array}>(execaCommandSync('unicorns', {encoding: 'buffer'}));
expectAssignable<{stdout: string}>(execaCommandSync({})('unicorns'));
expectAssignable<{stdout: Uint8Array}>(execaCommandSync({encoding: 'buffer'})('unicorns'));
expectAssignable<{stdout: Uint8Array}>(execaCommandSync({})({encoding: 'buffer'})('unicorns'));
expectAssignable<{stdout: Uint8Array}>(execaCommandSync({encoding: 'buffer'})({})('unicorns'));
expectAssignable<{stdout: string}>(execaCommandSync({})`unicorns`);
expectAssignable<{stdout: Uint8Array}>(execaCommandSync({encoding: 'buffer'})`unicorns`);
expectAssignable<{stdout: Uint8Array}>(execaCommandSync({})({encoding: 'buffer'})`unicorns`);
expectAssignable<{stdout: Uint8Array}>(execaCommandSync({encoding: 'buffer'})({})`unicorns`);
expectType<ExecaSyncResult<{}>>(execaCommandSync`${'unicorns'}`);
expectType<ExecaSyncResult<{}>>(execaCommandSync`unicorns ${'foo'}`);
expectError(execaCommandSync`unicorns ${'foo'} ${'bar'}`);
expectError(execaCommandSync`unicorns ${1}`);
expectError(execaCommandSync`unicorns ${stringArray}`);
expectError(execaCommandSync`unicorns ${[1, 2]}`);
expectError(execaCommandSync`unicorns ${execaCommandSync`echo foo`}`);
expectError(execaCommandSync`unicorns ${[execaCommandSync`echo foo`, 'bar']}`);
expectType<ExecaSyncResult<{}>>(execaCommandSync`unicorns ${false.toString()}`);
expectError(execaCommandSync`unicorns ${false}`);

expectError($());
expectError($(true));
expectError($(['unicorns', 'arg']));
expectAssignable<ExecaSubprocess>($('unicorns'));
expectAssignable<ExecaSubprocess>($(fileUrl));
expectAssignable<ExecaSubprocess>($('unicorns', []));
expectAssignable<ExecaSubprocess>($('unicorns', ['foo']));
expectAssignable<ExecaSubprocess>($('unicorns', {}));
expectAssignable<ExecaSubprocess>($('unicorns', [], {}));
expectError($('unicorns', 'foo'));
expectError($('unicorns', [true]));
expectError($('unicorns', [], []));
expectError($('unicorns', {other: true}));
expectAssignable<ExecaSubprocess>($`unicorns`);
expectAssignable<typeof $>($({}));
expectAssignable<ExecaSubprocess>($({})('unicorns'));
expectAssignable<ExecaSubprocess>($({})`unicorns`);
expectType<ExecaResult<{}>>(await $('unicorns'));
expectType<ExecaResult<{}>>(await $`unicorns`);
expectAssignable<{stdout: string}>(await $('unicorns'));
expectAssignable<{stdout: Uint8Array}>(await $('unicorns', {encoding: 'buffer'}));
expectAssignable<{stdout: string}>(await $('unicorns', ['foo']));
expectAssignable<{stdout: Uint8Array}>(await $('unicorns', ['foo'], {encoding: 'buffer'}));
expectAssignable<{stdout: string}>(await $({})('unicorns'));
expectAssignable<{stdout: Uint8Array}>(await $({encoding: 'buffer'})('unicorns'));
expectAssignable<{stdout: Uint8Array}>(await $({})({encoding: 'buffer'})('unicorns'));
expectAssignable<{stdout: Uint8Array}>(await $({encoding: 'buffer'})({})('unicorns'));
expectAssignable<{stdout: string}>(await $({})`unicorns`);
expectAssignable<{stdout: Uint8Array}>(await $({encoding: 'buffer'})`unicorns`);
expectAssignable<{stdout: Uint8Array}>(await $({})({encoding: 'buffer'})`unicorns`);
expectAssignable<{stdout: Uint8Array}>(await $({encoding: 'buffer'})({})`unicorns`);
expectType<ExecaResult<{}>>(await $`${'unicorns'}`);
expectType<ExecaResult<{}>>(await $`unicorns ${'foo'}`);
expectType<ExecaResult<{}>>(await $`unicorns ${'foo'} ${'bar'}`);
expectType<ExecaResult<{}>>(await $`unicorns ${1}`);
expectType<ExecaResult<{}>>(await $`unicorns ${stringArray}`);
expectType<ExecaResult<{}>>(await $`unicorns ${[1, 2]}`);
expectType<ExecaResult<{}>>(await $`unicorns ${await $`echo foo`}`);
expectError(await $`unicorns ${$`echo foo`}`);
expectType<ExecaResult<{}>>(await $`unicorns ${[await $`echo foo`, 'bar']}`);
expectError(await $`unicorns ${[$`echo foo`, 'bar']}`);
expectType<ExecaResult<{}>>(await $`unicorns ${true.toString()}`);
expectError(await $`unicorns ${true}`);

expectError($.sync());
expectError($.sync(true));
expectError($.sync(['unicorns', 'arg']));
expectType<ExecaSyncResult<{}>>($.sync('unicorns'));
expectType<ExecaSyncResult<{}>>($.sync(fileUrl));
expectType<ExecaSyncResult<{}>>($.sync('unicorns', []));
expectType<ExecaSyncResult<{}>>($.sync('unicorns', ['foo']));
expectType<ExecaSyncResult<{}>>($.sync('unicorns', {}));
expectType<ExecaSyncResult<{}>>($.sync('unicorns', [], {}));
expectError($.sync('unicorns', 'foo'));
expectError($.sync('unicorns', [true]));
expectError($.sync('unicorns', [], []));
expectError($.sync('unicorns', {other: true}));
expectType<ExecaSyncResult<{}>>($.sync`unicorns`);
expectAssignable<typeof $.sync>($.sync({}));
expectType<ExecaSyncResult<{}>>($.sync({})('unicorns'));
expectType<ExecaSyncResult<{}>>($({}).sync('unicorns'));
expectType<ExecaSyncResult<{}>>($.sync({})`unicorns`);
expectType<ExecaSyncResult<{}>>($({}).sync`unicorns`);
expectType<ExecaSyncResult<{}>>($.sync('unicorns'));
expectType<ExecaSyncResult<{}>>($.sync`unicorns`);
expectAssignable<{stdout: string}>($.sync('unicorns'));
expectAssignable<{stdout: Uint8Array}>($.sync('unicorns', {encoding: 'buffer'}));
expectAssignable<{stdout: string}>($.sync('unicorns', ['foo']));
expectAssignable<{stdout: Uint8Array}>($.sync('unicorns', ['foo'], {encoding: 'buffer'}));
expectAssignable<{stdout: string}>($.sync({})('unicorns'));
expectAssignable<{stdout: string}>($({}).sync('unicorns'));
expectAssignable<{stdout: Uint8Array}>($.sync({encoding: 'buffer'})('unicorns'));
expectAssignable<{stdout: Uint8Array}>($({encoding: 'buffer'}).sync('unicorns'));
expectAssignable<{stdout: Uint8Array}>($.sync({})({encoding: 'buffer'})('unicorns'));
expectAssignable<{stdout: Uint8Array}>($({})({encoding: 'buffer'}).sync('unicorns'));
expectAssignable<{stdout: Uint8Array}>($.sync({encoding: 'buffer'})({})('unicorns'));
expectAssignable<{stdout: Uint8Array}>($({encoding: 'buffer'}).sync({})('unicorns'));
expectAssignable<{stdout: string}>($.sync({})`unicorns`);
expectAssignable<{stdout: string}>($({}).sync`unicorns`);
expectAssignable<{stdout: Uint8Array}>($.sync({encoding: 'buffer'})`unicorns`);
expectAssignable<{stdout: Uint8Array}>($({encoding: 'buffer'}).sync`unicorns`);
expectAssignable<{stdout: Uint8Array}>($.sync({})({encoding: 'buffer'})`unicorns`);
expectAssignable<{stdout: Uint8Array}>($({})({encoding: 'buffer'}).sync`unicorns`);
expectAssignable<{stdout: Uint8Array}>($.sync({encoding: 'buffer'})({})`unicorns`);
expectAssignable<{stdout: Uint8Array}>($({encoding: 'buffer'}).sync({})`unicorns`);
expectType<ExecaSyncResult<{}>>($.sync`${'unicorns'}`);
expectType<ExecaSyncResult<{}>>($.sync`unicorns ${'foo'}`);
expectType<ExecaSyncResult<{}>>($.sync`unicorns ${'foo'} ${'bar'}`);
expectType<ExecaSyncResult<{}>>($.sync`unicorns ${1}`);
expectType<ExecaSyncResult<{}>>($.sync`unicorns ${stringArray}`);
expectType<ExecaSyncResult<{}>>($.sync`unicorns ${[1, 2]}`);
expectType<ExecaSyncResult<{}>>($.sync`unicorns ${$.sync`echo foo`}`);
expectType<ExecaSyncResult<{}>>($.sync`unicorns ${[$.sync`echo foo`, 'bar']}`);
expectType<ExecaSyncResult<{}>>($.sync`unicorns ${false.toString()}`);
expectError($.sync`unicorns ${false}`);

expectError($.s());
expectError($.s(true));
expectError($.s(['unicorns', 'arg']));
expectType<ExecaSyncResult<{}>>($.s('unicorns'));
expectType<ExecaSyncResult<{}>>($.s(fileUrl));
expectType<ExecaSyncResult<{}>>($.s('unicorns', []));
expectType<ExecaSyncResult<{}>>($.s('unicorns', ['foo']));
expectType<ExecaSyncResult<{}>>($.s('unicorns', {}));
expectType<ExecaSyncResult<{}>>($.s('unicorns', [], {}));
expectError($.s('unicorns', 'foo'));
expectError($.s('unicorns', [true]));
expectError($.s('unicorns', [], []));
expectError($.s('unicorns', {other: true}));
expectType<ExecaSyncResult<{}>>($.s`unicorns`);
expectAssignable<typeof $.s>($.s({}));
expectType<ExecaSyncResult<{}>>($.s({})('unicorns'));
expectType<ExecaSyncResult<{}>>($({}).s('unicorns'));
expectType<ExecaSyncResult<{}>>($.s({})`unicorns`);
expectType<ExecaSyncResult<{}>>($({}).s`unicorns`);
expectType<ExecaSyncResult<{}>>($.s('unicorns'));
expectType<ExecaSyncResult<{}>>($.s`unicorns`);
expectAssignable<{stdout: string}>($.s('unicorns'));
expectAssignable<{stdout: Uint8Array}>($.s('unicorns', {encoding: 'buffer'}));
expectAssignable<{stdout: string}>($.s('unicorns', ['foo']));
expectAssignable<{stdout: Uint8Array}>($.s('unicorns', ['foo'], {encoding: 'buffer'}));
expectAssignable<{stdout: string}>($.s({})('unicorns'));
expectAssignable<{stdout: string}>($({}).s('unicorns'));
expectAssignable<{stdout: Uint8Array}>($.s({encoding: 'buffer'})('unicorns'));
expectAssignable<{stdout: Uint8Array}>($({encoding: 'buffer'}).s('unicorns'));
expectAssignable<{stdout: Uint8Array}>($.s({})({encoding: 'buffer'})('unicorns'));
expectAssignable<{stdout: Uint8Array}>($({})({encoding: 'buffer'}).s('unicorns'));
expectAssignable<{stdout: Uint8Array}>($.s({encoding: 'buffer'})({})('unicorns'));
expectAssignable<{stdout: Uint8Array}>($({encoding: 'buffer'}).s({})('unicorns'));
expectAssignable<{stdout: string}>($.s({})`unicorns`);
expectAssignable<{stdout: string}>($({}).s`unicorns`);
expectAssignable<{stdout: Uint8Array}>($.s({encoding: 'buffer'})`unicorns`);
expectAssignable<{stdout: Uint8Array}>($({encoding: 'buffer'}).s`unicorns`);
expectAssignable<{stdout: Uint8Array}>($.s({})({encoding: 'buffer'})`unicorns`);
expectAssignable<{stdout: Uint8Array}>($({})({encoding: 'buffer'}).s`unicorns`);
expectAssignable<{stdout: Uint8Array}>($.s({encoding: 'buffer'})({})`unicorns`);
expectAssignable<{stdout: Uint8Array}>($({encoding: 'buffer'}).s({})`unicorns`);
expectType<ExecaSyncResult<{}>>($.s`${'unicorns'}`);
expectType<ExecaSyncResult<{}>>($.s`unicorns ${'foo'}`);
expectType<ExecaSyncResult<{}>>($.s`unicorns ${'foo'} ${'bar'}`);
expectType<ExecaSyncResult<{}>>($.s`unicorns ${1}`);
expectType<ExecaSyncResult<{}>>($.s`unicorns ${stringArray}`);
expectType<ExecaSyncResult<{}>>($.s`unicorns ${[1, 2]}`);
expectType<ExecaSyncResult<{}>>($.s`unicorns ${$.s`echo foo`}`);
expectType<ExecaSyncResult<{}>>($.s`unicorns ${[$.s`echo foo`, 'bar']}`);
expectType<ExecaSyncResult<{}>>($.s`unicorns ${false.toString()}`);
expectError($.s`unicorns ${false}`);

expectError(execaNode());
expectError(execaNode(true));
expectError(execaNode(['unicorns', 'arg']));
expectAssignable<ExecaSubprocess>(execaNode('unicorns'));
expectAssignable<ExecaSubprocess>(execaNode(fileUrl));
expectAssignable<ExecaSubprocess>(execaNode('unicorns', []));
expectAssignable<ExecaSubprocess>(execaNode('unicorns', ['foo']));
expectAssignable<ExecaSubprocess>(execaNode('unicorns', {}));
expectAssignable<ExecaSubprocess>(execaNode('unicorns', [], {}));
expectError(execaNode('unicorns', 'foo'));
expectError(execaNode('unicorns', [true]));
expectError(execaNode('unicorns', [], []));
expectError(execaNode('unicorns', {other: true}));
expectAssignable<ExecaSubprocess>(execaNode`unicorns`);
expectAssignable<typeof execaNode>(execaNode({}));
expectAssignable<ExecaSubprocess>(execaNode({})('unicorns'));
expectAssignable<ExecaSubprocess>(execaNode({})`unicorns`);
expectType<ExecaResult<{}>>(await execaNode('unicorns'));
expectType<ExecaResult<{}>>(await execaNode`unicorns`);
expectAssignable<{stdout: string}>(await execaNode('unicorns'));
expectAssignable<{stdout: Uint8Array}>(await execaNode('unicorns', {encoding: 'buffer'}));
expectAssignable<{stdout: string}>(await execaNode('unicorns', ['foo']));
expectAssignable<{stdout: Uint8Array}>(await execaNode('unicorns', ['foo'], {encoding: 'buffer'}));
expectAssignable<{stdout: string}>(await execaNode({})('unicorns'));
expectAssignable<{stdout: Uint8Array}>(await execaNode({encoding: 'buffer'})('unicorns'));
expectAssignable<{stdout: Uint8Array}>(await execaNode({})({encoding: 'buffer'})('unicorns'));
expectAssignable<{stdout: Uint8Array}>(await execaNode({encoding: 'buffer'})({})('unicorns'));
expectAssignable<{stdout: string}>(await execaNode({})`unicorns`);
expectAssignable<{stdout: Uint8Array}>(await execaNode({encoding: 'buffer'})`unicorns`);
expectAssignable<{stdout: Uint8Array}>(await execaNode({})({encoding: 'buffer'})`unicorns`);
expectAssignable<{stdout: Uint8Array}>(await execaNode({encoding: 'buffer'})({})`unicorns`);
expectType<ExecaResult<{}>>(await execaNode`${'unicorns'}`);
expectType<ExecaResult<{}>>(await execaNode`unicorns ${'foo'}`);
expectType<ExecaResult<{}>>(await execaNode`unicorns ${'foo'} ${'bar'}`);
expectType<ExecaResult<{}>>(await execaNode`unicorns ${1}`);
expectType<ExecaResult<{}>>(await execaNode`unicorns ${stringArray}`);
expectType<ExecaResult<{}>>(await execaNode`unicorns ${[1, 2]}`);
expectType<ExecaResult<{}>>(await execaNode`unicorns ${await execaNode`echo foo`}`);
expectError(await execaNode`unicorns ${execaNode`echo foo`}`);
expectType<ExecaResult<{}>>(await execaNode`unicorns ${[await execaNode`echo foo`, 'bar']}`);
expectError(await execaNode`unicorns ${[execaNode`echo foo`, 'bar']}`);
expectType<ExecaResult<{}>>(await execaNode`unicorns ${true.toString()}`);
expectError(await execaNode`unicorns ${true}`);

expectAssignable<ExecaSubprocess>(execaNode('unicorns', {nodePath: './node'}));
expectAssignable<ExecaSubprocess>(execaNode('unicorns', {nodePath: fileUrl}));
expectAssignable<{stdout: string}>(await execaNode('unicorns', {nodeOptions: ['--async-stack-traces']}));
expectAssignable<{stdout: Uint8Array}>(await execaNode('unicorns', {nodeOptions: ['--async-stack-traces'], encoding: 'buffer'}));
expectAssignable<{stdout: string}>(await execaNode('unicorns', ['foo'], {nodeOptions: ['--async-stack-traces']}));
expectAssignable<{stdout: Uint8Array}>(await execaNode('unicorns', ['foo'], {nodeOptions: ['--async-stack-traces'], encoding: 'buffer'}));
